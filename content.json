[{"title":"iOS知识总结-Part2","date":"2017-04-25T05:43:49.000Z","path":"2017/04/25/iOS知识总结-Part2/","text":"文章大纲，便于浏览","content":"<p>文章大纲，便于浏览</p>\n","excerpt":"","categories":[],"tags":[{"name":"知识总结","slug":"知识总结","permalink":"http://yoursite.com/tags/知识总结/"}]},{"title":"iOS知识总结-Part1","date":"2017-04-15T15:43:49.000Z","path":"2017/04/15/iOS知识总结-Part1/","text":"文章大纲，便于浏览 01-iOS程序启动过程 02-浅拷贝-深拷贝 03-View的生命周期 04-@property 05-事件传递和事件响应 06-KVC 07-KVO 08-iOS数据持久化方案 01-iOS-App-startup-process###一、启动完整过程 1.main函数 2.UIApplicationMain函数 创建UIApplication对象 创建UIApplication的delegate对象 3.delegate对象开始处理(监听)系统事件(没有storyboard) 程序启动完毕的时候, 就会调用代理的:didFinishLaunchingWithOptions:方法 在application:didFinishLaunchingWithOptions:中创建UIWindow 创建和设置UIWindow的rootViewController 显示窗口 4.根据Info.plist获得最主要storyboard的文件名,加载最主要的storyboard(有storyboard) 创建UIWindow 创建和设置UIWindow的rootViewController 显示窗口 ###二、程序启动原理 1.main函数中执行了一个UIApplicationMain这个函数 123int UIApplicationMain(int argc, char *argv[], NSString *principalClassName, NSString *delegateClassName);argc、argv：直接传递给UIApplicationMain进行相关处理即可 2.principalClassName：指定应用程序类名（app的象征），该类必须是UIApplication(或子类)。如果为nil,则用UIApplication类作为默认值 3.delegateClassName：指定应用程序的代理类，该类必须遵守UIApplicationDelegate协议 4.UIApplicationMain函数会根据principalClassName创建UIApplication对象，根据delegateClassName创建一个delegate对象，并将该delegate对象赋值给UIApplication对象中的delegate属性 5.接着会建立应用程序的Main Runloop（事件循环），进行事件的处理(首先会在程序完毕后调用delegate对象的application:didFinishLaunchingWithOptions:方法) 程序正常退出时UIApplicationMain函数才返回 1234567891011int main(int argc, char * argv[])&#123; @autoreleasepool &#123; /*** argc: 系统或者用户传入的参数个数* argv: 系统或者用户传入的实际参数 * 1.根据传入的第三个参数创建UIApplication对象 * 2.根据传入的第四个产生创建UIApplication对象的代理* 3.设置刚刚创建出来的代理对象为UIApplication的代理 * 4.开启一个事件循环 **/ return UIApplicationMain(argc, argv, @\"UIApplication\", @\"YYAppDelegate\"); &#125;&#125; 启动与代理： 02-ShallowCopy-DeepCopy简要总结一下什么是浅拷贝，什么是深拷贝 深拷贝就是内容拷贝 浅拷贝就是指针拷贝 ###一.系统对象的 copy/mutableCopy 1234567891011121314151617NSString *string = @\"LiMing\"; NSString *copyString = [string copy]; NSString *mutableString = [string mutableCopy]; NSLog(@\"string = %p\",string); NSLog(@\"copyString = %p\",copyString); NSLog(@\"mutableString = %p \",mutableString);结论：1.string 和 copyString 他们只是二个不同的指针，指向内存中的同一块地址，copy 只是指针复制2.string 和 mutableString 打印出来的地址不同，是因为两个指针指向的地址本就不同，mutableCopy 是内容复制注意：其他对象 NSArray 、NSMutableArray 、NSDictionary 、NSMutableDictionary 一样适用 规律可以从这张图看出来 ###二.自定义对象实现 Copy-MutableCopy copy 1234GZQPerson *person = [[GZQPerson alloc] init];person.age = 20;person.name = @\"GZQ\";GZQPerson *copyP = [person copy]; // 这里崩溃 崩溃： 看崩溃信息GZQPerson应该先实现： 1- (id)copyWithZone:(NSZone *)zone; 测试： 12345678910111213141516171819202122232425#import \"GZQPerson.h\"@interface GZQPerson ()&lt;NSCopying,NSMutableCopying&gt;@end@implementation GZQPerson- (id)copyWithZone:(NSZone *)zone &#123; GZQPerson *person = [[[self class] allocWithZone:zone] init]; person.age = self.age; person.name = self.name; return person;&#125;- (id)mutableCopyWithZone:(NSZone *)zone &#123; GZQPerson *person = [[[self class] allocWithZone:zone] init]; person.age = self.age; person.name = self.name; return person;&#125;@end 12345678910111213141516171819202122232425#import \"ViewController.h\"#import \"GZQPerson.h\"@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; GZQPerson *person = [[GZQPerson alloc] init]; person.age = 20; person.name = @\"GZQ\"; GZQPerson *copyP = [person copy]; NSLog(@\"copyP=%p\",copyP); NSLog(@\"person=%p\",person); NSLog(@\"person=%p\",copyP.name); NSLog(@\"person=%p\",person.name); &#125;@end 可以看出虽然指针的地址不同，但是存储的地址是一致的。 ###三.copy 本质 property copy 实际上就对name干了这个： 12345678#import &lt;Foundation/Foundation.h&gt;property copy 实际上就对name干了这个：- (void)setName:(NSString *)name&#123; _name = [name copy];&#125; strong是不执行Copy操作的 1234567891011@property (nonatomic, strong) NSString *name;NSMutableString *string = [NSMutableString stringWithFormat:@\"深拷贝-浅拷贝\"];GZQPerson *person = [[GZQPerson alloc] init];person.name = string;// 可以改变person.name的值，因为其内部没有生成新的对象[string appendString:@\"LALALA\"];NSLog(@\"name = %@\", person.name); 03-View的生命周期 读懂这一张图即可 04-@property @property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的 @property 的本质. 1@property = ivar + getter + setter; 下面解释下： “属性” (property)有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter）。 “属性” (property)作为 Objective-C 的一项特性，主要的作用就在于封装对象中的数据。 Objective-C 对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过“存取方法”(access method)来访问。其中，“获取方法” (getter)用于读取变量值，而“设置方法” (setter)用于写入变量值。这个概念已经定型，并且经由“属性”这一特性而成为 Objective-C 2.0 的一部分。 而在正规的 Objective-C 编码风格中，存取方法有着严格的命名规范。 正因为有了这种严格的命名规范，所以 Objective-C 这门语言才能根据名称自动创建出存取方法。其实也可以把属性当做一种关键字，其表示: 编译器会自动写出一套存取方法，用以访问给定类型中具有给定名称的变量。 所以你也可以这么说： 1@property = getter + setter; 例如下面这个类： 1234@interface Person : NSObject@property NSString *firstName;@property NSString *lastName;@end 上述代码写出来的类与下面这种写法等效： 123456@interface Person : NSObject- (NSString *)firstName;- (void)setFirstName:(NSString *)firstName;- (NSString *)lastName;- (void)setLastName:(NSString *)lastName;@end property在runtime中是objc_property_t定义如下: 1typedef struct objc_property *objc_property_t; 而objc_property是一个结构体，包括name和attributes，定义如下： 1234struct property_t &#123; const char *name; const char *attributes;&#125;; 而attributes本质是objc_property_attribute_t，定义了property的一些属性，定义如下： 12345/// Defines a property attributetypedef struct &#123; const char *name; /**&lt; The name of the attribute */ const char *value; /**&lt; The value of the attribute (usually empty) */&#125; objc_property_attribute_t; 而attributes的具体内容是什么呢？其实，包括：类型，原子性，内存语义和对应的实例变量。 例如：我们定义一个string的property 1@property (nonatomic, copy) NSString *string; 通过 property_getAttributes(property)获取到attributes并打印出来之后的结果为 1T@\"NSString\",C,N,V_string 其中T就代表类型，可参阅Type Encodings，C就代表Copy，N代表nonatomic，V就代表对于的实例变量。 ivar、getter、setter 是如何生成并添加到这个类中的? “自动合成”( autosynthesis) 完成属性定义后，编译器会自动编写访问这些属性所需的方法，此过程叫做“自动合成”(autosynthesis)。需要强调的是，这个过程由编译 器在编译期执行，所以编辑器里看不到这些“合成方法”(synthesized method)的源代码。除了生成方法代码 getter、setter 之外，编译器还要自动向类中添加适当类型的实例变量，并且在属性名前面加下划线，以此作为实例变量的名字。在前例中，会生成两个实例变量，其名称分别为 _firstName 与 _lastName。也可以在类的实现代码里通过@synthesize 语法来指定实例变量的名字. 1234@implementation Person@synthesize firstName = _myFirstName;@synthesize lastName = _myLastName;@end 我为了搞清属性是怎么实现的,曾经反编译过相关的代码,他大致生成了五个东西 1234561. OBJC_IVAR_$类名$属性名称 ：该属性的“偏移量” (offset)，这个偏移量是“硬编码” (hardcode)，表示该变量距离存放对象的内存区域的起始地址有多远。2. setter 与 getter 方法对应的实现函数3. ivar_list ：成员变量列表4. method_list ：方法列表5. prop_list ：属性列表也就是说我们每次在增加一个属性,系统都会在 ivar_list 中添加一个成员变量的描述,在 method_list 中增加 setter 与 getter 方法的描述,在属性列表中增加一个属性的描述,然后计算该属性在对象中的偏移量,然后给出 setter 与 getter 方法对应的实现,在 setter 方法中从偏移量的位置开始赋值,在 getter 方法中从偏移量开始取值,为了能够读取正确字节数,系统对象偏移量的指针类型进行了类型强转. 属性可以拥有的特质分为四类: 原子性— nonatomic 特质,在默认情况下，由编译器合成的方法会通过锁定机制确保其原子性(atomicity)。如果属性具备 nonatomic 特质，则不使用自旋锁。请注意，尽管没有名为“atomic”的特质(如果某属性不具备 nonatomic 特质，那它就是“原子的” ( atomic) )，但是仍然可以在属性特质中写明这一点，编译器不会报错。若是自己定义存取方法，那么就应该遵从与属性特质相符的原子性。 读/写权限—readwrite(读写)、readonly (只读) 内存管理语义—assign、strong、 weak、unsafe_unretained、copy 方法名—getter= 、setter= getter=的样式： 123@property (nonatomic, getter=isOn) BOOL on; (`setter=`这种不常用，也不推荐使用。故不在这里给出写法。） setter=一般用在特殊的情境下，比如： 在数据反序列化、转模型的过程中，服务器返回的字段如果以 init 开头，所以你需要定义一个 init 开头的属性，但默认生成的 setter 与 getter 方法也会以 init 开头，而编译器会把所有以 init 开头的方法当成初始化方法，而初始化方法只能返回 self 类型，因此编译器会报错。 这时你就可以使用下面的方式来避免编译器报错： 1@property(nonatomic, strong, getter=p_initBy, setter=setP_initBy:)NSString *initBy; 另外也可以用关键字进行特殊说明，来避免编译器报错： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556@property(nonatomic, readwrite, copy, null_resettable) NSString *initBy;- (NSString *)initBy __attribute__((objc_method_family(none)));1. 不常用的：nonnull,null_resettable,nullable注意：很多人会认为如果属性具备 nonatomic 特质，则不使用 “同步锁”。其实在属性设置方法中使用的是自旋锁，自旋锁相关代码如下：static inline void reallySetProperty(id self, SEL _cmd, id newValue, ptrdiff_t offset, bool atomic, bool copy, bool mutableCopy)&#123; if (offset == 0) &#123; object_setClass(self, newValue); return; &#125; id oldValue; id *slot = (id*) ((char*)self + offset); if (copy) &#123; newValue = [newValue copyWithZone:nil]; &#125; else if (mutableCopy) &#123; newValue = [newValue mutableCopyWithZone:nil]; &#125; else &#123; if (*slot == newValue) return; newValue = objc_retain(newValue); &#125; if (!atomic) &#123; oldValue = *slot; *slot = newValue; &#125; else &#123; spinlock_t&amp; slotlock = PropertyLocks[slot]; slotlock.lock(); oldValue = *slot; *slot = newValue; slotlock.unlock(); &#125; objc_release(oldValue);&#125;void objc_setProperty(id self, SEL _cmd, ptrdiff_t offset, id newValue, BOOL atomic, signed char shouldCopy) &#123; bool copy = (shouldCopy &amp;&amp; shouldCopy != MUTABLE_COPY); bool mutableCopy = (shouldCopy == MUTABLE_COPY); reallySetProperty(self, _cmd, newValue, offset, atomic, copy, mutableCopy);&#125; 05-事件传递和事件响应这部分知识如果自己总结，篇幅较长。可以参考以下文章 06-KVCKey-Value Coding (KVC) KVC（Key-value coding）键值编码，单看这个名字可能不太好理解。其实翻译一下就很简单了，就是指iOS的开发中，可以允许开发者通过Key名直接访问对象的属性，或者给对象的属性赋值。而不需要调用明确的存取方法。这样就可以在运行时动态在访问和修改对象的属性。而不是在编译时确定，这也是iOS开发中的黑魔法之一。很多高级的iOS开发技巧都是基于KVC实现的。目前网上关于KVC的文章在非常多，有的只是简单地说了下用法，有的讲得深入但是在使用场景和最佳实践没有说明，我写下这遍文章就是给大家详解一个最完整最详细的KVC。 KVC在iOS中的定义 无论是Swift还是Objective-C，KVC的定义都是对NSObject的扩展来实现的(Objective-C中有个显式的NSKeyValueCoding类别名，而Swift没有，也不需要)所以对于所有继承了NSObject在类型，都能使用KVC(一些纯Swift类和结构体是不支持KVC的)，下面是KVC最为重要的四个方法 1234- (nullable id)valueForKey:(NSString *)key; //直接通过Key来取值- (void)setValue:(nullable id)value forKey:(NSString *)key; //通过Key来设值- (nullable id)valueForKeyPath:(NSString *)keyPath; //通过KeyPath来取值- (void)setValue:(nullable id)value forKeyPath:(NSString *)keyPath; //通过KeyPath来设值 当然NSKeyValueCoding类别中还有其他的一些方法，下面列举一些 1234567891011121314+ (BOOL)accessInstanceVariablesDirectly;//默认返回YES，表示如果没有找到Set&lt;Key&gt;方法的话，会按照_key，_iskey，key，iskey的顺序搜索成员，设置成NO就不这样搜索- (BOOL)validateValue:(inout id __nullable * __nonnull)ioValue forKey:(NSString *)inKey error:(out NSError **)outError;//KVC提供属性值确认的API，它可以用来检查set的值是否正确、为不正确的值做一个替换值或者拒绝设置新值并返回错误原因。- (NSMutableArray *)mutableArrayValueForKey:(NSString *)key;//这是集合操作的API，里面还有一系列这样的API，如果属性是一个NSMutableArray，那么可以用这个方法来返回- (nullable id)valueForUndefinedKey:(NSString *)key;//如果Key不存在，且没有KVC无法搜索到任何和Key有关的字段或者属性，则会调用这个方法，默认是抛出异常- (void)setValue:(nullable id)value forUndefinedKey:(NSString *)key;//和上一个方法一样，只不过是设值。- (void)setNilValueForKey:(NSString *)key;//如果你在SetValue方法时面给Value传nil，则会调用这个方法- (NSDictionary&lt;NSString *, id&gt; *)dictionaryWithValuesForKeys:(NSArray&lt;NSString *&gt; *)keys;//输入一组key,返回该组key对应的Value，再转成字典返回，用于将Model转到字典。 上面的这些方法在碰到特殊情况或者有特殊需求还是会用到的，所以也是可以了解一下。后面的代码示例会有讲到其中的一些方法。同时苹果对一些容器类比如NSArray或者NSSet等，KVC有着特殊的实现。建议有基础的或者英文好的开发者直接去看苹果的官方文档，相信你会对KVC的理解更上一个台阶。 KVC是怎么寻找Key的 KVC是怎么使用的，我相信绝大多数的开发者都很清楚，我在这里就不再写简单的使用KVC来设值和取值的代码了，首页我们来探讨KVC在内部是按什么样的顺序来寻找key的。当调用setValue：属性值 forKey：``@”name“的代码时，底层的执行机制如下： 程序优先调用set&lt;Key&gt;:属性值方法，代码通过setter方法完成设置。注意，这里的&lt;key&gt;是指成员变量名，首字母大清写要符合KVC的全名规则，下同 如果没有找到setName：方法，KVC机制会检查+ (BOOL)accessInstanceVariablesDirectly方法有没有返回YES，默认该方法会返回YES，如果你重写了该方法让其返回NO的话，那么在这一步KVC会执行setValue：forUNdefinedKey：方法，不过一般开发者不会这么做。所以KVC机制会搜索该类里面有没有名为_&lt;key&gt;的成员变量，无论该变量是在类接口部分定义，还是在类实现部分定义，也无论用了什么样的访问修饰符，只在存在以_&lt;key&gt;命名的变量，KVC都可以对该成员变量赋值。 如果该类即没有set&lt;Key&gt;：方法，也没有_&lt;key&gt;成员变量，KVC机制会搜索_is&lt;Key&gt;的成员变量， 和上面一样，如果该类即没有set&lt;Key&gt;：方法，也没有_&lt;key&gt;和_is&lt;Key&gt;成员变量，KVC机制再会继续搜索&lt;key&gt;和is&lt;Key&gt;的成员变量。再给它们赋值。 如果上面列出的方法或者成员变量都不存在，系统将会执行该对象的setValue：forUNdefinedKey：方法，默认是抛出异常。 如果开发者想让这个类禁用KVC里，那么重写+ (BOOL)accessInstanceVariablesDirectly方法让其返回NO即可，这样的话如果KVC没有找到set&lt;Key&gt;:属性名时，会直接用setValue：forUNdefinedKey：方法。 07-KVOKVO，全称为Key-Value Observing，是iOS中的一种设计模式，用于检测对象的某些属性的实时变化情况并作出响应。当应用场景比较复杂时，多个地方存在crash的危险。 首先，假设我们的目标是在一个UITableViewController内对tableview的contentOffset进行实时监测，很容易地使用KVO来实现为。 在初始化方法中加入： 12345678910111213[_tableView addObserver:self forKeyPath:@\"contentOffset\" options:NSKeyValueObservingOptionNew context:nil];// 在dealloc中移除KVO监听：[_tableView removeObserver:self forKeyPath:@\"contentOffset\" context:nil];// 添加默认的响应回调方法：- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context&#123; [self doSomethingWhenContentOffsetChanges];&#125; 好了，KVO实现就到此完美结束了，开玩笑，肯定没这么简单的，这样的代码太粗糙了，当你在controller中添加多个KVO时，所有的回调都是走同上述函数，那就必须对触发回调函数的来源进行判断。判断如下： 12345678910- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context&#123; if (object == _tableView &amp;&amp; [keyPath isEqualToString:@\"contentOffset\"]) &#123; [self doSomethingWhenContentOffsetChanges]; &#125;&#125; 你以为这样就结束了吗？答案是否定的！我们假设当前类(在例子中为UITableViewController)还有父类，并且父类也有自己绑定了一些其他KVO呢？我们看到，上述回调函数体中只有一个判断，如果这个if不成立，这次KVO事件的触发就会到此中断了。但事实上，若当前类无法捕捉到这个KVO，那很有可能是在他的superClass，或者super-superClass...中，上述处理砍断了这个链。合理的处理方式应该是这样的： 1234567891011121314- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context&#123; if (object == _tableView &amp;&amp; [keyPath isEqualToString:@\"contentOffset\"]) &#123; [self doSomethingWhenContentOffsetChanges]; &#125; else &#123; [super observeValueForKeyPath:keyPath ofObject:object change:change context:context]; &#125;&#125; 这样就结束了吗？答案仍旧是否定的。潜在的问题有可能出现在dealloc中对KVO的注销上。KVO的一种缺陷(其实不能称为缺陷，应该称为特性)是，当对同一个keypath进行两次removeObserver时会导致程序crash，这种情况常常出现在父类有一个kvo，父类在dealloc中remove了一次，子类又remove了一次的情况下。不要以为这种情况很少出现！当你封装framework开源给别人用或者多人协作开发时是有可能出现的，而且这种crash很难发现。不知道你发现没，目前的代码中context字段都是nil，那能否利用该字段来标识出到底kvo是superClass注册的，还是self注册的？ 回答是可以的。我们可以分别在父类以及本类中定义各自的context字符串，比如在本类中定义context为@&quot;ThisIsMyKVOContextNotSuper&quot;;然后在dealloc中remove observer时指定移除的自身添加的observer。这样iOS就能知道移除的是自己的kvo，而不是父类中的kvo，避免二次remove造成crash。 08-iOS数据持久化方案存储方案 plist文件（属性列表） preference（偏好设置） NSKeyedArchiver（归档） SQLite 3 CoreData 沙盒 iOS程序默认情况下只能访问程序自己的目录，这个目录被称为“沙盒”。 1.结构沙盒的目录结构如下： 123456\"应用程序包\"DocumentsLibrary Caches Preferencestmp 2.目录特性 虽然沙盒中有这么多文件夹，但是每个文件夹都不尽相同，都有各自的特性。所以在选择存放目录时，一定要认真选择适合的目录。 “应用程序包”: 这里面存放的是应用程序的源文件，包括资源文件和可执行文件。 Documents: 最常用的目录，iTunes同步该应用时会同步此文件夹中的内容，适合存储重要数据。 12NSString *path = [[NSBundle mainBundle] bundlePath];NSLog(@\"%@\", path); Library/Caches: iTunes不会同步此文件夹，适合存储体积大，不需要备份的非重要数据。 12NSString *path = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject;NSLog(@\"%@\", path); Library/Preferences: iTunes同步该应用时会同步此文件夹中的内容，通常保存应用的设置信息。 12NSString *path = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES).firstObject;NSLog(@\"%@\", path); tmp: iTunes不会同步此文件夹，系统可能在应用没运行时就删除该目录下的文件，所以此目录适合保存应用中的一些临时文件，用完就删除。 12NSString *path = NSTemporaryDirectory();NSLog(@\"%@\", path); plist文件 plist文件是将某些特定的类，通过XML文件的方式保存在目录中。 可以被序列化的类型只有如下几种： 12345678910NSArray;NSMutableArray;NSDictionary;NSMutableDictionary;NSData;NSMutableData;NSString;NSMutableString;NSNumber;NSDate; 1.获得文件路径12NSString *path = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject;NSString *fileName = [path stringByAppendingPathComponent:@\"123.plist\"]; 2.存储12NSArray *array = @[@\"123\", @\"456\", @\"789\"];[array writeToFile:fileName atomically:YES]; 3.读取12NSArray *result = [NSArray arrayWithContentsOfFile:fileName];NSLog(@\"%@\", result); 4.注意123// 只有以上列出的类型才能使用plist文件存储。// 存储时使用writeToFile: atomically:方法。 其中atomically表示是否需要先写入一个辅助文件，再把辅助文件拷贝到目标文件地址。这是更安全的写入文件方法，一般都写YES。// 读取时使用arrayWithContentsOfFile:方法。 Preference1.使用方法12345678910111213141516//1.获得NSUserDefaults文件NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];//2.向文件中写入内容[userDefaults setObject:@\"AAA\" forKey:@\"a\"];[userDefaults setBool:YES forKey:@\"sex\"];[userDefaults setInteger:21 forKey:@\"age\"];//2.1立即同步[userDefaults synchronize];//3.读取文件NSString *name = [userDefaults objectForKey:@\"a\"];BOOL sex = [userDefaults boolForKey:@\"sex\"];NSInteger age = [userDefaults integerForKey:@\"age\"];NSLog(@\"%@, %d, %ld\", name, sex, age); 2.注意123// 偏好设置是专门用来保存应用程序的配置信息的，一般不要在偏好设置中保存其他数据。// 如果没有调用synchronize方法，系统会根据I/O情况不定时刻地保存到文件中。所以如果需要立即写入文件的就必须调用synchronize方法。// 偏好设置会将所有数据保存到同一个文件中。即preference目录下的一个以此应用包名来命名的plist文件。 NSKeyedArchiver 归档在iOS中是另一种形式的序列化，只要遵循了NSCoding协议的对象都可以通过它实现序列化。由于决大多数支持存储数据的Foundation和Cocoa Touch类都遵循了NSCoding协议，因此，对于大多数类来说，归档相对而言还是比较容易实现的。 1.遵循NSCoding协议 NSCoding协议声明了两个方法，这两个方法都是必须实现的。一个用来说明如何将对象编码到归档中，另一个说明如何进行解档来获取一个新对象。 遵循协议和设置属性 123456//1.遵循NSCoding协议 @interface Person : NSObject //2.设置属性@property (strong, nonatomic) UIImage *avatar;@property (copy, nonatomic) NSString *name;@property (assign, nonatomic) NSInteger age;@end 实现协议方法 12345678910111213141516//解档- (id)initWithCoder:(NSCoder *)aDecoder &#123; if ([super init]) &#123; self.avatar = [aDecoder decodeObjectForKey:@\"avatar\"]; self.name = [aDecoder decodeObjectForKey:@\"name\"]; self.age = [aDecoder decodeIntegerForKey:@\"age\"]; &#125; return self;&#125;//归档- (void)encodeWithCoder:(NSCoder *)aCoder &#123; [aCoder encodeObject:self.avatar forKey:@\"avatar\"]; [aCoder encodeObject:self.name forKey:@\"name\"]; [aCoder encodeInteger:self.age forKey:@\"age\"];&#125; 特别注意 1如果需要归档的类是某个自定义类的子类时，就需要在归档和解档之前先实现父类的归档和解档方法。即 [super encodeWithCoder:aCoder] 和 [super initWithCoder:aDecoder] 方法; 2.使用需要把对象归档是调用NSKeyedArchiver的工厂方法 archiveRootObject: toFile:方法。 123456NSString *file = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject stringByAppendingPathComponent:@\"person.data\"];Person *person = [[Person alloc] init];person.avatar = self.avatarView.image;person.name = self.nameField.text;person.age = [self.ageField.text integerValue];[NSKeyedArchiver archiveRootObject:person toFile:file]; 需要从文件中解档对象就调用NSKeyedUnarchiver的一个工厂方法 unarchiveObjectWithFile: 即可。 12345678NSString *file = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject stringByAppendingPathComponent:@\"person.data\"];Person *person = [NSKeyedUnarchiver unarchiveObjectWithFile:file];if (person) &#123; self.avatarView.image = person.avatar; self.nameField.text = person.name; self.ageField.text = [NSString stringWithFormat:@\"%ld\", person.age];&#125; 3.注意123必须遵循并实现NSCoding协议保存文件的扩展名可以任意指定继承时必须先调用父类的归档解档方法 SQLite3 之前的所有存储方法，都是覆盖存储。如果想要增加一条数据就必须把整个文件读出来，然后修改数据后再把整个内容覆盖写入文件。所以它们都不适合存储大量的内容。 1.字段类型表面上·SQLite·将数据分为以下几种类型： 1234integer : 整数real : 实数（浮点数）text : 文本字符串blob : 二进制数据，比如文件，图片之类的 实际上SQLite是无类型的。即不管你在创表时指定的字段类型是什么，存储是依然可以存储任意类型的数据。而且在创表时也可以不指定字段类型。SQLite之所以什么类型就是为了良好的编程规范和方便开发人员交流，所以平时在使用时最好设置正确的字段类型！主键必须设置成integer 2. 准备工作准备工作就是导入依赖库啦，在iOS中要使用SQLite3，需要添加库文件：libsqlite3.dylib并导入主头文件，这是一个C语言的库，所以直接使用SQLite3还是比较麻烦的。 3.使用1.创建数据库并打开操作数据库之前必须先指定数据库文件和要操作的表，所以使用SQLite3，首先要打开数据库文件，然后指定或创建一张表。 12345678910111213141516171819202122232425262728293031// 打开数据库并创建一个表- (void)openDatabase &#123; //1.设置文件名 NSString *filename = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject stringByAppendingPathComponent:@\"person.db\"]; //2.打开数据库文件，如果没有会自动创建一个文件 NSInteger result = sqlite3_open(filename.UTF8String, &amp;_sqlite3); if (result == SQLITE_OK) &#123; NSLog(@\"打开数据库成功！\"); //3.创建一个数据库表 char *errmsg = NULL; sqlite3_exec(_sqlite3, \"CREATE TABLE IF NOT EXISTS t_person(id integer primary key autoincrement, name text, age integer)\", NULL, NULL, &amp;errmsg); if (errmsg) &#123; NSLog(@\"错误：%s\", errmsg); &#125; else &#123; NSLog(@\"创表成功！\"); &#125; &#125; else &#123; NSLog(@\"打开数据库失败！\"); &#125;&#125; 2.执行指令使用 sqlite3_exec() 方法可以执行任何SQL语句，比如创表、更新、插入和删除操作。但是一般不用它执行查询语句，因为它不会返回查询到的数据。 1234567891011121314151617181920// 往表中插入1000条数据- (void)insertData &#123; NSString *nameStr; NSInteger age; for (NSInteger i = 0; i &lt; 1000; i++) &#123; nameStr = [NSString stringWithFormat:@\"Bourne-%d\", arc4random_uniform(10000)]; age = arc4random_uniform(80) + 20; NSString *sql = [NSString stringWithFormat:@\"INSERT INTO t_person (name, age) VALUES('%@', '%ld')\", nameStr, age]; char *errmsg = NULL; sqlite3_exec(_sqlite3, sql.UTF8String, NULL, NULL, &amp;errmsg); if (errmsg) &#123; NSLog(@\"错误：%s\", errmsg); &#125; &#125; NSLog(@\"插入完毕！\"); &#125; 3.查询指令前面说过一般不使用 sqlite3_exec() 方法查询数据。因为查询数据必须要获得查询结果，所以查询相对比较麻烦。示例代码如下： 123456789101112131415161718192021222324252627// sqlite3_prepare_v2() : 检查sql的合法性// sqlite3_step() : 逐行获取查询结果，不断重复，直到最后一条记录// sqlite3_coloum_xxx() : 获取对应类型的内容，iCol对应的就是SQL语句中字段的顺序，从0开始。根据实际查询字段的属性，使用sqlite3_column_xxx取得对应的内容即可。// sqlite3_finalize() : 释放stmt// 从表中读取数据到数组中- (void)readData &#123; NSMutableArray *mArray = [NSMutableArray arrayWithCapacity:1000]; char *sql = \"select name, age from t_person;\"; sqlite3_stmt *stmt; NSInteger result = sqlite3_prepare_v2(_sqlite3, sql, -1, &amp;stmt, NULL); if (result == SQLITE_OK) &#123; while (sqlite3_step(stmt) == SQLITE_ROW) &#123; char *name = (char *)sqlite3_column_text(stmt, 0); NSInteger age = sqlite3_column_int(stmt, 1); //创建对象 Person *person = [Person personWithName:[NSString stringWithUTF8String:name] Age:age]; [mArray addObject:person]; &#125; self.dataList = mArray; &#125; sqlite3_finalize(stmt);&#125; 4.总结总得来说，SQLite3的使用还是比较麻烦的，因为都是些c语言的函数，理解起来有些困难。不过在一般开发过程中，使用的都是第三方开源库 FMDB，封装了这些基本的c语言方法，使得我们在使用时更加容易理解，提高开发效率。 FMDB1.简介 FMDB是iOS平台的SQLite数据库框架，它是以OC的方式封装了SQLite的C语言API，它相对于cocoa自带的C语言框架有如下的优点:使用起来更加面向对象，省去了很多麻烦、冗余的C语言代码对比苹果自带的Core Data框架，更加轻量级和灵活提供了多线程安全的数据库操作方法，有效地防止数据混乱 2.核心类FMDB有三个主要的类： 12345678// FMDatabase一个FMDatabase对象就代表一个单独的SQLite数据库，用来执行SQL语句// FMResultSet使用FMDatabase执行查询后的结果集// FMDatabaseQueue用于在多线程中执行多个查询或更新，它是线程安全的 3.打开数据库 和c语言框架一样，FMDB通过指定SQLite数据库文件路径来创建FMDatabase对象，但FMDB更加容易理解，使用起来更容易，使用之前一样需要导入sqlite3.dylib。打开数据库方法如下： 1234567NSString *path = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject stringByAppendingPathComponent:@\"person.db\"];FMDatabase *database = [FMDatabase databaseWithPath:path]; if (![database open]) &#123; NSLog(@\"数据库打开失败！\");&#125; 值得注意的是，Path的值可以传入以下三种情况： 123// 具体文件路径，如果不存在会自动创建// 空字符串@\"\"，会在临时目录创建一个空的数据库，当FMDatabase连接关闭时，数据库文件也被删除// nil，会创建一个内存中临时数据库，当FMDatabase连接关闭时，数据库会被销毁 4.更新 在FMDB中，除查询以外的所有操作，都称为“更新”, 如：create、drop、insert、update、delete等操作，使用executeUpdate:方法执行更新： 123456789101112//常用方法有以下 3 种： - (BOOL)executeUpdate:(NSString*)sql, ...- (BOOL)executeUpdateWithFormat:(NSString*)format, ...- (BOOL)executeUpdate:(NSString*)sql withArgumentsInArray:(NSArray *)arguments//示例[database executeUpdate:@\"CREATE TABLE IF NOT EXISTS t_person(id integer primary key autoincrement, name text, age integer)\"]; //或者 [database executeUpdate:@\"INSERT INTO t_person(name, age) VALUES(?, ?)\", @\"Bourne\", [NSNumber numberWithInt:42]]; 5.查询查询方法也有3种，使用起来相当简单： 123- (FMResultSet *)executeQuery:(NSString*)sql, ...- (FMResultSet *)executeQueryWithFormat:(NSString*)format, ...- (FMResultSet *)executeQuery:(NSString *)sql withArgumentsInArray:(NSArray *)arguments 查询示例： 123456789//1.执行查询FMResultSet *result = [database executeQuery:@\"SELECT * FROM t_person\"];//2.遍历结果集while ([result next]) &#123; NSString *name = [result stringForColumn:@\"name\"]; int age = [result intForColumn:@\"age\"];&#125; 6.线程安全 在多个线程中同时使用一个 FMDatabase 实例是不明智的。不要让多个线程分享同一个FMDatabase实例，它无法在多个线程中同时使用。 如果在多个线程中同时使用一个FMDatabase实例，会造成数据混乱等问题。所以，请使用 FMDatabaseQueue，它是线程安全的。以下是使用方法： 创建队列。 123456789101112131415161718192021222324FMDatabaseQueue *queue = [FMDatabaseQueue databaseQueueWithPath:aPath];// 使用队列[queue inDatabase:^(FMDatabase *database)&#123; [database executeUpdate:@\"INSERT INTO t_person(name, age) VALUES (?, ?)\", @\"Bourne_1\", [NSNumber numberWithInt:1]]; [database executeUpdate:@\"INSERT INTO t_person(name, age) VALUES (?, ?)\", @\"Bourne_2\", [NSNumber numberWithInt:2]]; [database executeUpdate:@\"INSERT INTO t_person(name, age) VALUES (?, ?)\", @\"Bourne_3\", [NSNumber numberWithInt:3]]; FMResultSet *result = [database executeQuery:@\"select * from t_person\"]; while([result next]) &#123; &#125; &#125;];// 而且可以轻松地把简单任务包装到事务里：[queue inTransaction:^(FMDatabase *database, BOOL *rollback) &#123; [database executeUpdate:@\"INSERT INTO t_person(name, age) VALUES (?, ?)\", @\"Bourne_1\", [NSNumber numberWithInt:1]]; [database executeUpdate:@\"INSERT INTO t_person(name, age) VALUES (?, ?)\", @\"Bourne_2\", [NSNumber numberWithInt:2]]; [database executeUpdate:@\"INSERT INTO t_person(name, age) VALUES (?, ?)\", @\"Bourne_3\", [NSNumber numberWithInt:3]]; FMResultSet *result = [database executeQuery:@\"select * from t_person\"]; while([result next]) &#123; &#125; //回滚 *rollback = YES; &#125;]; FMDatabaseQueue 后台会建立系列化的GCD队列，并执行你传给GCD队列的块。这意味着 你从多线程同时调用调用方法，GCD也会按它接收的块的顺序来执行了。","content":"<p>文章大纲，便于浏览</p>\n<ol>\n<li><a href=\"https://github.com/liberalisman/2018-Interview-Preparation#01-ios-app-startup-process\" target=\"_blank\" rel=\"external\">01-iOS程序启动过程</a></li>\n<li><a href=\"https://github.com/liberalisman/2018-Interview-Preparation#02-shallowcopy-deepcopy\" target=\"_blank\" rel=\"external\">02-浅拷贝-深拷贝</a></li>\n<li><a href=\"https://github.com/liberalisman/2018-Interview-Preparation#03-view的生命周期\" target=\"_blank\" rel=\"external\">03-View的生命周期</a></li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li><a href=\"https://github.com/liberalisman/2018-Interview-Preparation#04-property\" target=\"_blank\" rel=\"external\">04-@property</a></li>\n<li><a href=\"https://github.com/liberalisman/iOS-Summary-Part1#05-事件传递和事件响应\" target=\"_blank\" rel=\"external\">05-事件传递和事件响应</a></li>\n<li><a href=\"https://github.com/liberalisman/iOS-Summary-Part1#06-kvc\" target=\"_blank\" rel=\"external\">06-KVC</a></li>\n<li><a href=\"https://github.com/liberalisman/iOS-Summary-Part1#07-kvo\" target=\"_blank\" rel=\"external\">07-KVO</a></li>\n<li><a href=\"https://github.com/liberalisman/iOS-Summary-Part1#08-ios数据持久化方案\" target=\"_blank\" rel=\"external\">08-iOS数据持久化方案</a></li>\n</ol>\n<h2 id=\"01-iOS-App-startup-process\"><a href=\"#01-iOS-App-startup-process\" class=\"headerlink\" title=\"01-iOS-App-startup-process\"></a>01-iOS-App-startup-process</h2><p>###一、启动完整过程</p>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.png\" alt=\"\"></p>\n<p>1.<code>main</code>函数</p>\n<p>2.<code>UIApplicationMain</code>函数</p>\n<ul>\n<li>创建<code>UIApplication</code>对象</li>\n<li>创建<code>UIApplication的delegate</code>对象</li>\n</ul>\n<p>3.<code>delegate</code>对象开始处理(监听)系统事件(没有storyboard)</p>\n<ul>\n<li>程序启动完毕的时候, 就会调用代理的:<code>didFinishLaunchingWithOptions:</code>方法</li>\n<li>在<code>application:didFinishLaunchingWithOptions</code>:中创建<code>UIWindow</code> 创建和设置<code>UIWindow</code>的<code>rootViewController</code></li>\n<li>显示窗口</li>\n</ul>\n<p>4.根据<code>Info.plist</code>获得最主要<code>storyboard</code>的文件名,加载最主要的<code>storyboard</code>(有storyboard)</p>\n<ul>\n<li>创建<code>UIWindow</code></li>\n<li>创建和设置<code>UIWindow</code>的<code>rootViewController</code></li>\n<li>显示窗口</li>\n</ul>\n<p>###二、程序启动原理</p>\n<p>1.<code>main</code>函数中执行了一个<code>UIApplicationMain</code>这个函数</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">UIApplicationMain</span>(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[], <span class=\"built_in\">NSString</span> *principalClassName, <span class=\"built_in\">NSString</span> *delegateClassName);</div><div class=\"line\"></div><div class=\"line\">argc、argv：直接传递给<span class=\"built_in\">UIApplicationMain</span>进行相关处理即可</div></pre></td></tr></table></figure>\n<p>2.<code>principalClassName</code>：指定应用程序类名（app的象征），该类必须是<code>UIApplication</code>(或子类)。如果为<code>nil</code>,则用<code>UIApplication</code>类作为默认值</p>\n<p>3.<code>delegateClassName</code>：指定应用程序的代理类，该类必须遵守<code>UIApplicationDelegate</code>协议</p>\n<p>4.<code>UIApplicationMain</code>函数会根据<code>principalClassName</code>创建<code>UIApplication</code>对象，根据<code>delegateClassName</code>创建一个<code>delegate</code>对象，并将该<code>delegate</code>对象赋值给<code>UIApplication</code>对象中的<code>delegate</code>属性</p>\n<p>5.接着会建立应用程序的<code>Main Runloop</code>（事件循环），进行事件的处理(首先会在程序完毕后调用<code>delegate</code>对象的<code>application:didFinishLaunchingWithOptions</code>:方法)</p>\n<p>程序正常退出时<code>UIApplicationMain</code>函数才返回</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> * argv[])&#123; <span class=\"keyword\">@autoreleasepool</span> &#123; </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* argc: 系统或者用户传入的参数个数</div><div class=\"line\">* argv: 系统或者用户传入的实际参数 </div><div class=\"line\">* 1.根据传入的第三个参数创建UIApplication对象 </div><div class=\"line\">* 2.根据传入的第四个产生创建UIApplication对象的代理</div><div class=\"line\">* 3.设置刚刚创建出来的代理对象为UIApplication的代理 </div><div class=\"line\">* 4.开启一个事件循环 </div><div class=\"line\">**/ </div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">UIApplicationMain</span>(argc, argv, <span class=\"string\">@\"UIApplication\"</span>, <span class=\"string\">@\"YYAppDelegate\"</span>); &#125;&#125;</div></pre></td></tr></table></figure>\n<p>启动与代理：<br><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E4%B8%8E%E4%BB%A3%E7%90%86.png\" alt=\"\"></p>\n<h2 id=\"02-ShallowCopy-DeepCopy\"><a href=\"#02-ShallowCopy-DeepCopy\" class=\"headerlink\" title=\"02-ShallowCopy-DeepCopy\"></a>02-ShallowCopy-DeepCopy</h2><p>简要总结一下什么是浅拷贝，什么是深拷贝</p>\n<blockquote>\n<p>深拷贝就是内容拷贝</p>\n<p>浅拷贝就是指针拷贝</p>\n</blockquote>\n<p>###一.系统对象的 copy/mutableCopy</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *string = <span class=\"string\">@\"LiMing\"</span>;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSString</span> *copyString = [string <span class=\"keyword\">copy</span>];</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSString</span> *mutableString = [string mutableCopy];</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"string = %p\"</span>,string);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"copyString = %p\"</span>,copyString);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"mutableString = %p \"</span>,mutableString);</div><div class=\"line\"></div><div class=\"line\">结论：</div><div class=\"line\"><span class=\"number\">1.</span>string 和 copyString 他们只是二个不同的指针，指向内存中的同一块地址，<span class=\"keyword\">copy</span> 只是指针复制</div><div class=\"line\"><span class=\"number\">2.</span>string 和 mutableString 打印出来的地址不同，是因为两个指针指向的地址本就不同，mutableCopy 是内容复制</div><div class=\"line\"></div><div class=\"line\">注意：其他对象 <span class=\"built_in\">NSArray</span> 、<span class=\"built_in\">NSMutableArray</span> 、<span class=\"built_in\">NSDictionary</span> 、<span class=\"built_in\">NSMutableDictionary</span> 一样适用</div></pre></td></tr></table></figure>\n<p>规律可以从这张图看出来</p>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E6%B5%85%E6%8B%B7%E8%B4%9D-01\" alt=\"\"></p>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E6%B5%85%E6%8B%B7%E8%B4%9D-02\" alt=\"\"></p>\n<p>###二.自定义对象实现 Copy-MutableCopy</p>\n<ul>\n<li>copy</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">GZQPerson *person = [[GZQPerson alloc] init];</div><div class=\"line\">person.age = <span class=\"number\">20</span>;</div><div class=\"line\">person.name = <span class=\"string\">@\"GZQ\"</span>;</div><div class=\"line\">GZQPerson *copyP = [person <span class=\"keyword\">copy</span>];  <span class=\"comment\">// 这里崩溃</span></div></pre></td></tr></table></figure>\n<p>崩溃：<br><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E6%B5%85%E6%8B%B7%E8%B4%9D-03.png\" alt=\"\"></p>\n<p>看崩溃信息GZQPerson应该先实现：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span>)copyWithZone:(<span class=\"built_in\">NSZone</span> *)zone;</div></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"GZQPerson.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GZQPerson</span> ()&lt;<span class=\"title\">NSCopying</span>,<span class=\"title\">NSMutableCopying</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">GZQPerson</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)copyWithZone:(<span class=\"built_in\">NSZone</span> *)zone &#123;</div><div class=\"line\"></div><div class=\"line\">    GZQPerson *person = [[[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>] allocWithZone:zone] init];</div><div class=\"line\">    person.age = <span class=\"keyword\">self</span>.age;</div><div class=\"line\">    person.name = <span class=\"keyword\">self</span>.name;</div><div class=\"line\">    <span class=\"keyword\">return</span> person;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)mutableCopyWithZone:(<span class=\"built_in\">NSZone</span> *)zone &#123;</div><div class=\"line\"></div><div class=\"line\">    GZQPerson *person = [[[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>] allocWithZone:zone] init];</div><div class=\"line\">    person.age = <span class=\"keyword\">self</span>.age;</div><div class=\"line\">    person.name = <span class=\"keyword\">self</span>.name;</div><div class=\"line\">    <span class=\"keyword\">return</span> person;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"GZQPerson.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\"></div><div class=\"line\">    GZQPerson *person = [[GZQPerson alloc] init];</div><div class=\"line\">    person.age = <span class=\"number\">20</span>;</div><div class=\"line\">    person.name = <span class=\"string\">@\"GZQ\"</span>;</div><div class=\"line\">    GZQPerson *copyP = [person <span class=\"keyword\">copy</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"copyP=%p\"</span>,copyP);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person=%p\"</span>,person);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person=%p\"</span>,copyP.name);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person=%p\"</span>,person.name);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E6%B5%85%E6%8B%B7%E8%B4%9D-04.png\" alt=\"\"></p>\n<p>可以看出虽然指针的地址不同，但是存储的地址是一致的。</p>\n<p>###三.copy 本质</p>\n<p><code>property copy</code> 实际上就对name干了这个：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">property <span class=\"keyword\">copy</span> 实际上就对name干了这个：</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setName:(<span class=\"built_in\">NSString</span> *)name</div><div class=\"line\">&#123;</div><div class=\"line\">    _name = [name <span class=\"keyword\">copy</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>strong</code>是不执行<code>Copy</code>操作的</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSString</span> *name;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NSMutableString</span> *string = [<span class=\"built_in\">NSMutableString</span> stringWithFormat:<span class=\"string\">@\"深拷贝-浅拷贝\"</span>];</div><div class=\"line\"></div><div class=\"line\">GZQPerson *person = [[GZQPerson alloc] init];</div><div class=\"line\">person.name = string;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以改变person.name的值，因为其内部没有生成新的对象</span></div><div class=\"line\">[string appendString:<span class=\"string\">@\"LALALA\"</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"name = %@\"</span>, person.name);</div></pre></td></tr></table></figure>\n<h2 id=\"03-View的生命周期\"><a href=\"#03-View的生命周期\" class=\"headerlink\" title=\"03-View的生命周期\"></a>03-View的生命周期</h2><ul>\n<li>读懂这一张图即可<br><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/View%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"04-property\"><a href=\"#04-property\" class=\"headerlink\" title=\"04-@property\"></a>04-@property</h2><blockquote>\n<p>@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的</p>\n</blockquote>\n<p>@property 的本质.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> = ivar + <span class=\"keyword\">getter</span> + <span class=\"keyword\">setter</span>;</div></pre></td></tr></table></figure>\n<p>下面解释下：</p>\n<blockquote>\n<p>“属性” (property)有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter）。</p>\n<p>“属性” (property)作为 Objective-C 的一项特性，主要的作用就在于封装对象中的数据。 Objective-C 对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过“存取方法”(access method)来访问。其中，“获取方法” (getter)用于读取变量值，而“设置方法” (setter)用于写入变量值。这个概念已经定型，并且经由“属性”这一特性而成为 Objective-C 2.0 的一部分。 而在正规的 Objective-C 编码风格中，存取方法有着严格的命名规范。 正因为有了这种严格的命名规范，所以 Objective-C 这门语言才能根据名称自动创建出存取方法。其实也可以把属性当做一种关键字，其表示:</p>\n</blockquote>\n<p>编译器会自动写出一套存取方法，用以访问给定类型中具有给定名称的变量。 所以你也可以这么说：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> = <span class=\"keyword\">getter</span> + <span class=\"keyword\">setter</span>;</div></pre></td></tr></table></figure>\n<p>例如下面这个类：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSString</span> *firstName;</div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSString</span> *lastName;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>上述代码写出来的类与下面这种写法等效：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)firstName;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setFirstName:(<span class=\"built_in\">NSString</span> *)firstName;</div><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)lastName;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setLastName:(<span class=\"built_in\">NSString</span> *)lastName;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p><code>property</code>在<code>runtime</code>中是<code>objc_property_t</code>定义如下:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_property *objc_property_t;</div></pre></td></tr></table></figure>\n<p>而<code>objc_property</code>是一个结构体，包括<code>name</code>和<code>attributes</code>，定义如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> property_t &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *attributes;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>而<code>attributes</code>本质是<code>objc_property_attribute_t</code>，定义了<code>property</code>的一些属性，定义如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/// Defines a property attribute</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;           <span class=\"comment\">/**&lt; The name of the attribute */</span></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *value;          <span class=\"comment\">/**&lt; The value of the attribute (usually empty) */</span></div><div class=\"line\">&#125; objc_property_attribute_t;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>而attributes的具体内容是什么呢？其实，包括：类型，原子性，内存语义和对应的实例变量。</p>\n</blockquote>\n<p>例如：我们定义一个<code>string</code>的<code>property</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *string;</div></pre></td></tr></table></figure>\n<p>通过 <code>property_getAttributes(property)</code>获取到<code>attributes</code>并打印出来之后的结果为</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">T<span class=\"string\">@\"NSString\"</span>,C,N,V_string</div></pre></td></tr></table></figure>\n<p>其中<code>T</code>就代表类型，可参阅<code>Type Encodings</code>，<code>C</code>就代表<code>Copy</code>，<code>N</code>代表<code>nonatomic</code>，<code>V</code>就代表对于的实例变量。</p>\n<blockquote>\n<p>ivar、getter、setter 是如何生成并添加到这个类中的?</p>\n</blockquote>\n<p><strong>“自动合成”( autosynthesis)</strong></p>\n<blockquote>\n<p>完成属性定义后，编译器会自动编写访问这些属性所需的方法，此过程叫做“自动合成”(autosynthesis)。需要强调的是，这个过程由编译 器在编译期执行，所以编辑器里看不到这些“合成方法”(synthesized method)的源代码。除了生成方法代码 getter、setter 之外，编译器还要自动向类中添加适当类型的实例变量，并且在属性名前面加下划线，以此作为实例变量的名字。在前例中，会生成两个实例变量，其名称分别为 _firstName 与 _lastName。也可以在类的实现代码里通过@synthesize 语法来指定实例变量的名字.</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></div><div class=\"line\"><span class=\"keyword\">@synthesize</span> firstName = _myFirstName;</div><div class=\"line\"><span class=\"keyword\">@synthesize</span> lastName = _myLastName;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p><strong>我为了搞清属性是怎么实现的,曾经反编译过相关的代码,他大致生成了五个东西</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1.</span> OBJC_IVAR_$类名$属性名称 ：该属性的“偏移量” (offset)，这个偏移量是“硬编码” (hardcode)，表示该变量距离存放对象的内存区域的起始地址有多远。</div><div class=\"line\"><span class=\"number\">2.</span> <span class=\"keyword\">setter</span> 与 <span class=\"keyword\">getter</span> 方法对应的实现函数</div><div class=\"line\"><span class=\"number\">3.</span> ivar_list ：成员变量列表</div><div class=\"line\"><span class=\"number\">4.</span> method_list ：方法列表</div><div class=\"line\"><span class=\"number\">5.</span> prop_list ：属性列表</div><div class=\"line\">也就是说我们每次在增加一个属性,系统都会在 ivar_list 中添加一个成员变量的描述,在 method_list 中增加 <span class=\"keyword\">setter</span> 与 <span class=\"keyword\">getter</span> 方法的描述,在属性列表中增加一个属性的描述,然后计算该属性在对象中的偏移量,然后给出 <span class=\"keyword\">setter</span> 与 <span class=\"keyword\">getter</span> 方法对应的实现,在 <span class=\"keyword\">setter</span> 方法中从偏移量的位置开始赋值,在 <span class=\"keyword\">getter</span> 方法中从偏移量开始取值,为了能够读取正确字节数,系统对象偏移量的指针类型进行了类型强转.</div></pre></td></tr></table></figure>\n<p><strong>属性可以拥有的特质分为四类:</strong></p>\n<ul>\n<li><p>原子性— nonatomic 特质,在默认情况下，由编译器合成的方法会通过锁定机制确保其原子性(atomicity)。如果属性具备 nonatomic 特质，则不使用自旋锁。请注意，尽管没有名为“atomic”的特质(如果某属性不具备 nonatomic 特质，那它就是“原子的” ( atomic) )，但是仍然可以在属性特质中写明这一点，编译器不会报错。若是自己定义存取方法，那么就应该遵从与属性特质相符的原子性。</p>\n</li>\n<li><p>读/写权限—readwrite(读写)、readonly (只读)</p>\n</li>\n<li><p>内存管理语义—assign、strong、 weak、unsafe_unretained、copy</p>\n</li>\n<li>方法名—getter=<name> 、setter=<name></name></name></li>\n</ul>\n<p><strong>getter=<name>的样式：</name></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">getter</span>=isOn) <span class=\"built_in\">BOOL</span> on;</div><div class=\"line\">     </div><div class=\"line\">(`<span class=\"keyword\">setter</span>=`这种不常用，也不推荐使用。故不在这里给出写法。）</div></pre></td></tr></table></figure>\n<p><strong>setter=<name>一般用在特殊的情境下，比如</name></strong>：</p>\n<blockquote>\n<p>在数据反序列化、转模型的过程中，服务器返回的字段如果以 init 开头，所以你需要定义一个 init 开头的属性，但默认生成的 setter 与 getter 方法也会以 init 开头，而编译器会把所有以 init 开头的方法当成初始化方法，而初始化方法只能返回 self 类型，因此编译器会报错。</p>\n</blockquote>\n<p><strong>这时你就可以使用下面的方式来避免编译器报错：</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">getter</span>=p_initBy, <span class=\"keyword\">setter</span>=setP_initBy:)<span class=\"built_in\">NSString</span> *initBy;</div></pre></td></tr></table></figure>\n<p><strong>另外也可以用关键字进行特殊说明，来避免编译器报错</strong>：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readwrite</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">null_resettable</span>) <span class=\"built_in\">NSString</span> *initBy;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)initBy __attribute__((objc_method_family(none)));</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1.</span> 不常用的：<span class=\"keyword\">nonnull</span>,<span class=\"keyword\">null_resettable</span>,<span class=\"keyword\">nullable</span></div><div class=\"line\"></div><div class=\"line\">注意：很多人会认为如果属性具备 <span class=\"keyword\">nonatomic</span> 特质，则不使用 “同步锁”。其实在属性设置方法中使用的是自旋锁，自旋锁相关代码如下：</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> reallySetProperty(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, <span class=\"keyword\">id</span> newValue, ptrdiff_t offset, <span class=\"keyword\">bool</span> atomic, <span class=\"keyword\">bool</span> <span class=\"keyword\">copy</span>, <span class=\"keyword\">bool</span> mutableCopy)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (offset == <span class=\"number\">0</span>) </div><div class=\"line\">    &#123;</div><div class=\"line\">        object_setClass(<span class=\"keyword\">self</span>, newValue);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">id</span> oldValue;</div><div class=\"line\">    <span class=\"keyword\">id</span> *slot = (<span class=\"keyword\">id</span>*) ((<span class=\"keyword\">char</span>*)<span class=\"keyword\">self</span> + offset);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">copy</span>) </div><div class=\"line\">    &#123;</div><div class=\"line\">        newValue = [newValue copyWithZone:<span class=\"literal\">nil</span>];</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mutableCopy) </div><div class=\"line\">    &#123;</div><div class=\"line\">        newValue = [newValue mutableCopyWithZone:<span class=\"literal\">nil</span>];</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">else</span> </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (*slot == newValue) <span class=\"keyword\">return</span>;</div><div class=\"line\">        newValue = objc_retain(newValue);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!atomic) </div><div class=\"line\">    &#123;</div><div class=\"line\">        oldValue = *slot;</div><div class=\"line\">        *slot = newValue;</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">else</span> </div><div class=\"line\">    &#123;</div><div class=\"line\">        spinlock_t&amp; slotlock = PropertyLocks[slot];</div><div class=\"line\">        slotlock.lock();</div><div class=\"line\">        oldValue = *slot;</div><div class=\"line\">        *slot = newValue;        </div><div class=\"line\">        slotlock.unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    objc_release(oldValue);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> objc_setProperty(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, ptrdiff_t offset, <span class=\"keyword\">id</span> newValue, <span class=\"built_in\">BOOL</span> atomic, <span class=\"keyword\">signed</span> <span class=\"keyword\">char</span> shouldCopy) </div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">copy</span> = (shouldCopy &amp;&amp; shouldCopy != MUTABLE_COPY);</div><div class=\"line\">    <span class=\"keyword\">bool</span> mutableCopy = (shouldCopy == MUTABLE_COPY);</div><div class=\"line\">    reallySetProperty(<span class=\"keyword\">self</span>, _cmd, newValue, offset, atomic, <span class=\"keyword\">copy</span>, mutableCopy);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"05-事件传递和事件响应\"><a href=\"#05-事件传递和事件响应\" class=\"headerlink\" title=\"05-事件传递和事件响应\"></a>05-事件传递和事件响应</h2><p>这部分知识如果自己总结，篇幅较长。可以参考<a href=\"http://www.jianshu.com/p/2e074db792ba\" target=\"_blank\" rel=\"external\">以下文章</a></p>\n<h2 id=\"06-KVC\"><a href=\"#06-KVC\" class=\"headerlink\" title=\"06-KVC\"></a>06-KVC</h2><p><strong>Key-Value Coding (KVC)</strong></p>\n<blockquote>\n<p>KVC（Key-value coding）键值编码，单看这个名字可能不太好理解。其实翻译一下就很简单了，就是指iOS的开发中，可以允许开发者通过Key名直接访问对象的属性，或者给对象的属性赋值。而不需要调用明确的存取方法。这样就可以在运行时动态在访问和修改对象的属性。而不是在编译时确定，这也是iOS开发中的黑魔法之一。很多高级的iOS开发技巧都是基于KVC实现的。目前网上关于KVC的文章在非常多，有的只是简单地说了下用法，有的讲得深入但是在使用场景和最佳实践没有说明，我写下这遍文章就是给大家详解一个最完整最详细的KVC。</p>\n</blockquote>\n<p><strong>KVC在iOS中的定义</strong></p>\n<p>无论是<code>Swift</code>还是<code>Objective-C</code>，<code>KVC</code>的定义都是对<code>NSObject</code>的扩展来实现的(<code>Objective-C</code>中有个显式的<code>NSKeyValueCoding</code>类别名，而<code>Swift</code>没有，也不需要)所以对于所有继承了<code>NSObject</code>在类型，都能使用<code>KVC</code>(一些纯<code>Swift</code>类和结构体是不支持<code>KVC</code>的)，下面是<code>KVC</code>最为重要的四个方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)valueForKey:(<span class=\"built_in\">NSString</span> *)key;                          <span class=\"comment\">//直接通过Key来取值</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setValue:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)value forKey:(<span class=\"built_in\">NSString</span> *)key;          <span class=\"comment\">//通过Key来设值</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)valueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath;                  <span class=\"comment\">//通过KeyPath来取值</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setValue:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)value forKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath;  <span class=\"comment\">//通过KeyPath来设值</span></div></pre></td></tr></table></figure>\n<p>当然<code>NSKeyValueCoding</code>类别中还有其他的一些方法，下面列举一些</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"built_in\">BOOL</span>)accessInstanceVariablesDirectly;</div><div class=\"line\"><span class=\"comment\">//默认返回YES，表示如果没有找到Set&lt;Key&gt;方法的话，会按照_key，_iskey，key，iskey的顺序搜索成员，设置成NO就不这样搜索</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)validateValue:(<span class=\"keyword\">inout</span> <span class=\"keyword\">id</span> __<span class=\"keyword\">nullable</span> * __<span class=\"keyword\">nonnull</span>)ioValue forKey:(<span class=\"built_in\">NSString</span> *)inKey error:(<span class=\"keyword\">out</span> <span class=\"built_in\">NSError</span> **)outError;</div><div class=\"line\"><span class=\"comment\">//KVC提供属性值确认的API，它可以用来检查set的值是否正确、为不正确的值做一个替换值或者拒绝设置新值并返回错误原因。</span></div><div class=\"line\">- (<span class=\"built_in\">NSMutableArray</span> *)mutableArrayValueForKey:(<span class=\"built_in\">NSString</span> *)key;</div><div class=\"line\"><span class=\"comment\">//这是集合操作的API，里面还有一系列这样的API，如果属性是一个NSMutableArray，那么可以用这个方法来返回</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)valueForUndefinedKey:(<span class=\"built_in\">NSString</span> *)key;</div><div class=\"line\"><span class=\"comment\">//如果Key不存在，且没有KVC无法搜索到任何和Key有关的字段或者属性，则会调用这个方法，默认是抛出异常</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setValue:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)value forUndefinedKey:(<span class=\"built_in\">NSString</span> *)key;</div><div class=\"line\"><span class=\"comment\">//和上一个方法一样，只不过是设值。</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setNilValueForKey:(<span class=\"built_in\">NSString</span> *)key;</div><div class=\"line\"><span class=\"comment\">//如果你在SetValue方法时面给Value传nil，则会调用这个方法</span></div><div class=\"line\">- (<span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, <span class=\"keyword\">id</span>&gt; *)dictionaryWithValuesForKeys:(<span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *)keys;</div><div class=\"line\"><span class=\"comment\">//输入一组key,返回该组key对应的Value，再转成字典返回，用于将Model转到字典。</span></div></pre></td></tr></table></figure>\n<p>上面的这些方法在碰到特殊情况或者有特殊需求还是会用到的，所以也是可以了解一下。后面的代码示例会有讲到其中的一些方法。<br>同时苹果对一些容器类比如NSArray或者NSSet等，KVC有着特殊的实现。建议有基础的或者英文好的开发者直接去看苹果的官方文档，相信你会对KVC的理解更上一个台阶。</p>\n<p><strong>KVC是怎么寻找Key的</strong></p>\n<p>KVC是怎么使用的，我相信绝大多数的开发者都很清楚，我在这里就不再写简单的使用KVC来设值和取值的代码了，首页我们来探讨KVC在内部是按什么样的顺序来寻找key的。<br>当调用<code>setValue：</code>属性值 <code>forKey：``@”name“</code>的代码时，底层的执行机制如下：</p>\n<ul>\n<li><p>程序优先调用<code>set&lt;Key&gt;:</code>属性值方法，代码通过<code>setter</code>方法完成设置。注意，这里的<code>&lt;key&gt;</code>是指成员变量名，首字母大清写要符合<code>KVC</code>的全名规则，下同</p>\n</li>\n<li><p>如果没有找到<code>setName：</code>方法，<code>KVC</code>机制会检查<code>+ (BOOL)accessInstanceVariablesDirectly</code>方法有没有返回<code>YES</code>，默认该方法会返回<code>YES</code>，如果你重写了该方法让其返回<code>NO</code>的话，那么在这一步KVC会执行<code>setValue：forUNdefinedKey：</code>方法，不过一般开发者不会这么做。所以KVC机制会搜索该类里面有没有名为<code>_&lt;key&gt;</code>的成员变量，无论该变量是在类接口部分定义，还是在类实现部分定义，也无论用了什么样的访问修饰符，只在存在以<code>_&lt;key&gt;</code>命名的变量，<code>KVC</code>都可以对该成员变量赋值。</p>\n</li>\n<li><p>如果该类即没有<code>set&lt;Key&gt;：</code>方法，也没有<code>_&lt;key&gt;</code>成员变量，<code>KVC</code>机制会搜索<code>_is&lt;Key&gt;</code>的成员变量，</p>\n</li>\n<li><p>和上面一样，如果该类即没有<code>set&lt;Key&gt;：</code>方法，也没有<code>_&lt;key&gt;</code>和<code>_is&lt;Key&gt;</code>成员变量，<code>KVC</code>机制再会继续搜索<code>&lt;key&gt;</code>和<code>is&lt;Key&gt;</code>的成员变量。再给它们赋值。</p>\n</li>\n<li><p>如果上面列出的方法或者成员变量都不存在，系统将会执行该对象的<code>setValue：forUNdefinedKey：</code>方法，默认是抛出异常。</p>\n</li>\n</ul>\n<p>如果开发者想让这个类禁用<code>KVC</code>里，那么重写<code>+ (BOOL)accessInstanceVariablesDirectly</code>方法让其返回NO即可，这样的话如果<code>KVC</code>没有找到<code>set&lt;Key&gt;:</code>属性名时，会直接用<code>setValue：forUNdefinedKey：</code>方法。</p>\n<h2 id=\"07-KVO\"><a href=\"#07-KVO\" class=\"headerlink\" title=\"07-KVO\"></a>07-KVO</h2><p><code>KVO</code>，全称为<code>Key-Value Observing</code>，是iOS中的一种设计模式，用于检测对象的某些属性的实时变化情况并作出响应。当应用场景比较复杂时，多个地方存在crash的危险。</p>\n<p>首先，假设我们的目标是在一个<code>UITableViewController</code>内对<code>tableview</code>的<code>contentOffset</code>进行实时监测，很容易地使用<code>KVO</code>来实现为。</p>\n<p>在初始化方法中加入：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">[_tableView addObserver:<span class=\"keyword\">self</span> forKeyPath:<span class=\"string\">@\"contentOffset\"</span> options:<span class=\"built_in\">NSKeyValueObservingOptionNew</span> context:<span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在dealloc中移除KVO监听：</span></div><div class=\"line\">[_tableView removeObserver:<span class=\"keyword\">self</span> forKeyPath:<span class=\"string\">@\"contentOffset\"</span> context:<span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 添加默认的响应回调方法：</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)observeValueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath </div><div class=\"line\">                      ofObject:(<span class=\"keyword\">id</span>)object</div><div class=\"line\">                        change:(<span class=\"built_in\">NSDictionary</span> *)change </div><div class=\"line\">                       context:(<span class=\"keyword\">void</span> *)context</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> doSomethingWhenContentOffsetChanges];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>好了，<code>KVO</code>实现就到此完美结束了，开玩笑，肯定没这么简单的，这样的代码太粗糙了，当你在<code>controller</code>中添加多个<code>KVO</code>时，所有的回调都是走同上述函数，那就必须对触发回调函数的来源进行判断。判断如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)observeValueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath </div><div class=\"line\">                      ofObject:(<span class=\"keyword\">id</span>)object</div><div class=\"line\">                        change:(<span class=\"built_in\">NSDictionary</span> *)change </div><div class=\"line\">                       context:(<span class=\"keyword\">void</span> *)context</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (object == _tableView &amp;&amp; [keyPath isEqualToString:<span class=\"string\">@\"contentOffset\"</span>]) </div><div class=\"line\">    &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> doSomethingWhenContentOffsetChanges];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你以为这样就结束了吗？答案是否定的！我们假设当前类(在例子中为<code>UITableViewController</code>)还有父类，并且父类也有自己绑定了一些其他<code>KVO</code>呢？我们看到，上述回调函数体中只有一个判断，如果这个<code>if</code>不成立，这次<code>KVO</code>事件的触发就会到此中断了。但事实上，若当前类无法捕捉到这个<code>KVO</code>，那很有可能是在他的<code>superClass</code>，或者<code>super-superClass...</code>中，上述处理砍断了这个链。合理的处理方式应该是这样的：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)observeValueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath </div><div class=\"line\">                      ofObject:(<span class=\"keyword\">id</span>)object</div><div class=\"line\">                        change:(<span class=\"built_in\">NSDictionary</span> *)change </div><div class=\"line\">                       context:(<span class=\"keyword\">void</span> *)context</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (object == _tableView &amp;&amp; [keyPath isEqualToString:<span class=\"string\">@\"contentOffset\"</span>]) </div><div class=\"line\">    &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> doSomethingWhenContentOffsetChanges];</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">else</span> </div><div class=\"line\">    &#123;</div><div class=\"line\">        [<span class=\"keyword\">super</span> observeValueForKeyPath:keyPath ofObject:object change:change context:context];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样就结束了吗？答案仍旧是否定的。潜在的问题有可能出现在<code>dealloc</code>中对<code>KVO</code>的注销上。<code>KVO</code>的一种缺陷(其实不能称为缺陷，应该称为特性)是，当对同一个<code>keypath</code>进行两次<code>removeObserver</code>时会导致程序<code>crash</code>，这种情况常常出现在父类有一个<code>kvo</code>，父类在<code>dealloc</code>中<code>remove</code>了一次，子类又<code>remove</code>了一次的情况下。不要以为这种情况很少出现！当你封装<code>framework</code>开源给别人用或者多人协作开发时是有可能出现的，而且这种<code>crash</code>很难发现。不知道你发现没，目前的代码中<code>context</code>字段都是<code>nil</code>，那能否利用该字段来标识出到底<code>kvo</code>是<code>superClass</code>注册的，还是<code>self</code>注册的？</p>\n<p>回答是可以的。我们可以分别在父类以及本类中定义各自的<code>context</code>字符串，比如在本类中定义<code>context</code>为<code>@&quot;ThisIsMyKVOContextNotSuper&quot;</code>;然后在<code>dealloc</code>中<code>remove observer</code>时指定移除的自身添加的<code>observer</code>。这样iOS就能知道移除的是自己的<code>kvo</code>，而不是父类中的<code>kvo</code>，避免二次<code>remove</code>造成<code>crash</code>。</p>\n<h2 id=\"08-iOS数据持久化方案\"><a href=\"#08-iOS数据持久化方案\" class=\"headerlink\" title=\"08-iOS数据持久化方案\"></a>08-iOS数据持久化方案</h2><h3 id=\"存储方案\"><a href=\"#存储方案\" class=\"headerlink\" title=\"存储方案\"></a>存储方案</h3><ul>\n<li>plist文件（属性列表）</li>\n<li>preference（偏好设置）</li>\n<li>NSKeyedArchiver（归档）</li>\n<li>SQLite 3</li>\n<li>CoreData</li>\n</ul>\n<h3 id=\"沙盒\"><a href=\"#沙盒\" class=\"headerlink\" title=\"沙盒\"></a>沙盒</h3><blockquote>\n<p>iOS程序默认情况下只能访问程序自己的目录，这个目录被称为“沙盒”。</p>\n</blockquote>\n<h4 id=\"1-结构\"><a href=\"#1-结构\" class=\"headerlink\" title=\"1.结构\"></a>1.结构</h4><p>沙盒的目录结构如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"应用程序包\"</span></div><div class=\"line\">Documents</div><div class=\"line\">Library</div><div class=\"line\">    Caches</div><div class=\"line\">    Preferences</div><div class=\"line\">tmp</div></pre></td></tr></table></figure>\n<h4 id=\"2-目录特性\"><a href=\"#2-目录特性\" class=\"headerlink\" title=\"2.目录特性\"></a>2.目录特性</h4><blockquote>\n<p>虽然沙盒中有这么多文件夹，但是每个文件夹都不尽相同，都有各自的特性。所以在选择存放目录时，一定要认真选择适合的目录。</p>\n</blockquote>\n<p>“应用程序包”: 这里面存放的是应用程序的<strong>源文件</strong>，包括<strong>资源文件</strong>和<strong>可执行文件</strong>。</p>\n<ul>\n<li>Documents: 最常用的目录，iTunes同步该应用时会同步此文件夹中的内容，适合存储重要数据。</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *path = [[<span class=\"built_in\">NSBundle</span> mainBundle] bundlePath];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, path);</div></pre></td></tr></table></figure>\n<ul>\n<li>Library/Caches: iTunes不会同步此文件夹，适合存储体积大，不需要备份的非重要数据。</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *path = <span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>).firstObject;</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, path);</div></pre></td></tr></table></figure>\n<ul>\n<li>Library/Preferences: iTunes同步该应用时会同步此文件夹中的内容，通常保存应用的设置信息。</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *path = <span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSCachesDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>).firstObject;</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, path);</div></pre></td></tr></table></figure>\n<ul>\n<li>tmp: iTunes不会同步此文件夹，系统可能在应用没运行时就删除该目录下的文件，所以此目录适合保存应用中的一些临时文件，用完就删除。</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *path = <span class=\"built_in\">NSTemporaryDirectory</span>();</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, path);</div></pre></td></tr></table></figure>\n<h3 id=\"plist文件\"><a href=\"#plist文件\" class=\"headerlink\" title=\"plist文件\"></a>plist文件</h3><blockquote>\n<p>plist文件是将某些特定的类，通过XML文件的方式保存在目录中。</p>\n</blockquote>\n<p>可以被序列化的类型只有如下几种：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span>;</div><div class=\"line\"><span class=\"built_in\">NSMutableArray</span>;</div><div class=\"line\"><span class=\"built_in\">NSDictionary</span>;</div><div class=\"line\"><span class=\"built_in\">NSMutableDictionary</span>;</div><div class=\"line\"><span class=\"built_in\">NSData</span>;</div><div class=\"line\"><span class=\"built_in\">NSMutableData</span>;</div><div class=\"line\"><span class=\"built_in\">NSString</span>;</div><div class=\"line\"><span class=\"built_in\">NSMutableString</span>;</div><div class=\"line\"><span class=\"built_in\">NSNumber</span>;</div><div class=\"line\"><span class=\"built_in\">NSDate</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"1-获得文件路径\"><a href=\"#1-获得文件路径\" class=\"headerlink\" title=\"1.获得文件路径\"></a>1.获得文件路径</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *path = <span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>).firstObject;</div><div class=\"line\"><span class=\"built_in\">NSString</span> *fileName = [path stringByAppendingPathComponent:<span class=\"string\">@\"123.plist\"</span>];</div></pre></td></tr></table></figure>\n<h4 id=\"2-存储\"><a href=\"#2-存储\" class=\"headerlink\" title=\"2.存储\"></a>2.存储</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *array = @[<span class=\"string\">@\"123\"</span>, <span class=\"string\">@\"456\"</span>, <span class=\"string\">@\"789\"</span>];</div><div class=\"line\">[array writeToFile:fileName atomically:<span class=\"literal\">YES</span>];</div></pre></td></tr></table></figure>\n<h4 id=\"3-读取\"><a href=\"#3-读取\" class=\"headerlink\" title=\"3.读取\"></a>3.读取</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *result = [<span class=\"built_in\">NSArray</span> arrayWithContentsOfFile:fileName];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, result);</div></pre></td></tr></table></figure>\n<h4 id=\"4-注意\"><a href=\"#4-注意\" class=\"headerlink\" title=\"4.注意\"></a>4.注意</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 只有以上列出的类型才能使用plist文件存储。</span></div><div class=\"line\"><span class=\"comment\">// 存储时使用writeToFile: atomically:方法。 其中atomically表示是否需要先写入一个辅助文件，再把辅助文件拷贝到目标文件地址。这是更安全的写入文件方法，一般都写YES。</span></div><div class=\"line\"><span class=\"comment\">// 读取时使用arrayWithContentsOfFile:方法。</span></div></pre></td></tr></table></figure>\n<h3 id=\"Preference\"><a href=\"#Preference\" class=\"headerlink\" title=\"Preference\"></a>Preference</h3><h4 id=\"1-使用方法\"><a href=\"#1-使用方法\" class=\"headerlink\" title=\"1.使用方法\"></a>1.使用方法</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.获得NSUserDefaults文件</span></div><div class=\"line\"><span class=\"built_in\">NSUserDefaults</span> *userDefaults = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//2.向文件中写入内容</span></div><div class=\"line\">[userDefaults setObject:<span class=\"string\">@\"AAA\"</span> forKey:<span class=\"string\">@\"a\"</span>];</div><div class=\"line\">[userDefaults setBool:<span class=\"literal\">YES</span> forKey:<span class=\"string\">@\"sex\"</span>];</div><div class=\"line\">[userDefaults setInteger:<span class=\"number\">21</span> forKey:<span class=\"string\">@\"age\"</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//2.1立即同步</span></div><div class=\"line\">[userDefaults synchronize];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//3.读取文件</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *name = [userDefaults objectForKey:<span class=\"string\">@\"a\"</span>];</div><div class=\"line\"><span class=\"built_in\">BOOL</span> sex = [userDefaults boolForKey:<span class=\"string\">@\"sex\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSInteger</span> age = [userDefaults integerForKey:<span class=\"string\">@\"age\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@, %d, %ld\"</span>, name, sex, age);</div></pre></td></tr></table></figure>\n<h4 id=\"2-注意\"><a href=\"#2-注意\" class=\"headerlink\" title=\"2.注意\"></a>2.注意</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 偏好设置是专门用来保存应用程序的配置信息的，一般不要在偏好设置中保存其他数据。</span></div><div class=\"line\"><span class=\"comment\">// 如果没有调用synchronize方法，系统会根据I/O情况不定时刻地保存到文件中。所以如果需要立即写入文件的就必须调用synchronize方法。</span></div><div class=\"line\"><span class=\"comment\">// 偏好设置会将所有数据保存到同一个文件中。即preference目录下的一个以此应用包名来命名的plist文件。</span></div></pre></td></tr></table></figure>\n<h3 id=\"NSKeyedArchiver\"><a href=\"#NSKeyedArchiver\" class=\"headerlink\" title=\"NSKeyedArchiver\"></a>NSKeyedArchiver</h3><blockquote>\n<p>归档在iOS中是另一种形式的序列化，只要遵循了NSCoding协议的对象都可以通过它实现序列化。由于决大多数支持存储数据的Foundation和Cocoa Touch类都遵循了NSCoding协议，因此，对于大多数类来说，归档相对而言还是比较容易实现的。</p>\n</blockquote>\n<h4 id=\"1-遵循NSCoding协议\"><a href=\"#1-遵循NSCoding协议\" class=\"headerlink\" title=\"1.遵循NSCoding协议\"></a>1.遵循NSCoding协议</h4><blockquote>\n<p>NSCoding协议声明了两个方法，这两个方法都是必须实现的。一个用来说明如何将对象编码到归档中，另一个说明如何进行解档来获取一个新对象。</p>\n</blockquote>\n<p>遵循协议和设置属性</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.遵循NSCoding协议 </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span>   //2.设置属性</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UIImage</span> *avatar;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">copy</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span> *name;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSInteger</span> age;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>实现协议方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//解档</span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)aDecoder &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"keyword\">super</span> init]) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.avatar = [aDecoder decodeObjectForKey:<span class=\"string\">@\"avatar\"</span>];</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = [aDecoder decodeObjectForKey:<span class=\"string\">@\"name\"</span>];</div><div class=\"line\">        <span class=\"keyword\">self</span>.age = [aDecoder decodeIntegerForKey:<span class=\"string\">@\"age\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//归档</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)aCoder &#123;</div><div class=\"line\">    [aCoder encodeObject:<span class=\"keyword\">self</span>.avatar forKey:<span class=\"string\">@\"avatar\"</span>];</div><div class=\"line\">    [aCoder encodeObject:<span class=\"keyword\">self</span>.name forKey:<span class=\"string\">@\"name\"</span>];</div><div class=\"line\">    [aCoder encodeInteger:<span class=\"keyword\">self</span>.age forKey:<span class=\"string\">@\"age\"</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>特别注意</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果需要归档的类是某个自定义类的子类时，就需要在归档和解档之前先实现父类的归档和解档方法。即 [<span class=\"keyword\">super</span> encodeWithCoder:aCoder] 和 [<span class=\"keyword\">super</span> initWithCoder:aDecoder] 方法;</div></pre></td></tr></table></figure>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2.使用\"></a>2.使用</h4><p>需要把对象归档是调用<code>NSKeyedArchiver</code>的工厂方法 <code>archiveRootObject: toFile:</code>方法。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *file = [<span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>).firstObject stringByAppendingPathComponent:<span class=\"string\">@\"person.data\"</span>];</div><div class=\"line\">Person *person = [[Person alloc] init];</div><div class=\"line\">person.avatar = <span class=\"keyword\">self</span>.avatarView.image;</div><div class=\"line\">person.name = <span class=\"keyword\">self</span>.nameField.text;</div><div class=\"line\">person.age = [<span class=\"keyword\">self</span>.ageField.text integerValue];</div><div class=\"line\">[<span class=\"built_in\">NSKeyedArchiver</span> archiveRootObject:person toFile:file];</div></pre></td></tr></table></figure>\n<p>需要从文件中解档对象就调用<code>NSKeyedUnarchiver</code>的一个工厂方法 <code>unarchiveObjectWithFile:</code> 即可。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *file = [<span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>).firstObject stringByAppendingPathComponent:<span class=\"string\">@\"person.data\"</span>];</div><div class=\"line\">Person *person = [<span class=\"built_in\">NSKeyedUnarchiver</span> unarchiveObjectWithFile:file];</div><div class=\"line\"><span class=\"keyword\">if</span> (person) </div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">self</span>.avatarView.image = person.avatar;</div><div class=\"line\">   <span class=\"keyword\">self</span>.nameField.text = person.name;</div><div class=\"line\">   <span class=\"keyword\">self</span>.ageField.text = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%ld\"</span>, person.age];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-注意\"><a href=\"#3-注意\" class=\"headerlink\" title=\"3.注意\"></a>3.注意</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">必须遵循并实现<span class=\"built_in\">NSCoding</span>协议</div><div class=\"line\">保存文件的扩展名可以任意指定</div><div class=\"line\">继承时必须先调用父类的归档解档方法</div></pre></td></tr></table></figure>\n<h3 id=\"SQLite3\"><a href=\"#SQLite3\" class=\"headerlink\" title=\"SQLite3\"></a>SQLite3</h3><blockquote>\n<p>之前的所有存储方法，都是覆盖存储。如果想要增加一条数据就必须把整个文件读出来，然后修改数据后再把整个内容覆盖写入文件。所以它们都不适合存储大量的内容。</p>\n</blockquote>\n<h4 id=\"1-字段类型\"><a href=\"#1-字段类型\" class=\"headerlink\" title=\"1.字段类型\"></a>1.字段类型</h4><p>表面上·SQLite·将数据分为以下几种类型：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">integer : 整数</div><div class=\"line\">real : 实数（浮点数）</div><div class=\"line\">text : 文本字符串</div><div class=\"line\">blob : 二进制数据，比如文件，图片之类的</div></pre></td></tr></table></figure>\n<p>实际上<code>SQLite</code>是无类型的。即不管你在创表时指定的字段类型是什么，存储是依然可以存储任意类型的数据。而且在创表时也可以不指定字段类型。<code>SQLite</code>之所以什么类型就是为了良好的编程规范和方便开发人员交流，所以平时在使用时最好设置正确的字段类型！主键必须设置成<code>integer</code></p>\n<h4 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2. 准备工作\"></a>2. 准备工作</h4><p>准备工作就是导入依赖库啦，在<code>iOS</code>中要使用<code>SQLite3</code>，需要添加库文件：<code>libsqlite3.dylib</code>并导入主头文件，这是一个<code>C语言</code>的库，所以直接使用<code>SQLite3</code>还是比较麻烦的。</p>\n<h4 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3.使用\"></a>3.使用</h4><h5 id=\"1-创建数据库并打开\"><a href=\"#1-创建数据库并打开\" class=\"headerlink\" title=\"1.创建数据库并打开\"></a>1.创建数据库并打开</h5><p>操作数据库之前必须先指定数据库文件和要操作的表，所以使用<code>SQLite3</code>，首先要打开数据库文件，然后指定或创建一张表。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//  打开数据库并创建一个表</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)openDatabase </div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"comment\">//1.设置文件名</span></div><div class=\"line\">   <span class=\"built_in\">NSString</span> *filename = [<span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>).firstObject stringByAppendingPathComponent:<span class=\"string\">@\"person.db\"</span>];</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"comment\">//2.打开数据库文件，如果没有会自动创建一个文件</span></div><div class=\"line\">   <span class=\"built_in\">NSInteger</span> result = sqlite3_open(filename.UTF8String, &amp;_sqlite3);</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"keyword\">if</span> (result == SQLITE_OK) </div><div class=\"line\">   &#123;</div><div class=\"line\">       <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"打开数据库成功！\"</span>);</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"comment\">//3.创建一个数据库表</span></div><div class=\"line\">       <span class=\"keyword\">char</span> *errmsg = <span class=\"literal\">NULL</span>;</div><div class=\"line\">       sqlite3_exec(_sqlite3, <span class=\"string\">\"CREATE TABLE IF NOT EXISTS t_person(id integer primary key autoincrement, name text, age integer)\"</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;errmsg);</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"keyword\">if</span> (errmsg) </div><div class=\"line\">       &#123;</div><div class=\"line\">           <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"错误：%s\"</span>, errmsg);</div><div class=\"line\">       &#125; </div><div class=\"line\">       <span class=\"keyword\">else</span> </div><div class=\"line\">       &#123;</div><div class=\"line\">           <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"创表成功！\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125; </div><div class=\"line\">   <span class=\"keyword\">else</span> </div><div class=\"line\">   &#123;</div><div class=\"line\">       <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"打开数据库失败！\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"2-执行指令\"><a href=\"#2-执行指令\" class=\"headerlink\" title=\"2.执行指令\"></a>2.执行指令</h5><p>使用 <code>sqlite3_exec()</code> 方法可以执行任何<code>SQL</code>语句，比如<code>创表、更新、插入和删除</code>操作。但是一般不用它执行查询语句，因为它不会返回查询到的数据。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 往表中插入1000条数据</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)insertData </div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *nameStr;</div><div class=\"line\">    <span class=\"built_in\">NSInteger</span> age;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSInteger</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) </div><div class=\"line\">    &#123;</div><div class=\"line\">      nameStr = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"Bourne-%d\"</span>, arc4random_uniform(<span class=\"number\">10000</span>)];</div><div class=\"line\">      age = arc4random_uniform(<span class=\"number\">80</span>) + <span class=\"number\">20</span>;</div><div class=\"line\">      <span class=\"built_in\">NSString</span> *sql = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"INSERT INTO t_person (name, age) VALUES('%@', '%ld')\"</span>, nameStr, age];</div><div class=\"line\">      <span class=\"keyword\">char</span> *errmsg = <span class=\"literal\">NULL</span>;</div><div class=\"line\">      sqlite3_exec(_sqlite3, sql.UTF8String, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;errmsg);</div><div class=\"line\">      <span class=\"keyword\">if</span> (errmsg) </div><div class=\"line\">      &#123;</div><div class=\"line\">          <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"错误：%s\"</span>, errmsg);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"插入完毕！\"</span>);   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"3-查询指令\"><a href=\"#3-查询指令\" class=\"headerlink\" title=\"3.查询指令\"></a>3.查询指令</h5><p>前面说过一般不使用 sqlite3_exec() 方法查询数据。因为查询数据必须要获得查询结果，所以查询相对比较麻烦。示例代码如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// sqlite3_prepare_v2() : 检查sql的合法性</span></div><div class=\"line\"><span class=\"comment\">// sqlite3_step() : 逐行获取查询结果，不断重复，直到最后一条记录</span></div><div class=\"line\"><span class=\"comment\">// sqlite3_coloum_xxx() : 获取对应类型的内容，iCol对应的就是SQL语句中字段的顺序，从0开始。根据实际查询字段的属性，使用sqlite3_column_xxx取得对应的内容即可。</span></div><div class=\"line\"><span class=\"comment\">// sqlite3_finalize() : 释放stmt</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 从表中读取数据到数组中</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)readData </div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"built_in\">NSMutableArray</span> *mArray = [<span class=\"built_in\">NSMutableArray</span> arrayWithCapacity:<span class=\"number\">1000</span>];</div><div class=\"line\">   <span class=\"keyword\">char</span> *sql = <span class=\"string\">\"select name, age from t_person;\"</span>;</div><div class=\"line\">   sqlite3_stmt *stmt;</div><div class=\"line\">   <span class=\"built_in\">NSInteger</span> result = sqlite3_prepare_v2(_sqlite3, sql, <span class=\"number\">-1</span>, &amp;stmt, <span class=\"literal\">NULL</span>);</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"keyword\">if</span> (result == SQLITE_OK) </div><div class=\"line\">   &#123;</div><div class=\"line\">       <span class=\"keyword\">while</span> (sqlite3_step(stmt) == SQLITE_ROW) </div><div class=\"line\">       &#123;</div><div class=\"line\">           <span class=\"keyword\">char</span> *name = (<span class=\"keyword\">char</span> *)sqlite3_column_text(stmt, <span class=\"number\">0</span>);</div><div class=\"line\">           <span class=\"built_in\">NSInteger</span> age = sqlite3_column_int(stmt, <span class=\"number\">1</span>);</div><div class=\"line\">           <span class=\"comment\">//创建对象</span></div><div class=\"line\">           Person *person = [Person personWithName:[<span class=\"built_in\">NSString</span> stringWithUTF8String:name] Age:age];</div><div class=\"line\">           [mArray addObject:person];</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">self</span>.dataList = mArray;</div><div class=\"line\">   &#125;</div><div class=\"line\">   sqlite3_finalize(stmt);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4.总结\"></a>4.总结</h4><p>总得来说，<code>SQLite3</code>的使用还是比较麻烦的，因为都是些<code>c语言</code>的函数，理解起来有些困难。不过在一般开发过程中，使用的都是第三方开源库 <code>FMDB</code>，封装了这些基本的<code>c语言</code>方法，使得我们在使用时更加容易理解，提高开发效率。</p>\n<h3 id=\"FMDB\"><a href=\"#FMDB\" class=\"headerlink\" title=\"FMDB\"></a>FMDB</h3><h4 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h4><blockquote>\n<p>FMDB是iOS平台的SQLite数据库框架，它是以OC的方式封装了SQLite的C语言API，它相对于cocoa自带的C语言框架有如下的优点:<br>使用起来更加面向对象，省去了很多麻烦、冗余的C语言代码<br>对比苹果自带的Core Data框架，更加轻量级和灵活<br>提供了多线程安全的数据库操作方法，有效地防止数据混乱</p>\n</blockquote>\n<h4 id=\"2-核心类\"><a href=\"#2-核心类\" class=\"headerlink\" title=\"2.核心类\"></a>2.核心类</h4><p><strong>FMDB有三个主要的类：</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// FMDatabase</span></div><div class=\"line\">一个FMDatabase对象就代表一个单独的SQLite数据库，用来执行SQL语句</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// FMResultSet</span></div><div class=\"line\">使用FMDatabase执行查询后的结果集</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// FMDatabaseQueue</span></div><div class=\"line\">用于在多线程中执行多个查询或更新，它是线程安全的</div></pre></td></tr></table></figure>\n<h4 id=\"3-打开数据库\"><a href=\"#3-打开数据库\" class=\"headerlink\" title=\"3.打开数据库\"></a>3.打开数据库</h4><blockquote>\n<p>和c语言框架一样，FMDB通过指定SQLite数据库文件路径来创建FMDatabase对象，但FMDB更加容易理解，使用起来更容易，使用之前一样需要导入sqlite3.dylib。打开数据库方法如下：</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *path = [<span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>).firstObject stringByAppendingPathComponent:<span class=\"string\">@\"person.db\"</span>];</div><div class=\"line\">FMDatabase *database = [FMDatabase databaseWithPath:path]; </div><div class=\"line\">   </div><div class=\"line\"><span class=\"keyword\">if</span> (![database open]) </div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"数据库打开失败！\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>值得注意的是，Path的值可以传入以下三种情况：</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 具体文件路径，如果不存在会自动创建</span></div><div class=\"line\"><span class=\"comment\">// 空字符串@\"\"，会在临时目录创建一个空的数据库，当FMDatabase连接关闭时，数据库文件也被删除</span></div><div class=\"line\"><span class=\"comment\">// nil，会创建一个内存中临时数据库，当FMDatabase连接关闭时，数据库会被销毁</span></div></pre></td></tr></table></figure>\n<h4 id=\"4-更新\"><a href=\"#4-更新\" class=\"headerlink\" title=\"4.更新\"></a>4.更新</h4><blockquote>\n<p>在FMDB中，除查询以外的所有操作，都称为“更新”, 如：create、drop、insert、update、delete等操作，使用executeUpdate:方法执行更新：</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//常用方法有以下 3 种：   </span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)executeUpdate:(<span class=\"built_in\">NSString</span>*)sql, ...</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)executeUpdateWithFormat:(<span class=\"built_in\">NSString</span>*)format, ...</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)executeUpdate:(<span class=\"built_in\">NSString</span>*)sql withArgumentsInArray:(<span class=\"built_in\">NSArray</span> *)arguments</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//示例</span></div><div class=\"line\">[database executeUpdate:<span class=\"string\">@\"CREATE TABLE IF NOT EXISTS t_person(id integer primary key autoincrement, name text, age integer)\"</span>]; </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//或者  </span></div><div class=\"line\">[database executeUpdate:<span class=\"string\">@\"INSERT INTO t_person(name, age) VALUES(?, ?)\"</span>, <span class=\"string\">@\"Bourne\"</span>, [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">42</span>]];</div></pre></td></tr></table></figure>\n<h4 id=\"5-查询\"><a href=\"#5-查询\" class=\"headerlink\" title=\"5.查询\"></a>5.查询</h4><p>查询方法也有3种，使用起来相当简单：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (FMResultSet *)executeQuery:(<span class=\"built_in\">NSString</span>*)sql, ...</div><div class=\"line\">- (FMResultSet *)executeQueryWithFormat:(<span class=\"built_in\">NSString</span>*)format, ...</div><div class=\"line\">- (FMResultSet *)executeQuery:(<span class=\"built_in\">NSString</span> *)sql withArgumentsInArray:(<span class=\"built_in\">NSArray</span> *)arguments</div></pre></td></tr></table></figure>\n<p>查询示例：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.执行查询</span></div><div class=\"line\">FMResultSet *result = [database executeQuery:<span class=\"string\">@\"SELECT * FROM t_person\"</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//2.遍历结果集</span></div><div class=\"line\"><span class=\"keyword\">while</span> ([result next]) </div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *name = [result stringForColumn:<span class=\"string\">@\"name\"</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> age = [result intForColumn:<span class=\"string\">@\"age\"</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"6-线程安全\"><a href=\"#6-线程安全\" class=\"headerlink\" title=\"6.线程安全\"></a>6.线程安全</h4><blockquote>\n<p>在多个线程中同时使用一个 <code>FMDatabase</code> 实例是不明智的。不要让多个线程分享同一个<code>FMDatabase</code>实例，它无法在多个线程中同时使用。 如果在多个线程中同时使用一个<code>FMDatabase</code>实例，会造成数据混乱等问题。所以，请使用 <code>FMDatabaseQueue</code>，它是线程安全的。以下是使用方法：</p>\n</blockquote>\n<p>创建队列。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">FMDatabaseQueue *queue = [FMDatabaseQueue databaseQueueWithPath:aPath];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用队列</span></div><div class=\"line\">[queue inDatabase:^(FMDatabase *database)</div><div class=\"line\">&#123;    </div><div class=\"line\">          [database executeUpdate:<span class=\"string\">@\"INSERT INTO t_person(name, age) VALUES (?, ?)\"</span>, <span class=\"string\">@\"Bourne_1\"</span>, [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">1</span>]];    </div><div class=\"line\">          [database executeUpdate:<span class=\"string\">@\"INSERT INTO t_person(name, age) VALUES (?, ?)\"</span>, <span class=\"string\">@\"Bourne_2\"</span>, [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">2</span>]];    </div><div class=\"line\">          [database executeUpdate:<span class=\"string\">@\"INSERT INTO t_person(name, age) VALUES (?, ?)\"</span>, <span class=\"string\">@\"Bourne_3\"</span>, [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">3</span>]];      </div><div class=\"line\">          FMResultSet *result = [database executeQuery:<span class=\"string\">@\"select * from t_person\"</span>];    </div><div class=\"line\">         <span class=\"keyword\">while</span>([result next]) &#123;   </div><div class=\"line\">         &#125;    </div><div class=\"line\">&#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 而且可以轻松地把简单任务包装到事务里：</span></div><div class=\"line\">[queue inTransaction:^(FMDatabase *database, <span class=\"built_in\">BOOL</span> *rollback) &#123;    </div><div class=\"line\">          [database executeUpdate:<span class=\"string\">@\"INSERT INTO t_person(name, age) VALUES (?, ?)\"</span>, <span class=\"string\">@\"Bourne_1\"</span>, [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">1</span>]];    </div><div class=\"line\">          [database executeUpdate:<span class=\"string\">@\"INSERT INTO t_person(name, age) VALUES (?, ?)\"</span>, <span class=\"string\">@\"Bourne_2\"</span>, [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">2</span>]];    </div><div class=\"line\">          [database executeUpdate:<span class=\"string\">@\"INSERT INTO t_person(name, age) VALUES (?, ?)\"</span>, <span class=\"string\">@\"Bourne_3\"</span>, [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">3</span>]];      </div><div class=\"line\">          FMResultSet *result = [database executeQuery:<span class=\"string\">@\"select * from t_person\"</span>];    </div><div class=\"line\">             <span class=\"keyword\">while</span>([result next]) &#123;   </div><div class=\"line\">             &#125;   </div><div class=\"line\">           <span class=\"comment\">//回滚</span></div><div class=\"line\">           *rollback = <span class=\"literal\">YES</span>;  </div><div class=\"line\">    &#125;];</div></pre></td></tr></table></figure>\n<p>FMDatabaseQueue 后台会建立系列化的<code>GCD</code>队列，并执行你传给<code>GCD</code>队列的块。这意味着 你从多线程同时调用调用方法，<code>GCD</code>也会按它接收的块的顺序来执行了。</p>\n","excerpt":"文章大纲，便于浏览 01-iOS程序启动过程 02-浅拷贝-深拷贝 03-View的生命周期","categories":[],"tags":[{"name":"知识总结","slug":"知识总结","permalink":"http://yoursite.com/tags/知识总结/"}]},{"title":"weak-弱引用实现原理","date":"2017-04-03T06:33:09.000Z","path":"2017/04/03/weak-弱引用实现原理/","text":"weak是一个弱引用，这个引用不会增加对象的引用计数，并且所指对象在释放后被自动置为nil。weak通常用于处理循环引用的问题。如代理属性以及block中用得比较多。 此处重点记录一下weak的实现过程 123&#123; id __weak obj1 = obj;&#125; 当我们初始化一个weak属性的变量时，Runtime会调用objc_initWeak函数 声明如下： 123&#123; id objc_initWeak (id *object , id value);&#125; 其具体实现如下： 12345id objc_initWeak (id *object , id value)&#123; *object = 0; return objc_storeWeak(object,value);&#125; 轮换成编译器代码如下 12id obj1;objc_initWeak(&amp;obj1,obj); 因此，这里所做的事是先将obj1初始化为0(nil)，然后将obj1的地址及obj作为参数传递给objc_storeWeak函数。 objc_storeWeak的函数声明如下: 1id objc_storeWeak(id *location, id value); 具体实现相对较为复杂，去掉线程之间锁之后，大致如下： 12345678910111213141516171819202122id objc_storeWeak(id *location, id newObj)&#123; id oldObj; SideTable *oldTable; SideTable *newTable; oldObj = *location; // 旧值 oldTable = SideTable::tableForPointer(oldObj); // 旧表 newTable = SideTable::tableForPointer(newObj); // 新表 if (oldObj) &#123; weak_unregister_no_lock(&amp;oldTable-&gt;weak_table, oldObj, location); &#125; if (newObj) &#123; newObj = weak_register_no_lock(&amp;newTable-&gt;weak_table, newObj,location); &#125; *location = newObj; return newObj;&#125; 这里面有很关键的两个结构体weak和SideTable weak表是一个弱引用表，实现为一个weak_table_t结构体，存储了某个对象相关的的所有的弱引用信息。其定义如下(具体定义在objc-weak.h中)： 12345struct weak_table_t &#123; weak_entry_t *weak_entries; size_t num_entries; ......&#125;; 其中weak_entry_t是存储在弱引用表中的一个内部结构体，它负责维护和存储指向一个对象的所有弱引用hash表。其定义如下： 1234567891011121314struct weak_entry_t &#123; DisguisedPtr&lt;objc_object&gt; referent; union &#123; struct &#123; weak_referrer_t *referrers; uintptr_t out_of_line : 1; ...... &#125;; struct &#123; weak_referrer_t inline_referrers[WEAK_INLINE_COUNT]; &#125;; &#125;;&#125;; SideTable是一个用C++实现的类，它的具体定义在NSObject.mm中，看看它的一些成员变量的定义: 1234567class SideTable &#123;private: static uint8_t table_buf[SIDE_TABLE_STRIPE * SIDE_TABLE_SIZE];public: RefcountMap refcnts; weak_table_t weak_table;&#125; 了解了weak表和SideTable，让我们再回过头来看看objc_storeWeak。首先是根据weak指针找到其指向的老的对象： 1oldObj = *location; 然后获取到与新旧对象相关的SideTable对象： 12oldTable = SideTable::tableForPointer(oldObj);newTable = SideTable::tableForPointer(newObj); 下面要做的就是在老对象的weak表中移除指向信息，而在新对象的weak表中建立关联信息： 123456if (oldObj) &#123; weak_unregister_no_lock(&amp;oldTable-&gt;weak_table, oldObj, location);&#125;if (newObj) &#123; newObj = weak_register_no_lock(&amp;newTable-&gt;weak_table, newObj,location);&#125; 接下来让弱引用指针指向新的对象： 1*location = newObj; 最后会返回这个新对象： 1return newObj; 而当weak引用指向的对象被释放时，其基本流程如下： 调用objc_release 因为对象的引用计数为0，所以执行dealloc 在dealloc中，调用了_objc_rootDealloc函数 在_objc_rootDealloc中，调用了object_dispose函数 调用objc_destructInstance 最后调用objc_clear_deallocating objc_clear_deallocating中首先取出对象对应的SideTable实例，如果这个对象有关联的弱引用，则调用arr_clear_deallocating来清除对象的弱引用信息。 这个函数首先是找出对象对应的weak_entry_t链表，然后挨个将弱引用置为nil。最后清理对象的记录。 一个weak引用的处理涉及各种查表、添加与删除操作，还是有一定消耗的。所以如果大量使用__weak变量的话，会对性能造成一定的影响。","content":"<p><code>weak</code>是一个弱引用，这个引用不会增加对象的引用计数，并且所指对象在释放后被自动置为nil。<code>weak</code>通常用于处理循环引用的问题。如<code>代理</code>属性以及<code>block</code>中用得比较多。</p>\n<p>此处重点记录一下<code>weak</code>的实现过程</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">id</span> __<span class=\"keyword\">weak</span> obj1 = obj;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>当我们初始化一个<code>weak</code>属性的变量时，<code>Runtime</code>会调用<code>objc_initWeak</code>函数</p>\n<p>声明如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">id</span> objc_initWeak (<span class=\"keyword\">id</span> *object , <span class=\"keyword\">id</span> value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其具体实现如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> objc_initWeak (<span class=\"keyword\">id</span> *object , <span class=\"keyword\">id</span> value)</div><div class=\"line\">&#123;</div><div class=\"line\">   *object = <span class=\"number\">0</span>;</div><div class=\"line\">   <span class=\"keyword\">return</span> objc_storeWeak(object,value);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>轮换成编译器代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> obj1;</div><div class=\"line\">objc_initWeak(&amp;obj1,obj);</div></pre></td></tr></table></figure>\n<p>因此，这里所做的事是先将<code>obj1</code>初始化为<code>0(nil)</code>，然后将<code>obj1</code>的地址及<code>obj</code>作为参数传递给<code>objc_storeWeak</code>函数。</p>\n<p><code>objc_storeWeak</code>的函数声明如下:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> objc_storeWeak(<span class=\"keyword\">id</span> *location, <span class=\"keyword\">id</span> value);</div></pre></td></tr></table></figure>\n<p>具体实现相对较为复杂，去掉线程之间锁之后，大致如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> objc_storeWeak(<span class=\"keyword\">id</span> *location, <span class=\"keyword\">id</span> newObj)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">id</span> oldObj;</div><div class=\"line\">    SideTable *oldTable;</div><div class=\"line\">    SideTable *newTable;  </div><div class=\"line\"></div><div class=\"line\">    oldObj = *location;                               <span class=\"comment\">// 旧值</span></div><div class=\"line\">    oldTable = SideTable::tableForPointer(oldObj);    <span class=\"comment\">// 旧表</span></div><div class=\"line\">    newTable = SideTable::tableForPointer(newObj);    <span class=\"comment\">// 新表</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (oldObj) &#123;</div><div class=\"line\">        weak_unregister_no_lock(&amp;oldTable-&gt;weak_table, oldObj, location);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (newObj) &#123;</div><div class=\"line\">        newObj = weak_register_no_lock(&amp;newTable-&gt;weak_table, newObj,location);</div><div class=\"line\">    &#125;</div><div class=\"line\">   </div><div class=\"line\">    *location = newObj;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> newObj;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里面有很关键的两个结构体<code>weak</code>和<code>SideTable</code></p>\n<p><code>weak</code>表是一个弱引用表，实现为一个<code>weak_table_t</code>结构体，存储了某个对象相关的的所有的弱引用信息。其定义如下(具体定义在<code>objc-weak.h</code>中)：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> weak_table_t &#123;</div><div class=\"line\">    weak_entry_t *weak_entries;</div><div class=\"line\">    size_t    num_entries;</div><div class=\"line\">    ......</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>其中<code>weak_entry_t</code>是存储在弱引用表中的一个内部结构体，它负责维护和存储指向一个对象的所有弱引用<code>hash</code>表。其定义如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> weak_entry_t &#123;</div><div class=\"line\">    DisguisedPtr&lt;objc_object&gt; referent;</div><div class=\"line\">    <span class=\"keyword\">union</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">            weak_referrer_t *referrers;</div><div class=\"line\">            uintptr_t        out_of_line : <span class=\"number\">1</span>;</div><div class=\"line\">            ......</div><div class=\"line\">        &#125;;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">            weak_referrer_t  inline_referrers[WEAK_INLINE_COUNT];</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><code>SideTable</code>是一个用<code>C++</code>实现的类，它的具体定义在<code>NSObject.mm</code>中，看看它的一些成员变量的定义:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> SideTable &#123;</div><div class=\"line\">private:</div><div class=\"line\">    <span class=\"keyword\">static</span> uint8_t table_buf[SIDE_TABLE_STRIPE * SIDE_TABLE_SIZE];</div><div class=\"line\">public:</div><div class=\"line\">    RefcountMap refcnts;</div><div class=\"line\">    weak_table_t weak_table;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>了解了<code>weak</code>表和<code>SideTable</code>，让我们再回过头来看看<code>objc_storeWeak</code>。首先是根据<code>weak</code>指针找到其指向的老的对象：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">oldObj = *location;</div></pre></td></tr></table></figure>\n<p>然后获取到与新旧对象相关的<code>SideTable</code>对象：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">oldTable = SideTable::tableForPointer(oldObj);</div><div class=\"line\">newTable = SideTable::tableForPointer(newObj);</div></pre></td></tr></table></figure>\n<p>下面要做的就是在老对象的<code>weak</code>表中移除指向信息，而在新对象的<code>weak</code>表中建立关联信息：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (oldObj) &#123;</div><div class=\"line\">    weak_unregister_no_lock(&amp;oldTable-&gt;weak_table, oldObj, location);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (newObj) &#123;</div><div class=\"line\">    newObj = weak_register_no_lock(&amp;newTable-&gt;weak_table, newObj,location);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>接下来让弱引用指针指向新的对象：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">*location = newObj;</div></pre></td></tr></table></figure>\n<p>最后会返回这个新对象：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span> newObj;</div></pre></td></tr></table></figure>\n<p>而当<code>weak</code>引用指向的对象被释放时，其基本流程如下：</p>\n<ul>\n<li>调用<code>objc_release</code></li>\n<li>因为对象的引用计数为<code>0</code>，所以执行<code>dealloc</code></li>\n<li>在<code>dealloc</code>中，调用了<code>_objc_rootDealloc</code>函数</li>\n<li>在<code>_objc_rootDealloc</code>中，调用了<code>object_dispose</code>函数</li>\n<li>调用<code>objc_destructInstance</code></li>\n<li>最后调用<code>objc_clear_deallocating</code></li>\n</ul>\n<p><code>objc_clear_deallocating</code>中首先取出对象对应的<code>SideTable</code>实例，如果这个对象有关联的弱引用，则调用<code>arr_clear_deallocating</code>来清除对象的弱引用信息。</p>\n<p>这个函数首先是找出对象对应的<code>weak_entry_t</code>链表，然后挨个将弱引用置为<code>nil</code>。最后清理对象的记录。</p>\n<p>一个<code>weak</code>引用的处理涉及各种查表、添加与删除操作，还是有一定消耗的。所以如果大量使用__weak变量的话，会对性能造成一定的影响。</p>\n","excerpt":"weak是一个弱引用，这个引用不会增加对象的引用计数，并且所指对象在释放后被自动置为nil。weak通常用于处理循环引用的问题。如代理属性以及block中用得比较多。 此处重点记录一下weak的实现过程 123&#123; id __weak obj1 = obj;&#125;","categories":[],"tags":[{"name":"读后感","slug":"读后感","permalink":"http://yoursite.com/tags/读后感/"}]}]