[{"title":"iOS知识点总结-1","date":"2017-03-07T08:57:09.000Z","path":"2017/03/07/总结-iOS Summary Part1/","text":"文章大纲，便于浏览 01-iOS程序启动过程 02-浅拷贝-深拷贝 03-View的生命周期 04-@property 05-事件传递和事件响应 06-KVC 07-KVO 08-iOS数据持久化方案 01-iOS-App-startup-process###一、启动完整过程 1.main函数 2.UIApplicationMain函数 创建UIApplication对象 创建UIApplication的delegate对象 3.delegate对象开始处理(监听)系统事件(没有storyboard) 程序启动完毕的时候, 就会调用代理的:didFinishLaunchingWithOptions:方法 在application:didFinishLaunchingWithOptions:中创建UIWindow 创建和设置UIWindow的rootViewController 显示窗口 4.根据Info.plist获得最主要storyboard的文件名,加载最主要的storyboard(有storyboard) 创建UIWindow 创建和设置UIWindow的rootViewController 显示窗口 ###二、程序启动原理 1.main函数中执行了一个UIApplicationMain这个函数 123int UIApplicationMain(int argc, char *argv[], NSString *principalClassName, NSString *delegateClassName);argc、argv：直接传递给UIApplicationMain进行相关处理即可 2.principalClassName：指定应用程序类名（app的象征），该类必须是UIApplication(或子类)。如果为nil,则用UIApplication类作为默认值 3.delegateClassName：指定应用程序的代理类，该类必须遵守UIApplicationDelegate协议 4.UIApplicationMain函数会根据principalClassName创建UIApplication对象，根据delegateClassName创建一个delegate对象，并将该delegate对象赋值给UIApplication对象中的delegate属性 5.接着会建立应用程序的Main Runloop（事件循环），进行事件的处理(首先会在程序完毕后调用delegate对象的application:didFinishLaunchingWithOptions:方法) 程序正常退出时UIApplicationMain函数才返回 1234567891011int main(int argc, char * argv[])&#123; @autoreleasepool &#123; /*** argc: 系统或者用户传入的参数个数* argv: 系统或者用户传入的实际参数 * 1.根据传入的第三个参数创建UIApplication对象 * 2.根据传入的第四个产生创建UIApplication对象的代理* 3.设置刚刚创建出来的代理对象为UIApplication的代理 * 4.开启一个事件循环 **/ return UIApplicationMain(argc, argv, @\"UIApplication\", @\"YYAppDelegate\"); &#125;&#125; 启动与代理： 02-ShallowCopy-DeepCopy简要总结一下什么是浅拷贝，什么是深拷贝 深拷贝就是内容拷贝 浅拷贝就是指针拷贝 ###一.系统对象的 copy/mutableCopy 1234567891011121314151617NSString *string = @\"LiMing\"; NSString *copyString = [string copy]; NSString *mutableString = [string mutableCopy]; NSLog(@\"string = %p\",string); NSLog(@\"copyString = %p\",copyString); NSLog(@\"mutableString = %p \",mutableString);结论：1.string 和 copyString 他们只是二个不同的指针，指向内存中的同一块地址，copy 只是指针复制2.string 和 mutableString 打印出来的地址不同，是因为两个指针指向的地址本就不同，mutableCopy 是内容复制注意：其他对象 NSArray 、NSMutableArray 、NSDictionary 、NSMutableDictionary 一样适用 规律可以从这张图看出来 ###二.自定义对象实现 Copy-MutableCopy copy 1234GZQPerson *person = [[GZQPerson alloc] init];person.age = 20;person.name = @\"GZQ\";GZQPerson *copyP = [person copy]; // 这里崩溃 崩溃： 看崩溃信息GZQPerson应该先实现： 1- (id)copyWithZone:(NSZone *)zone; 测试： 12345678910111213141516171819202122232425#import \"GZQPerson.h\"@interface GZQPerson ()&lt;NSCopying,NSMutableCopying&gt;@end@implementation GZQPerson- (id)copyWithZone:(NSZone *)zone &#123; GZQPerson *person = [[[self class] allocWithZone:zone] init]; person.age = self.age; person.name = self.name; return person;&#125;- (id)mutableCopyWithZone:(NSZone *)zone &#123; GZQPerson *person = [[[self class] allocWithZone:zone] init]; person.age = self.age; person.name = self.name; return person;&#125;@end 12345678910111213141516171819202122232425#import \"ViewController.h\"#import \"GZQPerson.h\"@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; GZQPerson *person = [[GZQPerson alloc] init]; person.age = 20; person.name = @\"GZQ\"; GZQPerson *copyP = [person copy]; NSLog(@\"copyP=%p\",copyP); NSLog(@\"person=%p\",person); NSLog(@\"person=%p\",copyP.name); NSLog(@\"person=%p\",person.name); &#125;@end 可以看出虽然指针的地址不同，但是存储的地址是一致的。 ###三.copy 本质 property copy 实际上就对name干了这个： 12345678#import &lt;Foundation/Foundation.h&gt;property copy 实际上就对name干了这个：- (void)setName:(NSString *)name&#123; _name = [name copy];&#125; strong是不执行Copy操作的 1234567891011@property (nonatomic, strong) NSString *name;NSMutableString *string = [NSMutableString stringWithFormat:@\"深拷贝-浅拷贝\"];GZQPerson *person = [[GZQPerson alloc] init];person.name = string;// 可以改变person.name的值，因为其内部没有生成新的对象[string appendString:@\"LALALA\"];NSLog(@\"name = %@\", person.name); 03-View的生命周期 读懂这一张图即可 04-@property @property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的 @property 的本质. 1@property = ivar + getter + setter; 下面解释下： “属性” (property)有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter）。 “属性” (property)作为 Objective-C 的一项特性，主要的作用就在于封装对象中的数据。 Objective-C 对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过“存取方法”(access method)来访问。其中，“获取方法” (getter)用于读取变量值，而“设置方法” (setter)用于写入变量值。这个概念已经定型，并且经由“属性”这一特性而成为 Objective-C 2.0 的一部分。 而在正规的 Objective-C 编码风格中，存取方法有着严格的命名规范。 正因为有了这种严格的命名规范，所以 Objective-C 这门语言才能根据名称自动创建出存取方法。其实也可以把属性当做一种关键字，其表示: 编译器会自动写出一套存取方法，用以访问给定类型中具有给定名称的变量。 所以你也可以这么说： 1@property = getter + setter; 例如下面这个类： 1234@interface Person : NSObject@property NSString *firstName;@property NSString *lastName;@end 上述代码写出来的类与下面这种写法等效： 123456@interface Person : NSObject- (NSString *)firstName;- (void)setFirstName:(NSString *)firstName;- (NSString *)lastName;- (void)setLastName:(NSString *)lastName;@end property在runtime中是objc_property_t定义如下: 1typedef struct objc_property *objc_property_t; 而objc_property是一个结构体，包括name和attributes，定义如下： 1234struct property_t &#123; const char *name; const char *attributes;&#125;; 而attributes本质是objc_property_attribute_t，定义了property的一些属性，定义如下： 12345/// Defines a property attributetypedef struct &#123; const char *name; /**&lt; The name of the attribute */ const char *value; /**&lt; The value of the attribute (usually empty) */&#125; objc_property_attribute_t; 而attributes的具体内容是什么呢？其实，包括：类型，原子性，内存语义和对应的实例变量。 例如：我们定义一个string的property 1@property (nonatomic, copy) NSString *string; 通过 property_getAttributes(property)获取到attributes并打印出来之后的结果为 1T@\"NSString\",C,N,V_string 其中T就代表类型，可参阅Type Encodings，C就代表Copy，N代表nonatomic，V就代表对于的实例变量。 ivar、getter、setter 是如何生成并添加到这个类中的? “自动合成”( autosynthesis) 完成属性定义后，编译器会自动编写访问这些属性所需的方法，此过程叫做“自动合成”(autosynthesis)。需要强调的是，这个过程由编译 器在编译期执行，所以编辑器里看不到这些“合成方法”(synthesized method)的源代码。除了生成方法代码 getter、setter 之外，编译器还要自动向类中添加适当类型的实例变量，并且在属性名前面加下划线，以此作为实例变量的名字。在前例中，会生成两个实例变量，其名称分别为 _firstName 与 _lastName。也可以在类的实现代码里通过@synthesize 语法来指定实例变量的名字. 1234@implementation Person@synthesize firstName = _myFirstName;@synthesize lastName = _myLastName;@end 我为了搞清属性是怎么实现的,曾经反编译过相关的代码,他大致生成了五个东西 1234561. OBJC_IVAR_$类名$属性名称 ：该属性的“偏移量” (offset)，这个偏移量是“硬编码” (hardcode)，表示该变量距离存放对象的内存区域的起始地址有多远。2. setter 与 getter 方法对应的实现函数3. ivar_list ：成员变量列表4. method_list ：方法列表5. prop_list ：属性列表也就是说我们每次在增加一个属性,系统都会在 ivar_list 中添加一个成员变量的描述,在 method_list 中增加 setter 与 getter 方法的描述,在属性列表中增加一个属性的描述,然后计算该属性在对象中的偏移量,然后给出 setter 与 getter 方法对应的实现,在 setter 方法中从偏移量的位置开始赋值,在 getter 方法中从偏移量开始取值,为了能够读取正确字节数,系统对象偏移量的指针类型进行了类型强转. 属性可以拥有的特质分为四类: 原子性— nonatomic 特质,在默认情况下，由编译器合成的方法会通过锁定机制确保其原子性(atomicity)。如果属性具备 nonatomic 特质，则不使用自旋锁。请注意，尽管没有名为“atomic”的特质(如果某属性不具备 nonatomic 特质，那它就是“原子的” ( atomic) )，但是仍然可以在属性特质中写明这一点，编译器不会报错。若是自己定义存取方法，那么就应该遵从与属性特质相符的原子性。 读/写权限—readwrite(读写)、readonly (只读) 内存管理语义—assign、strong、 weak、unsafe_unretained、copy 方法名—getter= 、setter= getter=的样式： 123@property (nonatomic, getter=isOn) BOOL on; (`setter=`这种不常用，也不推荐使用。故不在这里给出写法。） setter=一般用在特殊的情境下，比如： 在数据反序列化、转模型的过程中，服务器返回的字段如果以 init 开头，所以你需要定义一个 init 开头的属性，但默认生成的 setter 与 getter 方法也会以 init 开头，而编译器会把所有以 init 开头的方法当成初始化方法，而初始化方法只能返回 self 类型，因此编译器会报错。 这时你就可以使用下面的方式来避免编译器报错： 1@property(nonatomic, strong, getter=p_initBy, setter=setP_initBy:)NSString *initBy; 另外也可以用关键字进行特殊说明，来避免编译器报错： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556@property(nonatomic, readwrite, copy, null_resettable) NSString *initBy;- (NSString *)initBy __attribute__((objc_method_family(none)));1. 不常用的：nonnull,null_resettable,nullable注意：很多人会认为如果属性具备 nonatomic 特质，则不使用 “同步锁”。其实在属性设置方法中使用的是自旋锁，自旋锁相关代码如下：static inline void reallySetProperty(id self, SEL _cmd, id newValue, ptrdiff_t offset, bool atomic, bool copy, bool mutableCopy)&#123; if (offset == 0) &#123; object_setClass(self, newValue); return; &#125; id oldValue; id *slot = (id*) ((char*)self + offset); if (copy) &#123; newValue = [newValue copyWithZone:nil]; &#125; else if (mutableCopy) &#123; newValue = [newValue mutableCopyWithZone:nil]; &#125; else &#123; if (*slot == newValue) return; newValue = objc_retain(newValue); &#125; if (!atomic) &#123; oldValue = *slot; *slot = newValue; &#125; else &#123; spinlock_t&amp; slotlock = PropertyLocks[slot]; slotlock.lock(); oldValue = *slot; *slot = newValue; slotlock.unlock(); &#125; objc_release(oldValue);&#125;void objc_setProperty(id self, SEL _cmd, ptrdiff_t offset, id newValue, BOOL atomic, signed char shouldCopy) &#123; bool copy = (shouldCopy &amp;&amp; shouldCopy != MUTABLE_COPY); bool mutableCopy = (shouldCopy == MUTABLE_COPY); reallySetProperty(self, _cmd, newValue, offset, atomic, copy, mutableCopy);&#125; 05-事件传递和事件响应这部分知识如果自己总结，篇幅较长。可以参考以下文章 06-KVCKey-Value Coding (KVC) KVC（Key-value coding）键值编码，单看这个名字可能不太好理解。其实翻译一下就很简单了，就是指iOS的开发中，可以允许开发者通过Key名直接访问对象的属性，或者给对象的属性赋值。而不需要调用明确的存取方法。这样就可以在运行时动态在访问和修改对象的属性。而不是在编译时确定，这也是iOS开发中的黑魔法之一。很多高级的iOS开发技巧都是基于KVC实现的。目前网上关于KVC的文章在非常多，有的只是简单地说了下用法，有的讲得深入但是在使用场景和最佳实践没有说明，我写下这遍文章就是给大家详解一个最完整最详细的KVC。 KVC在iOS中的定义 无论是Swift还是Objective-C，KVC的定义都是对NSObject的扩展来实现的(Objective-C中有个显式的NSKeyValueCoding类别名，而Swift没有，也不需要)所以对于所有继承了NSObject在类型，都能使用KVC(一些纯Swift类和结构体是不支持KVC的)，下面是KVC最为重要的四个方法 1234- (nullable id)valueForKey:(NSString *)key; //直接通过Key来取值- (void)setValue:(nullable id)value forKey:(NSString *)key; //通过Key来设值- (nullable id)valueForKeyPath:(NSString *)keyPath; //通过KeyPath来取值- (void)setValue:(nullable id)value forKeyPath:(NSString *)keyPath; //通过KeyPath来设值 当然NSKeyValueCoding类别中还有其他的一些方法，下面列举一些 1234567891011121314+ (BOOL)accessInstanceVariablesDirectly;//默认返回YES，表示如果没有找到Set&lt;Key&gt;方法的话，会按照_key，_iskey，key，iskey的顺序搜索成员，设置成NO就不这样搜索- (BOOL)validateValue:(inout id __nullable * __nonnull)ioValue forKey:(NSString *)inKey error:(out NSError **)outError;//KVC提供属性值确认的API，它可以用来检查set的值是否正确、为不正确的值做一个替换值或者拒绝设置新值并返回错误原因。- (NSMutableArray *)mutableArrayValueForKey:(NSString *)key;//这是集合操作的API，里面还有一系列这样的API，如果属性是一个NSMutableArray，那么可以用这个方法来返回- (nullable id)valueForUndefinedKey:(NSString *)key;//如果Key不存在，且没有KVC无法搜索到任何和Key有关的字段或者属性，则会调用这个方法，默认是抛出异常- (void)setValue:(nullable id)value forUndefinedKey:(NSString *)key;//和上一个方法一样，只不过是设值。- (void)setNilValueForKey:(NSString *)key;//如果你在SetValue方法时面给Value传nil，则会调用这个方法- (NSDictionary&lt;NSString *, id&gt; *)dictionaryWithValuesForKeys:(NSArray&lt;NSString *&gt; *)keys;//输入一组key,返回该组key对应的Value，再转成字典返回，用于将Model转到字典。 上面的这些方法在碰到特殊情况或者有特殊需求还是会用到的，所以也是可以了解一下。后面的代码示例会有讲到其中的一些方法。同时苹果对一些容器类比如NSArray或者NSSet等，KVC有着特殊的实现。建议有基础的或者英文好的开发者直接去看苹果的官方文档，相信你会对KVC的理解更上一个台阶。 KVC是怎么寻找Key的 KVC是怎么使用的，我相信绝大多数的开发者都很清楚，我在这里就不再写简单的使用KVC来设值和取值的代码了，首页我们来探讨KVC在内部是按什么样的顺序来寻找key的。当调用setValue：属性值 forKey：``@”name“的代码时，底层的执行机制如下： 程序优先调用set&lt;Key&gt;:属性值方法，代码通过setter方法完成设置。注意，这里的&lt;key&gt;是指成员变量名，首字母大清写要符合KVC的全名规则，下同 如果没有找到setName：方法，KVC机制会检查+ (BOOL)accessInstanceVariablesDirectly方法有没有返回YES，默认该方法会返回YES，如果你重写了该方法让其返回NO的话，那么在这一步KVC会执行setValue：forUNdefinedKey：方法，不过一般开发者不会这么做。所以KVC机制会搜索该类里面有没有名为_&lt;key&gt;的成员变量，无论该变量是在类接口部分定义，还是在类实现部分定义，也无论用了什么样的访问修饰符，只在存在以_&lt;key&gt;命名的变量，KVC都可以对该成员变量赋值。 如果该类即没有set&lt;Key&gt;：方法，也没有_&lt;key&gt;成员变量，KVC机制会搜索_is&lt;Key&gt;的成员变量， 和上面一样，如果该类即没有set&lt;Key&gt;：方法，也没有_&lt;key&gt;和_is&lt;Key&gt;成员变量，KVC机制再会继续搜索&lt;key&gt;和is&lt;Key&gt;的成员变量。再给它们赋值。 如果上面列出的方法或者成员变量都不存在，系统将会执行该对象的setValue：forUNdefinedKey：方法，默认是抛出异常。 如果开发者想让这个类禁用KVC里，那么重写+ (BOOL)accessInstanceVariablesDirectly方法让其返回NO即可，这样的话如果KVC没有找到set&lt;Key&gt;:属性名时，会直接用setValue：forUNdefinedKey：方法。 07-KVOKVO，全称为Key-Value Observing，是iOS中的一种设计模式，用于检测对象的某些属性的实时变化情况并作出响应。当应用场景比较复杂时，多个地方存在crash的危险。 首先，假设我们的目标是在一个UITableViewController内对tableview的contentOffset进行实时监测，很容易地使用KVO来实现为。 在初始化方法中加入： 12345678910111213[_tableView addObserver:self forKeyPath:@\"contentOffset\" options:NSKeyValueObservingOptionNew context:nil];// 在dealloc中移除KVO监听：[_tableView removeObserver:self forKeyPath:@\"contentOffset\" context:nil];// 添加默认的响应回调方法：- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context&#123; [self doSomethingWhenContentOffsetChanges];&#125; 好了，KVO实现就到此完美结束了，开玩笑，肯定没这么简单的，这样的代码太粗糙了，当你在controller中添加多个KVO时，所有的回调都是走同上述函数，那就必须对触发回调函数的来源进行判断。判断如下： 12345678910- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context&#123; if (object == _tableView &amp;&amp; [keyPath isEqualToString:@\"contentOffset\"]) &#123; [self doSomethingWhenContentOffsetChanges]; &#125;&#125; 你以为这样就结束了吗？答案是否定的！我们假设当前类(在例子中为UITableViewController)还有父类，并且父类也有自己绑定了一些其他KVO呢？我们看到，上述回调函数体中只有一个判断，如果这个if不成立，这次KVO事件的触发就会到此中断了。但事实上，若当前类无法捕捉到这个KVO，那很有可能是在他的superClass，或者super-superClass...中，上述处理砍断了这个链。合理的处理方式应该是这样的： 1234567891011121314- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context&#123; if (object == _tableView &amp;&amp; [keyPath isEqualToString:@\"contentOffset\"]) &#123; [self doSomethingWhenContentOffsetChanges]; &#125; else &#123; [super observeValueForKeyPath:keyPath ofObject:object change:change context:context]; &#125;&#125; 这样就结束了吗？答案仍旧是否定的。潜在的问题有可能出现在dealloc中对KVO的注销上。KVO的一种缺陷(其实不能称为缺陷，应该称为特性)是，当对同一个keypath进行两次removeObserver时会导致程序crash，这种情况常常出现在父类有一个kvo，父类在dealloc中remove了一次，子类又remove了一次的情况下。不要以为这种情况很少出现！当你封装framework开源给别人用或者多人协作开发时是有可能出现的，而且这种crash很难发现。不知道你发现没，目前的代码中context字段都是nil，那能否利用该字段来标识出到底kvo是superClass注册的，还是self注册的？ 回答是可以的。我们可以分别在父类以及本类中定义各自的context字符串，比如在本类中定义context为@&quot;ThisIsMyKVOContextNotSuper&quot;;然后在dealloc中remove observer时指定移除的自身添加的observer。这样iOS就能知道移除的是自己的kvo，而不是父类中的kvo，避免二次remove造成crash。 08-iOS数据持久化方案存储方案 plist文件（属性列表） preference（偏好设置） NSKeyedArchiver（归档） SQLite 3 CoreData 沙盒 iOS程序默认情况下只能访问程序自己的目录，这个目录被称为“沙盒”。 1.结构沙盒的目录结构如下： 123456\"应用程序包\"DocumentsLibrary Caches Preferencestmp 2.目录特性 虽然沙盒中有这么多文件夹，但是每个文件夹都不尽相同，都有各自的特性。所以在选择存放目录时，一定要认真选择适合的目录。 “应用程序包”: 这里面存放的是应用程序的源文件，包括资源文件和可执行文件。 Documents: 最常用的目录，iTunes同步该应用时会同步此文件夹中的内容，适合存储重要数据。 12NSString *path = [[NSBundle mainBundle] bundlePath];NSLog(@\"%@\", path); Library/Caches: iTunes不会同步此文件夹，适合存储体积大，不需要备份的非重要数据。 12NSString *path = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject;NSLog(@\"%@\", path); Library/Preferences: iTunes同步该应用时会同步此文件夹中的内容，通常保存应用的设置信息。 12NSString *path = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES).firstObject;NSLog(@\"%@\", path); tmp: iTunes不会同步此文件夹，系统可能在应用没运行时就删除该目录下的文件，所以此目录适合保存应用中的一些临时文件，用完就删除。 12NSString *path = NSTemporaryDirectory();NSLog(@\"%@\", path); plist文件 plist文件是将某些特定的类，通过XML文件的方式保存在目录中。 可以被序列化的类型只有如下几种： 12345678910NSArray;NSMutableArray;NSDictionary;NSMutableDictionary;NSData;NSMutableData;NSString;NSMutableString;NSNumber;NSDate; 1.获得文件路径12NSString *path = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject;NSString *fileName = [path stringByAppendingPathComponent:@\"123.plist\"]; 2.存储12NSArray *array = @[@\"123\", @\"456\", @\"789\"];[array writeToFile:fileName atomically:YES]; 3.读取12NSArray *result = [NSArray arrayWithContentsOfFile:fileName];NSLog(@\"%@\", result); 4.注意123// 只有以上列出的类型才能使用plist文件存储。// 存储时使用writeToFile: atomically:方法。 其中atomically表示是否需要先写入一个辅助文件，再把辅助文件拷贝到目标文件地址。这是更安全的写入文件方法，一般都写YES。// 读取时使用arrayWithContentsOfFile:方法。 Preference1.使用方法12345678910111213141516//1.获得NSUserDefaults文件NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];//2.向文件中写入内容[userDefaults setObject:@\"AAA\" forKey:@\"a\"];[userDefaults setBool:YES forKey:@\"sex\"];[userDefaults setInteger:21 forKey:@\"age\"];//2.1立即同步[userDefaults synchronize];//3.读取文件NSString *name = [userDefaults objectForKey:@\"a\"];BOOL sex = [userDefaults boolForKey:@\"sex\"];NSInteger age = [userDefaults integerForKey:@\"age\"];NSLog(@\"%@, %d, %ld\", name, sex, age); 2.注意123// 偏好设置是专门用来保存应用程序的配置信息的，一般不要在偏好设置中保存其他数据。// 如果没有调用synchronize方法，系统会根据I/O情况不定时刻地保存到文件中。所以如果需要立即写入文件的就必须调用synchronize方法。// 偏好设置会将所有数据保存到同一个文件中。即preference目录下的一个以此应用包名来命名的plist文件。 NSKeyedArchiver 归档在iOS中是另一种形式的序列化，只要遵循了NSCoding协议的对象都可以通过它实现序列化。由于决大多数支持存储数据的Foundation和Cocoa Touch类都遵循了NSCoding协议，因此，对于大多数类来说，归档相对而言还是比较容易实现的。 1.遵循NSCoding协议 NSCoding协议声明了两个方法，这两个方法都是必须实现的。一个用来说明如何将对象编码到归档中，另一个说明如何进行解档来获取一个新对象。 遵循协议和设置属性 123456//1.遵循NSCoding协议 @interface Person : NSObject //2.设置属性@property (strong, nonatomic) UIImage *avatar;@property (copy, nonatomic) NSString *name;@property (assign, nonatomic) NSInteger age;@end 实现协议方法 12345678910111213141516//解档- (id)initWithCoder:(NSCoder *)aDecoder &#123; if ([super init]) &#123; self.avatar = [aDecoder decodeObjectForKey:@\"avatar\"]; self.name = [aDecoder decodeObjectForKey:@\"name\"]; self.age = [aDecoder decodeIntegerForKey:@\"age\"]; &#125; return self;&#125;//归档- (void)encodeWithCoder:(NSCoder *)aCoder &#123; [aCoder encodeObject:self.avatar forKey:@\"avatar\"]; [aCoder encodeObject:self.name forKey:@\"name\"]; [aCoder encodeInteger:self.age forKey:@\"age\"];&#125; 特别注意 1如果需要归档的类是某个自定义类的子类时，就需要在归档和解档之前先实现父类的归档和解档方法。即 [super encodeWithCoder:aCoder] 和 [super initWithCoder:aDecoder] 方法; 2.使用需要把对象归档是调用NSKeyedArchiver的工厂方法 archiveRootObject: toFile:方法。 123456NSString *file = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject stringByAppendingPathComponent:@\"person.data\"];Person *person = [[Person alloc] init];person.avatar = self.avatarView.image;person.name = self.nameField.text;person.age = [self.ageField.text integerValue];[NSKeyedArchiver archiveRootObject:person toFile:file]; 需要从文件中解档对象就调用NSKeyedUnarchiver的一个工厂方法 unarchiveObjectWithFile: 即可。 12345678NSString *file = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject stringByAppendingPathComponent:@\"person.data\"];Person *person = [NSKeyedUnarchiver unarchiveObjectWithFile:file];if (person) &#123; self.avatarView.image = person.avatar; self.nameField.text = person.name; self.ageField.text = [NSString stringWithFormat:@\"%ld\", person.age];&#125; 3.注意123必须遵循并实现NSCoding协议保存文件的扩展名可以任意指定继承时必须先调用父类的归档解档方法 SQLite3 之前的所有存储方法，都是覆盖存储。如果想要增加一条数据就必须把整个文件读出来，然后修改数据后再把整个内容覆盖写入文件。所以它们都不适合存储大量的内容。 1.字段类型表面上·SQLite·将数据分为以下几种类型： 1234integer : 整数real : 实数（浮点数）text : 文本字符串blob : 二进制数据，比如文件，图片之类的 实际上SQLite是无类型的。即不管你在创表时指定的字段类型是什么，存储是依然可以存储任意类型的数据。而且在创表时也可以不指定字段类型。SQLite之所以什么类型就是为了良好的编程规范和方便开发人员交流，所以平时在使用时最好设置正确的字段类型！主键必须设置成integer 2. 准备工作准备工作就是导入依赖库啦，在iOS中要使用SQLite3，需要添加库文件：libsqlite3.dylib并导入主头文件，这是一个C语言的库，所以直接使用SQLite3还是比较麻烦的。 3.使用1.创建数据库并打开操作数据库之前必须先指定数据库文件和要操作的表，所以使用SQLite3，首先要打开数据库文件，然后指定或创建一张表。 12345678910111213141516171819202122232425262728293031// 打开数据库并创建一个表- (void)openDatabase &#123; //1.设置文件名 NSString *filename = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject stringByAppendingPathComponent:@\"person.db\"]; //2.打开数据库文件，如果没有会自动创建一个文件 NSInteger result = sqlite3_open(filename.UTF8String, &amp;_sqlite3); if (result == SQLITE_OK) &#123; NSLog(@\"打开数据库成功！\"); //3.创建一个数据库表 char *errmsg = NULL; sqlite3_exec(_sqlite3, \"CREATE TABLE IF NOT EXISTS t_person(id integer primary key autoincrement, name text, age integer)\", NULL, NULL, &amp;errmsg); if (errmsg) &#123; NSLog(@\"错误：%s\", errmsg); &#125; else &#123; NSLog(@\"创表成功！\"); &#125; &#125; else &#123; NSLog(@\"打开数据库失败！\"); &#125;&#125; 2.执行指令使用 sqlite3_exec() 方法可以执行任何SQL语句，比如创表、更新、插入和删除操作。但是一般不用它执行查询语句，因为它不会返回查询到的数据。 1234567891011121314151617181920// 往表中插入1000条数据- (void)insertData &#123; NSString *nameStr; NSInteger age; for (NSInteger i = 0; i &lt; 1000; i++) &#123; nameStr = [NSString stringWithFormat:@\"Bourne-%d\", arc4random_uniform(10000)]; age = arc4random_uniform(80) + 20; NSString *sql = [NSString stringWithFormat:@\"INSERT INTO t_person (name, age) VALUES('%@', '%ld')\", nameStr, age]; char *errmsg = NULL; sqlite3_exec(_sqlite3, sql.UTF8String, NULL, NULL, &amp;errmsg); if (errmsg) &#123; NSLog(@\"错误：%s\", errmsg); &#125; &#125; NSLog(@\"插入完毕！\"); &#125; 3.查询指令前面说过一般不使用 sqlite3_exec() 方法查询数据。因为查询数据必须要获得查询结果，所以查询相对比较麻烦。示例代码如下： 123456789101112131415161718192021222324252627// sqlite3_prepare_v2() : 检查sql的合法性// sqlite3_step() : 逐行获取查询结果，不断重复，直到最后一条记录// sqlite3_coloum_xxx() : 获取对应类型的内容，iCol对应的就是SQL语句中字段的顺序，从0开始。根据实际查询字段的属性，使用sqlite3_column_xxx取得对应的内容即可。// sqlite3_finalize() : 释放stmt// 从表中读取数据到数组中- (void)readData &#123; NSMutableArray *mArray = [NSMutableArray arrayWithCapacity:1000]; char *sql = \"select name, age from t_person;\"; sqlite3_stmt *stmt; NSInteger result = sqlite3_prepare_v2(_sqlite3, sql, -1, &amp;stmt, NULL); if (result == SQLITE_OK) &#123; while (sqlite3_step(stmt) == SQLITE_ROW) &#123; char *name = (char *)sqlite3_column_text(stmt, 0); NSInteger age = sqlite3_column_int(stmt, 1); //创建对象 Person *person = [Person personWithName:[NSString stringWithUTF8String:name] Age:age]; [mArray addObject:person]; &#125; self.dataList = mArray; &#125; sqlite3_finalize(stmt);&#125; 4.总结总得来说，SQLite3的使用还是比较麻烦的，因为都是些c语言的函数，理解起来有些困难。不过在一般开发过程中，使用的都是第三方开源库 FMDB，封装了这些基本的c语言方法，使得我们在使用时更加容易理解，提高开发效率。 FMDB1.简介 FMDB是iOS平台的SQLite数据库框架，它是以OC的方式封装了SQLite的C语言API，它相对于cocoa自带的C语言框架有如下的优点:使用起来更加面向对象，省去了很多麻烦、冗余的C语言代码对比苹果自带的Core Data框架，更加轻量级和灵活提供了多线程安全的数据库操作方法，有效地防止数据混乱 2.核心类FMDB有三个主要的类： 12345678// FMDatabase一个FMDatabase对象就代表一个单独的SQLite数据库，用来执行SQL语句// FMResultSet使用FMDatabase执行查询后的结果集// FMDatabaseQueue用于在多线程中执行多个查询或更新，它是线程安全的 3.打开数据库 和c语言框架一样，FMDB通过指定SQLite数据库文件路径来创建FMDatabase对象，但FMDB更加容易理解，使用起来更容易，使用之前一样需要导入sqlite3.dylib。打开数据库方法如下： 1234567NSString *path = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).firstObject stringByAppendingPathComponent:@\"person.db\"];FMDatabase *database = [FMDatabase databaseWithPath:path]; if (![database open]) &#123; NSLog(@\"数据库打开失败！\");&#125; 值得注意的是，Path的值可以传入以下三种情况： 123// 具体文件路径，如果不存在会自动创建// 空字符串@\"\"，会在临时目录创建一个空的数据库，当FMDatabase连接关闭时，数据库文件也被删除// nil，会创建一个内存中临时数据库，当FMDatabase连接关闭时，数据库会被销毁 4.更新 在FMDB中，除查询以外的所有操作，都称为“更新”, 如：create、drop、insert、update、delete等操作，使用executeUpdate:方法执行更新： 123456789101112//常用方法有以下 3 种： - (BOOL)executeUpdate:(NSString*)sql, ...- (BOOL)executeUpdateWithFormat:(NSString*)format, ...- (BOOL)executeUpdate:(NSString*)sql withArgumentsInArray:(NSArray *)arguments//示例[database executeUpdate:@\"CREATE TABLE IF NOT EXISTS t_person(id integer primary key autoincrement, name text, age integer)\"]; //或者 [database executeUpdate:@\"INSERT INTO t_person(name, age) VALUES(?, ?)\", @\"Bourne\", [NSNumber numberWithInt:42]]; 5.查询查询方法也有3种，使用起来相当简单： 123- (FMResultSet *)executeQuery:(NSString*)sql, ...- (FMResultSet *)executeQueryWithFormat:(NSString*)format, ...- (FMResultSet *)executeQuery:(NSString *)sql withArgumentsInArray:(NSArray *)arguments 查询示例： 123456789//1.执行查询FMResultSet *result = [database executeQuery:@\"SELECT * FROM t_person\"];//2.遍历结果集while ([result next]) &#123; NSString *name = [result stringForColumn:@\"name\"]; int age = [result intForColumn:@\"age\"];&#125; 6.线程安全 在多个线程中同时使用一个 FMDatabase 实例是不明智的。不要让多个线程分享同一个FMDatabase实例，它无法在多个线程中同时使用。 如果在多个线程中同时使用一个FMDatabase实例，会造成数据混乱等问题。所以，请使用 FMDatabaseQueue，它是线程安全的。以下是使用方法： 创建队列。 123456789101112131415161718192021222324FMDatabaseQueue *queue = [FMDatabaseQueue databaseQueueWithPath:aPath];// 使用队列[queue inDatabase:^(FMDatabase *database)&#123; [database executeUpdate:@\"INSERT INTO t_person(name, age) VALUES (?, ?)\", @\"Bourne_1\", [NSNumber numberWithInt:1]]; [database executeUpdate:@\"INSERT INTO t_person(name, age) VALUES (?, ?)\", @\"Bourne_2\", [NSNumber numberWithInt:2]]; [database executeUpdate:@\"INSERT INTO t_person(name, age) VALUES (?, ?)\", @\"Bourne_3\", [NSNumber numberWithInt:3]]; FMResultSet *result = [database executeQuery:@\"select * from t_person\"]; while([result next]) &#123; &#125; &#125;];// 而且可以轻松地把简单任务包装到事务里：[queue inTransaction:^(FMDatabase *database, BOOL *rollback) &#123; [database executeUpdate:@\"INSERT INTO t_person(name, age) VALUES (?, ?)\", @\"Bourne_1\", [NSNumber numberWithInt:1]]; [database executeUpdate:@\"INSERT INTO t_person(name, age) VALUES (?, ?)\", @\"Bourne_2\", [NSNumber numberWithInt:2]]; [database executeUpdate:@\"INSERT INTO t_person(name, age) VALUES (?, ?)\", @\"Bourne_3\", [NSNumber numberWithInt:3]]; FMResultSet *result = [database executeQuery:@\"select * from t_person\"]; while([result next]) &#123; &#125; //回滚 *rollback = YES; &#125;]; FMDatabaseQueue 后台会建立系列化的GCD队列，并执行你传给GCD队列的块。这意味着 你从多线程同时调用调用方法，GCD也会按它接收的块的顺序来执行了。","content":"<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/header/image/iOS%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-01.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>文章大纲，便于浏览</p>\n<ol>\n<li><a href=\"https://github.com/liberalisman/2018-Interview-Preparation#01-ios-app-startup-process\" target=\"_blank\" rel=\"external\">01-iOS程序启动过程</a></li>\n<li><a href=\"https://github.com/liberalisman/2018-Interview-Preparation#02-shallowcopy-deepcopy\" target=\"_blank\" rel=\"external\">02-浅拷贝-深拷贝</a></li>\n<li><a href=\"https://github.com/liberalisman/2018-Interview-Preparation#03-view的生命周期\" target=\"_blank\" rel=\"external\">03-View的生命周期</a></li>\n<li><a href=\"https://github.com/liberalisman/2018-Interview-Preparation#04-property\" target=\"_blank\" rel=\"external\">04-@property</a></li>\n<li><a href=\"https://github.com/liberalisman/iOS-Summary-Part1#05-事件传递和事件响应\" target=\"_blank\" rel=\"external\">05-事件传递和事件响应</a></li>\n<li><a href=\"https://github.com/liberalisman/iOS-Summary-Part1#06-kvc\" target=\"_blank\" rel=\"external\">06-KVC</a></li>\n<li><a href=\"https://github.com/liberalisman/iOS-Summary-Part1#07-kvo\" target=\"_blank\" rel=\"external\">07-KVO</a></li>\n<li><a href=\"https://github.com/liberalisman/iOS-Summary-Part1#08-ios数据持久化方案\" target=\"_blank\" rel=\"external\">08-iOS数据持久化方案</a></li>\n</ol>\n<h2 id=\"01-iOS-App-startup-process\"><a href=\"#01-iOS-App-startup-process\" class=\"headerlink\" title=\"01-iOS-App-startup-process\"></a>01-iOS-App-startup-process</h2><p>###一、启动完整过程</p>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B.png\" alt=\"\"></p>\n<p>1.<code>main</code>函数</p>\n<p>2.<code>UIApplicationMain</code>函数</p>\n<ul>\n<li>创建<code>UIApplication</code>对象</li>\n<li>创建<code>UIApplication的delegate</code>对象</li>\n</ul>\n<p>3.<code>delegate</code>对象开始处理(监听)系统事件(没有storyboard)</p>\n<ul>\n<li>程序启动完毕的时候, 就会调用代理的:<code>didFinishLaunchingWithOptions:</code>方法</li>\n<li>在<code>application:didFinishLaunchingWithOptions</code>:中创建<code>UIWindow</code> 创建和设置<code>UIWindow</code>的<code>rootViewController</code></li>\n<li>显示窗口</li>\n</ul>\n<p>4.根据<code>Info.plist</code>获得最主要<code>storyboard</code>的文件名,加载最主要的<code>storyboard</code>(有storyboard)</p>\n<ul>\n<li>创建<code>UIWindow</code></li>\n<li>创建和设置<code>UIWindow</code>的<code>rootViewController</code></li>\n<li>显示窗口</li>\n</ul>\n<p>###二、程序启动原理</p>\n<p>1.<code>main</code>函数中执行了一个<code>UIApplicationMain</code>这个函数</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">UIApplicationMain</span>(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[], <span class=\"built_in\">NSString</span> *principalClassName, <span class=\"built_in\">NSString</span> *delegateClassName);</div><div class=\"line\"></div><div class=\"line\">argc、argv：直接传递给<span class=\"built_in\">UIApplicationMain</span>进行相关处理即可</div></pre></td></tr></table></figure>\n<p>2.<code>principalClassName</code>：指定应用程序类名（app的象征），该类必须是<code>UIApplication</code>(或子类)。如果为<code>nil</code>,则用<code>UIApplication</code>类作为默认值</p>\n<p>3.<code>delegateClassName</code>：指定应用程序的代理类，该类必须遵守<code>UIApplicationDelegate</code>协议</p>\n<p>4.<code>UIApplicationMain</code>函数会根据<code>principalClassName</code>创建<code>UIApplication</code>对象，根据<code>delegateClassName</code>创建一个<code>delegate</code>对象，并将该<code>delegate</code>对象赋值给<code>UIApplication</code>对象中的<code>delegate</code>属性</p>\n<p>5.接着会建立应用程序的<code>Main Runloop</code>（事件循环），进行事件的处理(首先会在程序完毕后调用<code>delegate</code>对象的<code>application:didFinishLaunchingWithOptions</code>:方法)</p>\n<p>程序正常退出时<code>UIApplicationMain</code>函数才返回</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> main(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> * argv[])&#123; <span class=\"keyword\">@autoreleasepool</span> &#123; </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* argc: 系统或者用户传入的参数个数</div><div class=\"line\">* argv: 系统或者用户传入的实际参数 </div><div class=\"line\">* 1.根据传入的第三个参数创建UIApplication对象 </div><div class=\"line\">* 2.根据传入的第四个产生创建UIApplication对象的代理</div><div class=\"line\">* 3.设置刚刚创建出来的代理对象为UIApplication的代理 </div><div class=\"line\">* 4.开启一个事件循环 </div><div class=\"line\">**/ </div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">UIApplicationMain</span>(argc, argv, <span class=\"string\">@\"UIApplication\"</span>, <span class=\"string\">@\"YYAppDelegate\"</span>); &#125;&#125;</div></pre></td></tr></table></figure>\n<p>启动与代理：<br><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E4%B8%8E%E4%BB%A3%E7%90%86.png\" alt=\"\"></p>\n<h2 id=\"02-ShallowCopy-DeepCopy\"><a href=\"#02-ShallowCopy-DeepCopy\" class=\"headerlink\" title=\"02-ShallowCopy-DeepCopy\"></a>02-ShallowCopy-DeepCopy</h2><p>简要总结一下什么是浅拷贝，什么是深拷贝</p>\n<blockquote>\n<p>深拷贝就是内容拷贝</p>\n<p>浅拷贝就是指针拷贝</p>\n</blockquote>\n<p>###一.系统对象的 copy/mutableCopy</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *string = <span class=\"string\">@\"LiMing\"</span>;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSString</span> *copyString = [string <span class=\"keyword\">copy</span>];</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSString</span> *mutableString = [string mutableCopy];</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"string = %p\"</span>,string);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"copyString = %p\"</span>,copyString);</div><div class=\"line\">    </div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"mutableString = %p \"</span>,mutableString);</div><div class=\"line\"></div><div class=\"line\">结论：</div><div class=\"line\"><span class=\"number\">1.</span>string 和 copyString 他们只是二个不同的指针，指向内存中的同一块地址，<span class=\"keyword\">copy</span> 只是指针复制</div><div class=\"line\"><span class=\"number\">2.</span>string 和 mutableString 打印出来的地址不同，是因为两个指针指向的地址本就不同，mutableCopy 是内容复制</div><div class=\"line\"></div><div class=\"line\">注意：其他对象 <span class=\"built_in\">NSArray</span> 、<span class=\"built_in\">NSMutableArray</span> 、<span class=\"built_in\">NSDictionary</span> 、<span class=\"built_in\">NSMutableDictionary</span> 一样适用</div></pre></td></tr></table></figure>\n<p>规律可以从这张图看出来</p>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E6%B5%85%E6%8B%B7%E8%B4%9D-01\" alt=\"\"></p>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E6%B5%85%E6%8B%B7%E8%B4%9D-02\" alt=\"\"></p>\n<p>###二.自定义对象实现 Copy-MutableCopy</p>\n<ul>\n<li>copy</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">GZQPerson *person = [[GZQPerson alloc] init];</div><div class=\"line\">person.age = <span class=\"number\">20</span>;</div><div class=\"line\">person.name = <span class=\"string\">@\"GZQ\"</span>;</div><div class=\"line\">GZQPerson *copyP = [person <span class=\"keyword\">copy</span>];  <span class=\"comment\">// 这里崩溃</span></div></pre></td></tr></table></figure>\n<p>崩溃：<br><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E6%B5%85%E6%8B%B7%E8%B4%9D-03.png\" alt=\"\"></p>\n<p>看崩溃信息GZQPerson应该先实现：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span>)copyWithZone:(<span class=\"built_in\">NSZone</span> *)zone;</div></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"GZQPerson.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GZQPerson</span> ()&lt;<span class=\"title\">NSCopying</span>,<span class=\"title\">NSMutableCopying</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">GZQPerson</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)copyWithZone:(<span class=\"built_in\">NSZone</span> *)zone &#123;</div><div class=\"line\"></div><div class=\"line\">    GZQPerson *person = [[[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>] allocWithZone:zone] init];</div><div class=\"line\">    person.age = <span class=\"keyword\">self</span>.age;</div><div class=\"line\">    person.name = <span class=\"keyword\">self</span>.name;</div><div class=\"line\">    <span class=\"keyword\">return</span> person;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)mutableCopyWithZone:(<span class=\"built_in\">NSZone</span> *)zone &#123;</div><div class=\"line\"></div><div class=\"line\">    GZQPerson *person = [[[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>] allocWithZone:zone] init];</div><div class=\"line\">    person.age = <span class=\"keyword\">self</span>.age;</div><div class=\"line\">    person.name = <span class=\"keyword\">self</span>.name;</div><div class=\"line\">    <span class=\"keyword\">return</span> person;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"ViewController.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"GZQPerson.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">ViewController</span> ()</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">ViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad &#123;</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\"></div><div class=\"line\">    GZQPerson *person = [[GZQPerson alloc] init];</div><div class=\"line\">    person.age = <span class=\"number\">20</span>;</div><div class=\"line\">    person.name = <span class=\"string\">@\"GZQ\"</span>;</div><div class=\"line\">    GZQPerson *copyP = [person <span class=\"keyword\">copy</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"copyP=%p\"</span>,copyP);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person=%p\"</span>,person);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person=%p\"</span>,copyP.name);</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"person=%p\"</span>,person.name);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E6%B5%85%E6%8B%B7%E8%B4%9D-04.png\" alt=\"\"></p>\n<p>可以看出虽然指针的地址不同，但是存储的地址是一致的。</p>\n<p>###三.copy 本质</p>\n<p><code>property copy</code> 实际上就对name干了这个：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">property <span class=\"keyword\">copy</span> 实际上就对name干了这个：</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setName:(<span class=\"built_in\">NSString</span> *)name</div><div class=\"line\">&#123;</div><div class=\"line\">    _name = [name <span class=\"keyword\">copy</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>strong</code>是不执行<code>Copy</code>操作的</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSString</span> *name;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NSMutableString</span> *string = [<span class=\"built_in\">NSMutableString</span> stringWithFormat:<span class=\"string\">@\"深拷贝-浅拷贝\"</span>];</div><div class=\"line\"></div><div class=\"line\">GZQPerson *person = [[GZQPerson alloc] init];</div><div class=\"line\">person.name = string;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以改变person.name的值，因为其内部没有生成新的对象</span></div><div class=\"line\">[string appendString:<span class=\"string\">@\"LALALA\"</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"name = %@\"</span>, person.name);</div></pre></td></tr></table></figure>\n<h2 id=\"03-View的生命周期\"><a href=\"#03-View的生命周期\" class=\"headerlink\" title=\"03-View的生命周期\"></a>03-View的生命周期</h2><ul>\n<li>读懂这一张图即可<br><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/View%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"04-property\"><a href=\"#04-property\" class=\"headerlink\" title=\"04-@property\"></a>04-@property</h2><blockquote>\n<p>@property 的本质是什么？ivar、getter、setter 是如何生成并添加到这个类中的</p>\n</blockquote>\n<p>@property 的本质.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> = ivar + <span class=\"keyword\">getter</span> + <span class=\"keyword\">setter</span>;</div></pre></td></tr></table></figure>\n<p>下面解释下：</p>\n<blockquote>\n<p>“属性” (property)有两大概念：ivar（实例变量）、存取方法（access method ＝ getter + setter）。</p>\n<p>“属性” (property)作为 Objective-C 的一项特性，主要的作用就在于封装对象中的数据。 Objective-C 对象通常会把其所需要的数据保存为各种实例变量。实例变量一般通过“存取方法”(access method)来访问。其中，“获取方法” (getter)用于读取变量值，而“设置方法” (setter)用于写入变量值。这个概念已经定型，并且经由“属性”这一特性而成为 Objective-C 2.0 的一部分。 而在正规的 Objective-C 编码风格中，存取方法有着严格的命名规范。 正因为有了这种严格的命名规范，所以 Objective-C 这门语言才能根据名称自动创建出存取方法。其实也可以把属性当做一种关键字，其表示:</p>\n</blockquote>\n<p>编译器会自动写出一套存取方法，用以访问给定类型中具有给定名称的变量。 所以你也可以这么说：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> = <span class=\"keyword\">getter</span> + <span class=\"keyword\">setter</span>;</div></pre></td></tr></table></figure>\n<p>例如下面这个类：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSString</span> *firstName;</div><div class=\"line\"><span class=\"keyword\">@property</span> <span class=\"built_in\">NSString</span> *lastName;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>上述代码写出来的类与下面这种写法等效：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span></span></div><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)firstName;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setFirstName:(<span class=\"built_in\">NSString</span> *)firstName;</div><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)lastName;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)setLastName:(<span class=\"built_in\">NSString</span> *)lastName;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p><code>property</code>在<code>runtime</code>中是<code>objc_property_t</code>定义如下:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_property *objc_property_t;</div></pre></td></tr></table></figure>\n<p>而<code>objc_property</code>是一个结构体，包括<code>name</code>和<code>attributes</code>，定义如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> property_t &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *attributes;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>而<code>attributes</code>本质是<code>objc_property_attribute_t</code>，定义了<code>property</code>的一些属性，定义如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/// Defines a property attribute</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;           <span class=\"comment\">/**&lt; The name of the attribute */</span></div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *value;          <span class=\"comment\">/**&lt; The value of the attribute (usually empty) */</span></div><div class=\"line\">&#125; objc_property_attribute_t;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>而attributes的具体内容是什么呢？其实，包括：类型，原子性，内存语义和对应的实例变量。</p>\n</blockquote>\n<p>例如：我们定义一个<code>string</code>的<code>property</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span> *string;</div></pre></td></tr></table></figure>\n<p>通过 <code>property_getAttributes(property)</code>获取到<code>attributes</code>并打印出来之后的结果为</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">T<span class=\"string\">@\"NSString\"</span>,C,N,V_string</div></pre></td></tr></table></figure>\n<p>其中<code>T</code>就代表类型，可参阅<code>Type Encodings</code>，<code>C</code>就代表<code>Copy</code>，<code>N</code>代表<code>nonatomic</code>，<code>V</code>就代表对于的实例变量。</p>\n<blockquote>\n<p>ivar、getter、setter 是如何生成并添加到这个类中的?</p>\n</blockquote>\n<p><strong>“自动合成”( autosynthesis)</strong></p>\n<blockquote>\n<p>完成属性定义后，编译器会自动编写访问这些属性所需的方法，此过程叫做“自动合成”(autosynthesis)。需要强调的是，这个过程由编译 器在编译期执行，所以编辑器里看不到这些“合成方法”(synthesized method)的源代码。除了生成方法代码 getter、setter 之外，编译器还要自动向类中添加适当类型的实例变量，并且在属性名前面加下划线，以此作为实例变量的名字。在前例中，会生成两个实例变量，其名称分别为 _firstName 与 _lastName。也可以在类的实现代码里通过@synthesize 语法来指定实例变量的名字.</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></div><div class=\"line\"><span class=\"keyword\">@synthesize</span> firstName = _myFirstName;</div><div class=\"line\"><span class=\"keyword\">@synthesize</span> lastName = _myLastName;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p><strong>我为了搞清属性是怎么实现的,曾经反编译过相关的代码,他大致生成了五个东西</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1.</span> OBJC_IVAR_$类名$属性名称 ：该属性的“偏移量” (offset)，这个偏移量是“硬编码” (hardcode)，表示该变量距离存放对象的内存区域的起始地址有多远。</div><div class=\"line\"><span class=\"number\">2.</span> <span class=\"keyword\">setter</span> 与 <span class=\"keyword\">getter</span> 方法对应的实现函数</div><div class=\"line\"><span class=\"number\">3.</span> ivar_list ：成员变量列表</div><div class=\"line\"><span class=\"number\">4.</span> method_list ：方法列表</div><div class=\"line\"><span class=\"number\">5.</span> prop_list ：属性列表</div><div class=\"line\">也就是说我们每次在增加一个属性,系统都会在 ivar_list 中添加一个成员变量的描述,在 method_list 中增加 <span class=\"keyword\">setter</span> 与 <span class=\"keyword\">getter</span> 方法的描述,在属性列表中增加一个属性的描述,然后计算该属性在对象中的偏移量,然后给出 <span class=\"keyword\">setter</span> 与 <span class=\"keyword\">getter</span> 方法对应的实现,在 <span class=\"keyword\">setter</span> 方法中从偏移量的位置开始赋值,在 <span class=\"keyword\">getter</span> 方法中从偏移量开始取值,为了能够读取正确字节数,系统对象偏移量的指针类型进行了类型强转.</div></pre></td></tr></table></figure>\n<p><strong>属性可以拥有的特质分为四类:</strong></p>\n<ul>\n<li><p>原子性— nonatomic 特质,在默认情况下，由编译器合成的方法会通过锁定机制确保其原子性(atomicity)。如果属性具备 nonatomic 特质，则不使用自旋锁。请注意，尽管没有名为“atomic”的特质(如果某属性不具备 nonatomic 特质，那它就是“原子的” ( atomic) )，但是仍然可以在属性特质中写明这一点，编译器不会报错。若是自己定义存取方法，那么就应该遵从与属性特质相符的原子性。</p>\n</li>\n<li><p>读/写权限—readwrite(读写)、readonly (只读)</p>\n</li>\n<li><p>内存管理语义—assign、strong、 weak、unsafe_unretained、copy</p>\n</li>\n<li>方法名—getter=<name> 、setter=<name></name></name></li>\n</ul>\n<p><strong>getter=<name>的样式：</name></strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">getter</span>=isOn) <span class=\"built_in\">BOOL</span> on;</div><div class=\"line\">     </div><div class=\"line\">(`<span class=\"keyword\">setter</span>=`这种不常用，也不推荐使用。故不在这里给出写法。）</div></pre></td></tr></table></figure>\n<p><strong>setter=<name>一般用在特殊的情境下，比如</name></strong>：</p>\n<blockquote>\n<p>在数据反序列化、转模型的过程中，服务器返回的字段如果以 init 开头，所以你需要定义一个 init 开头的属性，但默认生成的 setter 与 getter 方法也会以 init 开头，而编译器会把所有以 init 开头的方法当成初始化方法，而初始化方法只能返回 self 类型，因此编译器会报错。</p>\n</blockquote>\n<p><strong>这时你就可以使用下面的方式来避免编译器报错：</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>, <span class=\"keyword\">getter</span>=p_initBy, <span class=\"keyword\">setter</span>=setP_initBy:)<span class=\"built_in\">NSString</span> *initBy;</div></pre></td></tr></table></figure>\n<p><strong>另外也可以用关键字进行特殊说明，来避免编译器报错</strong>：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">@property</span>(<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readwrite</span>, <span class=\"keyword\">copy</span>, <span class=\"keyword\">null_resettable</span>) <span class=\"built_in\">NSString</span> *initBy;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)initBy __attribute__((objc_method_family(none)));</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">1.</span> 不常用的：<span class=\"keyword\">nonnull</span>,<span class=\"keyword\">null_resettable</span>,<span class=\"keyword\">nullable</span></div><div class=\"line\"></div><div class=\"line\">注意：很多人会认为如果属性具备 <span class=\"keyword\">nonatomic</span> 特质，则不使用 “同步锁”。其实在属性设置方法中使用的是自旋锁，自旋锁相关代码如下：</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> reallySetProperty(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, <span class=\"keyword\">id</span> newValue, ptrdiff_t offset, <span class=\"keyword\">bool</span> atomic, <span class=\"keyword\">bool</span> <span class=\"keyword\">copy</span>, <span class=\"keyword\">bool</span> mutableCopy)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (offset == <span class=\"number\">0</span>) </div><div class=\"line\">    &#123;</div><div class=\"line\">        object_setClass(<span class=\"keyword\">self</span>, newValue);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">id</span> oldValue;</div><div class=\"line\">    <span class=\"keyword\">id</span> *slot = (<span class=\"keyword\">id</span>*) ((<span class=\"keyword\">char</span>*)<span class=\"keyword\">self</span> + offset);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">copy</span>) </div><div class=\"line\">    &#123;</div><div class=\"line\">        newValue = [newValue copyWithZone:<span class=\"literal\">nil</span>];</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mutableCopy) </div><div class=\"line\">    &#123;</div><div class=\"line\">        newValue = [newValue mutableCopyWithZone:<span class=\"literal\">nil</span>];</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">else</span> </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (*slot == newValue) <span class=\"keyword\">return</span>;</div><div class=\"line\">        newValue = objc_retain(newValue);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!atomic) </div><div class=\"line\">    &#123;</div><div class=\"line\">        oldValue = *slot;</div><div class=\"line\">        *slot = newValue;</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">else</span> </div><div class=\"line\">    &#123;</div><div class=\"line\">        spinlock_t&amp; slotlock = PropertyLocks[slot];</div><div class=\"line\">        slotlock.lock();</div><div class=\"line\">        oldValue = *slot;</div><div class=\"line\">        *slot = newValue;        </div><div class=\"line\">        slotlock.unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    objc_release(oldValue);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> objc_setProperty(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd, ptrdiff_t offset, <span class=\"keyword\">id</span> newValue, <span class=\"built_in\">BOOL</span> atomic, <span class=\"keyword\">signed</span> <span class=\"keyword\">char</span> shouldCopy) </div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">copy</span> = (shouldCopy &amp;&amp; shouldCopy != MUTABLE_COPY);</div><div class=\"line\">    <span class=\"keyword\">bool</span> mutableCopy = (shouldCopy == MUTABLE_COPY);</div><div class=\"line\">    reallySetProperty(<span class=\"keyword\">self</span>, _cmd, newValue, offset, atomic, <span class=\"keyword\">copy</span>, mutableCopy);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"05-事件传递和事件响应\"><a href=\"#05-事件传递和事件响应\" class=\"headerlink\" title=\"05-事件传递和事件响应\"></a>05-事件传递和事件响应</h2><p>这部分知识如果自己总结，篇幅较长。可以参考<a href=\"http://www.jianshu.com/p/2e074db792ba\" target=\"_blank\" rel=\"external\">以下文章</a></p>\n<h2 id=\"06-KVC\"><a href=\"#06-KVC\" class=\"headerlink\" title=\"06-KVC\"></a>06-KVC</h2><p><strong>Key-Value Coding (KVC)</strong></p>\n<blockquote>\n<p>KVC（Key-value coding）键值编码，单看这个名字可能不太好理解。其实翻译一下就很简单了，就是指iOS的开发中，可以允许开发者通过Key名直接访问对象的属性，或者给对象的属性赋值。而不需要调用明确的存取方法。这样就可以在运行时动态在访问和修改对象的属性。而不是在编译时确定，这也是iOS开发中的黑魔法之一。很多高级的iOS开发技巧都是基于KVC实现的。目前网上关于KVC的文章在非常多，有的只是简单地说了下用法，有的讲得深入但是在使用场景和最佳实践没有说明，我写下这遍文章就是给大家详解一个最完整最详细的KVC。</p>\n</blockquote>\n<p><strong>KVC在iOS中的定义</strong></p>\n<p>无论是<code>Swift</code>还是<code>Objective-C</code>，<code>KVC</code>的定义都是对<code>NSObject</code>的扩展来实现的(<code>Objective-C</code>中有个显式的<code>NSKeyValueCoding</code>类别名，而<code>Swift</code>没有，也不需要)所以对于所有继承了<code>NSObject</code>在类型，都能使用<code>KVC</code>(一些纯<code>Swift</code>类和结构体是不支持<code>KVC</code>的)，下面是<code>KVC</code>最为重要的四个方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)valueForKey:(<span class=\"built_in\">NSString</span> *)key;                          <span class=\"comment\">//直接通过Key来取值</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setValue:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)value forKey:(<span class=\"built_in\">NSString</span> *)key;          <span class=\"comment\">//通过Key来设值</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)valueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath;                  <span class=\"comment\">//通过KeyPath来取值</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setValue:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)value forKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath;  <span class=\"comment\">//通过KeyPath来设值</span></div></pre></td></tr></table></figure>\n<p>当然<code>NSKeyValueCoding</code>类别中还有其他的一些方法，下面列举一些</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"built_in\">BOOL</span>)accessInstanceVariablesDirectly;</div><div class=\"line\"><span class=\"comment\">//默认返回YES，表示如果没有找到Set&lt;Key&gt;方法的话，会按照_key，_iskey，key，iskey的顺序搜索成员，设置成NO就不这样搜索</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)validateValue:(<span class=\"keyword\">inout</span> <span class=\"keyword\">id</span> __<span class=\"keyword\">nullable</span> * __<span class=\"keyword\">nonnull</span>)ioValue forKey:(<span class=\"built_in\">NSString</span> *)inKey error:(<span class=\"keyword\">out</span> <span class=\"built_in\">NSError</span> **)outError;</div><div class=\"line\"><span class=\"comment\">//KVC提供属性值确认的API，它可以用来检查set的值是否正确、为不正确的值做一个替换值或者拒绝设置新值并返回错误原因。</span></div><div class=\"line\">- (<span class=\"built_in\">NSMutableArray</span> *)mutableArrayValueForKey:(<span class=\"built_in\">NSString</span> *)key;</div><div class=\"line\"><span class=\"comment\">//这是集合操作的API，里面还有一系列这样的API，如果属性是一个NSMutableArray，那么可以用这个方法来返回</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)valueForUndefinedKey:(<span class=\"built_in\">NSString</span> *)key;</div><div class=\"line\"><span class=\"comment\">//如果Key不存在，且没有KVC无法搜索到任何和Key有关的字段或者属性，则会调用这个方法，默认是抛出异常</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setValue:(<span class=\"keyword\">nullable</span> <span class=\"keyword\">id</span>)value forUndefinedKey:(<span class=\"built_in\">NSString</span> *)key;</div><div class=\"line\"><span class=\"comment\">//和上一个方法一样，只不过是设值。</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setNilValueForKey:(<span class=\"built_in\">NSString</span> *)key;</div><div class=\"line\"><span class=\"comment\">//如果你在SetValue方法时面给Value传nil，则会调用这个方法</span></div><div class=\"line\">- (<span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, <span class=\"keyword\">id</span>&gt; *)dictionaryWithValuesForKeys:(<span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *)keys;</div><div class=\"line\"><span class=\"comment\">//输入一组key,返回该组key对应的Value，再转成字典返回，用于将Model转到字典。</span></div></pre></td></tr></table></figure>\n<p>上面的这些方法在碰到特殊情况或者有特殊需求还是会用到的，所以也是可以了解一下。后面的代码示例会有讲到其中的一些方法。<br>同时苹果对一些容器类比如NSArray或者NSSet等，KVC有着特殊的实现。建议有基础的或者英文好的开发者直接去看苹果的官方文档，相信你会对KVC的理解更上一个台阶。</p>\n<p><strong>KVC是怎么寻找Key的</strong></p>\n<p>KVC是怎么使用的，我相信绝大多数的开发者都很清楚，我在这里就不再写简单的使用KVC来设值和取值的代码了，首页我们来探讨KVC在内部是按什么样的顺序来寻找key的。<br>当调用<code>setValue：</code>属性值 <code>forKey：``@”name“</code>的代码时，底层的执行机制如下：</p>\n<ul>\n<li><p>程序优先调用<code>set&lt;Key&gt;:</code>属性值方法，代码通过<code>setter</code>方法完成设置。注意，这里的<code>&lt;key&gt;</code>是指成员变量名，首字母大清写要符合<code>KVC</code>的全名规则，下同</p>\n</li>\n<li><p>如果没有找到<code>setName：</code>方法，<code>KVC</code>机制会检查<code>+ (BOOL)accessInstanceVariablesDirectly</code>方法有没有返回<code>YES</code>，默认该方法会返回<code>YES</code>，如果你重写了该方法让其返回<code>NO</code>的话，那么在这一步KVC会执行<code>setValue：forUNdefinedKey：</code>方法，不过一般开发者不会这么做。所以KVC机制会搜索该类里面有没有名为<code>_&lt;key&gt;</code>的成员变量，无论该变量是在类接口部分定义，还是在类实现部分定义，也无论用了什么样的访问修饰符，只在存在以<code>_&lt;key&gt;</code>命名的变量，<code>KVC</code>都可以对该成员变量赋值。</p>\n</li>\n<li><p>如果该类即没有<code>set&lt;Key&gt;：</code>方法，也没有<code>_&lt;key&gt;</code>成员变量，<code>KVC</code>机制会搜索<code>_is&lt;Key&gt;</code>的成员变量，</p>\n</li>\n<li><p>和上面一样，如果该类即没有<code>set&lt;Key&gt;：</code>方法，也没有<code>_&lt;key&gt;</code>和<code>_is&lt;Key&gt;</code>成员变量，<code>KVC</code>机制再会继续搜索<code>&lt;key&gt;</code>和<code>is&lt;Key&gt;</code>的成员变量。再给它们赋值。</p>\n</li>\n<li><p>如果上面列出的方法或者成员变量都不存在，系统将会执行该对象的<code>setValue：forUNdefinedKey：</code>方法，默认是抛出异常。</p>\n</li>\n</ul>\n<p>如果开发者想让这个类禁用<code>KVC</code>里，那么重写<code>+ (BOOL)accessInstanceVariablesDirectly</code>方法让其返回NO即可，这样的话如果<code>KVC</code>没有找到<code>set&lt;Key&gt;:</code>属性名时，会直接用<code>setValue：forUNdefinedKey：</code>方法。</p>\n<h2 id=\"07-KVO\"><a href=\"#07-KVO\" class=\"headerlink\" title=\"07-KVO\"></a>07-KVO</h2><p><code>KVO</code>，全称为<code>Key-Value Observing</code>，是iOS中的一种设计模式，用于检测对象的某些属性的实时变化情况并作出响应。当应用场景比较复杂时，多个地方存在crash的危险。</p>\n<p>首先，假设我们的目标是在一个<code>UITableViewController</code>内对<code>tableview</code>的<code>contentOffset</code>进行实时监测，很容易地使用<code>KVO</code>来实现为。</p>\n<p>在初始化方法中加入：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">[_tableView addObserver:<span class=\"keyword\">self</span> forKeyPath:<span class=\"string\">@\"contentOffset\"</span> options:<span class=\"built_in\">NSKeyValueObservingOptionNew</span> context:<span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在dealloc中移除KVO监听：</span></div><div class=\"line\">[_tableView removeObserver:<span class=\"keyword\">self</span> forKeyPath:<span class=\"string\">@\"contentOffset\"</span> context:<span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 添加默认的响应回调方法：</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)observeValueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath </div><div class=\"line\">                      ofObject:(<span class=\"keyword\">id</span>)object</div><div class=\"line\">                        change:(<span class=\"built_in\">NSDictionary</span> *)change </div><div class=\"line\">                       context:(<span class=\"keyword\">void</span> *)context</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> doSomethingWhenContentOffsetChanges];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>好了，<code>KVO</code>实现就到此完美结束了，开玩笑，肯定没这么简单的，这样的代码太粗糙了，当你在<code>controller</code>中添加多个<code>KVO</code>时，所有的回调都是走同上述函数，那就必须对触发回调函数的来源进行判断。判断如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)observeValueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath </div><div class=\"line\">                      ofObject:(<span class=\"keyword\">id</span>)object</div><div class=\"line\">                        change:(<span class=\"built_in\">NSDictionary</span> *)change </div><div class=\"line\">                       context:(<span class=\"keyword\">void</span> *)context</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (object == _tableView &amp;&amp; [keyPath isEqualToString:<span class=\"string\">@\"contentOffset\"</span>]) </div><div class=\"line\">    &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> doSomethingWhenContentOffsetChanges];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你以为这样就结束了吗？答案是否定的！我们假设当前类(在例子中为<code>UITableViewController</code>)还有父类，并且父类也有自己绑定了一些其他<code>KVO</code>呢？我们看到，上述回调函数体中只有一个判断，如果这个<code>if</code>不成立，这次<code>KVO</code>事件的触发就会到此中断了。但事实上，若当前类无法捕捉到这个<code>KVO</code>，那很有可能是在他的<code>superClass</code>，或者<code>super-superClass...</code>中，上述处理砍断了这个链。合理的处理方式应该是这样的：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)observeValueForKeyPath:(<span class=\"built_in\">NSString</span> *)keyPath </div><div class=\"line\">                      ofObject:(<span class=\"keyword\">id</span>)object</div><div class=\"line\">                        change:(<span class=\"built_in\">NSDictionary</span> *)change </div><div class=\"line\">                       context:(<span class=\"keyword\">void</span> *)context</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (object == _tableView &amp;&amp; [keyPath isEqualToString:<span class=\"string\">@\"contentOffset\"</span>]) </div><div class=\"line\">    &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> doSomethingWhenContentOffsetChanges];</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">else</span> </div><div class=\"line\">    &#123;</div><div class=\"line\">        [<span class=\"keyword\">super</span> observeValueForKeyPath:keyPath ofObject:object change:change context:context];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样就结束了吗？答案仍旧是否定的。潜在的问题有可能出现在<code>dealloc</code>中对<code>KVO</code>的注销上。<code>KVO</code>的一种缺陷(其实不能称为缺陷，应该称为特性)是，当对同一个<code>keypath</code>进行两次<code>removeObserver</code>时会导致程序<code>crash</code>，这种情况常常出现在父类有一个<code>kvo</code>，父类在<code>dealloc</code>中<code>remove</code>了一次，子类又<code>remove</code>了一次的情况下。不要以为这种情况很少出现！当你封装<code>framework</code>开源给别人用或者多人协作开发时是有可能出现的，而且这种<code>crash</code>很难发现。不知道你发现没，目前的代码中<code>context</code>字段都是<code>nil</code>，那能否利用该字段来标识出到底<code>kvo</code>是<code>superClass</code>注册的，还是<code>self</code>注册的？</p>\n<p>回答是可以的。我们可以分别在父类以及本类中定义各自的<code>context</code>字符串，比如在本类中定义<code>context</code>为<code>@&quot;ThisIsMyKVOContextNotSuper&quot;</code>;然后在<code>dealloc</code>中<code>remove observer</code>时指定移除的自身添加的<code>observer</code>。这样iOS就能知道移除的是自己的<code>kvo</code>，而不是父类中的<code>kvo</code>，避免二次<code>remove</code>造成<code>crash</code>。</p>\n<h2 id=\"08-iOS数据持久化方案\"><a href=\"#08-iOS数据持久化方案\" class=\"headerlink\" title=\"08-iOS数据持久化方案\"></a>08-iOS数据持久化方案</h2><h3 id=\"存储方案\"><a href=\"#存储方案\" class=\"headerlink\" title=\"存储方案\"></a>存储方案</h3><ul>\n<li>plist文件（属性列表）</li>\n<li>preference（偏好设置）</li>\n<li>NSKeyedArchiver（归档）</li>\n<li>SQLite 3</li>\n<li>CoreData</li>\n</ul>\n<h3 id=\"沙盒\"><a href=\"#沙盒\" class=\"headerlink\" title=\"沙盒\"></a>沙盒</h3><blockquote>\n<p>iOS程序默认情况下只能访问程序自己的目录，这个目录被称为“沙盒”。</p>\n</blockquote>\n<h4 id=\"1-结构\"><a href=\"#1-结构\" class=\"headerlink\" title=\"1.结构\"></a>1.结构</h4><p>沙盒的目录结构如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"应用程序包\"</span></div><div class=\"line\">Documents</div><div class=\"line\">Library</div><div class=\"line\">    Caches</div><div class=\"line\">    Preferences</div><div class=\"line\">tmp</div></pre></td></tr></table></figure>\n<h4 id=\"2-目录特性\"><a href=\"#2-目录特性\" class=\"headerlink\" title=\"2.目录特性\"></a>2.目录特性</h4><blockquote>\n<p>虽然沙盒中有这么多文件夹，但是每个文件夹都不尽相同，都有各自的特性。所以在选择存放目录时，一定要认真选择适合的目录。</p>\n</blockquote>\n<p>“应用程序包”: 这里面存放的是应用程序的<strong>源文件</strong>，包括<strong>资源文件</strong>和<strong>可执行文件</strong>。</p>\n<ul>\n<li>Documents: 最常用的目录，iTunes同步该应用时会同步此文件夹中的内容，适合存储重要数据。</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *path = [[<span class=\"built_in\">NSBundle</span> mainBundle] bundlePath];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, path);</div></pre></td></tr></table></figure>\n<ul>\n<li>Library/Caches: iTunes不会同步此文件夹，适合存储体积大，不需要备份的非重要数据。</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *path = <span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>).firstObject;</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, path);</div></pre></td></tr></table></figure>\n<ul>\n<li>Library/Preferences: iTunes同步该应用时会同步此文件夹中的内容，通常保存应用的设置信息。</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *path = <span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSCachesDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>).firstObject;</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, path);</div></pre></td></tr></table></figure>\n<ul>\n<li>tmp: iTunes不会同步此文件夹，系统可能在应用没运行时就删除该目录下的文件，所以此目录适合保存应用中的一些临时文件，用完就删除。</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *path = <span class=\"built_in\">NSTemporaryDirectory</span>();</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, path);</div></pre></td></tr></table></figure>\n<h3 id=\"plist文件\"><a href=\"#plist文件\" class=\"headerlink\" title=\"plist文件\"></a>plist文件</h3><blockquote>\n<p>plist文件是将某些特定的类，通过XML文件的方式保存在目录中。</p>\n</blockquote>\n<p>可以被序列化的类型只有如下几种：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span>;</div><div class=\"line\"><span class=\"built_in\">NSMutableArray</span>;</div><div class=\"line\"><span class=\"built_in\">NSDictionary</span>;</div><div class=\"line\"><span class=\"built_in\">NSMutableDictionary</span>;</div><div class=\"line\"><span class=\"built_in\">NSData</span>;</div><div class=\"line\"><span class=\"built_in\">NSMutableData</span>;</div><div class=\"line\"><span class=\"built_in\">NSString</span>;</div><div class=\"line\"><span class=\"built_in\">NSMutableString</span>;</div><div class=\"line\"><span class=\"built_in\">NSNumber</span>;</div><div class=\"line\"><span class=\"built_in\">NSDate</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"1-获得文件路径\"><a href=\"#1-获得文件路径\" class=\"headerlink\" title=\"1.获得文件路径\"></a>1.获得文件路径</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *path = <span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>).firstObject;</div><div class=\"line\"><span class=\"built_in\">NSString</span> *fileName = [path stringByAppendingPathComponent:<span class=\"string\">@\"123.plist\"</span>];</div></pre></td></tr></table></figure>\n<h4 id=\"2-存储\"><a href=\"#2-存储\" class=\"headerlink\" title=\"2.存储\"></a>2.存储</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *array = @[<span class=\"string\">@\"123\"</span>, <span class=\"string\">@\"456\"</span>, <span class=\"string\">@\"789\"</span>];</div><div class=\"line\">[array writeToFile:fileName atomically:<span class=\"literal\">YES</span>];</div></pre></td></tr></table></figure>\n<h4 id=\"3-读取\"><a href=\"#3-读取\" class=\"headerlink\" title=\"3.读取\"></a>3.读取</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSArray</span> *result = [<span class=\"built_in\">NSArray</span> arrayWithContentsOfFile:fileName];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>, result);</div></pre></td></tr></table></figure>\n<h4 id=\"4-注意\"><a href=\"#4-注意\" class=\"headerlink\" title=\"4.注意\"></a>4.注意</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 只有以上列出的类型才能使用plist文件存储。</span></div><div class=\"line\"><span class=\"comment\">// 存储时使用writeToFile: atomically:方法。 其中atomically表示是否需要先写入一个辅助文件，再把辅助文件拷贝到目标文件地址。这是更安全的写入文件方法，一般都写YES。</span></div><div class=\"line\"><span class=\"comment\">// 读取时使用arrayWithContentsOfFile:方法。</span></div></pre></td></tr></table></figure>\n<h3 id=\"Preference\"><a href=\"#Preference\" class=\"headerlink\" title=\"Preference\"></a>Preference</h3><h4 id=\"1-使用方法\"><a href=\"#1-使用方法\" class=\"headerlink\" title=\"1.使用方法\"></a>1.使用方法</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.获得NSUserDefaults文件</span></div><div class=\"line\"><span class=\"built_in\">NSUserDefaults</span> *userDefaults = [<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//2.向文件中写入内容</span></div><div class=\"line\">[userDefaults setObject:<span class=\"string\">@\"AAA\"</span> forKey:<span class=\"string\">@\"a\"</span>];</div><div class=\"line\">[userDefaults setBool:<span class=\"literal\">YES</span> forKey:<span class=\"string\">@\"sex\"</span>];</div><div class=\"line\">[userDefaults setInteger:<span class=\"number\">21</span> forKey:<span class=\"string\">@\"age\"</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//2.1立即同步</span></div><div class=\"line\">[userDefaults synchronize];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//3.读取文件</span></div><div class=\"line\"><span class=\"built_in\">NSString</span> *name = [userDefaults objectForKey:<span class=\"string\">@\"a\"</span>];</div><div class=\"line\"><span class=\"built_in\">BOOL</span> sex = [userDefaults boolForKey:<span class=\"string\">@\"sex\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSInteger</span> age = [userDefaults integerForKey:<span class=\"string\">@\"age\"</span>];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@, %d, %ld\"</span>, name, sex, age);</div></pre></td></tr></table></figure>\n<h4 id=\"2-注意\"><a href=\"#2-注意\" class=\"headerlink\" title=\"2.注意\"></a>2.注意</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 偏好设置是专门用来保存应用程序的配置信息的，一般不要在偏好设置中保存其他数据。</span></div><div class=\"line\"><span class=\"comment\">// 如果没有调用synchronize方法，系统会根据I/O情况不定时刻地保存到文件中。所以如果需要立即写入文件的就必须调用synchronize方法。</span></div><div class=\"line\"><span class=\"comment\">// 偏好设置会将所有数据保存到同一个文件中。即preference目录下的一个以此应用包名来命名的plist文件。</span></div></pre></td></tr></table></figure>\n<h3 id=\"NSKeyedArchiver\"><a href=\"#NSKeyedArchiver\" class=\"headerlink\" title=\"NSKeyedArchiver\"></a>NSKeyedArchiver</h3><blockquote>\n<p>归档在iOS中是另一种形式的序列化，只要遵循了NSCoding协议的对象都可以通过它实现序列化。由于决大多数支持存储数据的Foundation和Cocoa Touch类都遵循了NSCoding协议，因此，对于大多数类来说，归档相对而言还是比较容易实现的。</p>\n</blockquote>\n<h4 id=\"1-遵循NSCoding协议\"><a href=\"#1-遵循NSCoding协议\" class=\"headerlink\" title=\"1.遵循NSCoding协议\"></a>1.遵循NSCoding协议</h4><blockquote>\n<p>NSCoding协议声明了两个方法，这两个方法都是必须实现的。一个用来说明如何将对象编码到归档中，另一个说明如何进行解档来获取一个新对象。</p>\n</blockquote>\n<p>遵循协议和设置属性</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.遵循NSCoding协议 </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span> : <span class=\"title\">NSObject</span>   //2.设置属性</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">UIImage</span> *avatar;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">copy</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSString</span> *name;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">assign</span>, <span class=\"keyword\">nonatomic</span>) <span class=\"built_in\">NSInteger</span> age;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>实现协议方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//解档</span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)aDecoder &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"keyword\">super</span> init]) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.avatar = [aDecoder decodeObjectForKey:<span class=\"string\">@\"avatar\"</span>];</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = [aDecoder decodeObjectForKey:<span class=\"string\">@\"name\"</span>];</div><div class=\"line\">        <span class=\"keyword\">self</span>.age = [aDecoder decodeIntegerForKey:<span class=\"string\">@\"age\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//归档</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)aCoder &#123;</div><div class=\"line\">    [aCoder encodeObject:<span class=\"keyword\">self</span>.avatar forKey:<span class=\"string\">@\"avatar\"</span>];</div><div class=\"line\">    [aCoder encodeObject:<span class=\"keyword\">self</span>.name forKey:<span class=\"string\">@\"name\"</span>];</div><div class=\"line\">    [aCoder encodeInteger:<span class=\"keyword\">self</span>.age forKey:<span class=\"string\">@\"age\"</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>特别注意</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果需要归档的类是某个自定义类的子类时，就需要在归档和解档之前先实现父类的归档和解档方法。即 [<span class=\"keyword\">super</span> encodeWithCoder:aCoder] 和 [<span class=\"keyword\">super</span> initWithCoder:aDecoder] 方法;</div></pre></td></tr></table></figure>\n<h4 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2.使用\"></a>2.使用</h4><p>需要把对象归档是调用<code>NSKeyedArchiver</code>的工厂方法 <code>archiveRootObject: toFile:</code>方法。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *file = [<span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>).firstObject stringByAppendingPathComponent:<span class=\"string\">@\"person.data\"</span>];</div><div class=\"line\">Person *person = [[Person alloc] init];</div><div class=\"line\">person.avatar = <span class=\"keyword\">self</span>.avatarView.image;</div><div class=\"line\">person.name = <span class=\"keyword\">self</span>.nameField.text;</div><div class=\"line\">person.age = [<span class=\"keyword\">self</span>.ageField.text integerValue];</div><div class=\"line\">[<span class=\"built_in\">NSKeyedArchiver</span> archiveRootObject:person toFile:file];</div></pre></td></tr></table></figure>\n<p>需要从文件中解档对象就调用<code>NSKeyedUnarchiver</code>的一个工厂方法 <code>unarchiveObjectWithFile:</code> 即可。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *file = [<span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>).firstObject stringByAppendingPathComponent:<span class=\"string\">@\"person.data\"</span>];</div><div class=\"line\">Person *person = [<span class=\"built_in\">NSKeyedUnarchiver</span> unarchiveObjectWithFile:file];</div><div class=\"line\"><span class=\"keyword\">if</span> (person) </div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"keyword\">self</span>.avatarView.image = person.avatar;</div><div class=\"line\">   <span class=\"keyword\">self</span>.nameField.text = person.name;</div><div class=\"line\">   <span class=\"keyword\">self</span>.ageField.text = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"%ld\"</span>, person.age];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-注意\"><a href=\"#3-注意\" class=\"headerlink\" title=\"3.注意\"></a>3.注意</h4><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">必须遵循并实现<span class=\"built_in\">NSCoding</span>协议</div><div class=\"line\">保存文件的扩展名可以任意指定</div><div class=\"line\">继承时必须先调用父类的归档解档方法</div></pre></td></tr></table></figure>\n<h3 id=\"SQLite3\"><a href=\"#SQLite3\" class=\"headerlink\" title=\"SQLite3\"></a>SQLite3</h3><blockquote>\n<p>之前的所有存储方法，都是覆盖存储。如果想要增加一条数据就必须把整个文件读出来，然后修改数据后再把整个内容覆盖写入文件。所以它们都不适合存储大量的内容。</p>\n</blockquote>\n<h4 id=\"1-字段类型\"><a href=\"#1-字段类型\" class=\"headerlink\" title=\"1.字段类型\"></a>1.字段类型</h4><p>表面上·SQLite·将数据分为以下几种类型：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">integer : 整数</div><div class=\"line\">real : 实数（浮点数）</div><div class=\"line\">text : 文本字符串</div><div class=\"line\">blob : 二进制数据，比如文件，图片之类的</div></pre></td></tr></table></figure>\n<p>实际上<code>SQLite</code>是无类型的。即不管你在创表时指定的字段类型是什么，存储是依然可以存储任意类型的数据。而且在创表时也可以不指定字段类型。<code>SQLite</code>之所以什么类型就是为了良好的编程规范和方便开发人员交流，所以平时在使用时最好设置正确的字段类型！主键必须设置成<code>integer</code></p>\n<h4 id=\"2-准备工作\"><a href=\"#2-准备工作\" class=\"headerlink\" title=\"2. 准备工作\"></a>2. 准备工作</h4><p>准备工作就是导入依赖库啦，在<code>iOS</code>中要使用<code>SQLite3</code>，需要添加库文件：<code>libsqlite3.dylib</code>并导入主头文件，这是一个<code>C语言</code>的库，所以直接使用<code>SQLite3</code>还是比较麻烦的。</p>\n<h4 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3.使用\"></a>3.使用</h4><h5 id=\"1-创建数据库并打开\"><a href=\"#1-创建数据库并打开\" class=\"headerlink\" title=\"1.创建数据库并打开\"></a>1.创建数据库并打开</h5><p>操作数据库之前必须先指定数据库文件和要操作的表，所以使用<code>SQLite3</code>，首先要打开数据库文件，然后指定或创建一张表。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//  打开数据库并创建一个表</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)openDatabase </div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"comment\">//1.设置文件名</span></div><div class=\"line\">   <span class=\"built_in\">NSString</span> *filename = [<span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>).firstObject stringByAppendingPathComponent:<span class=\"string\">@\"person.db\"</span>];</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"comment\">//2.打开数据库文件，如果没有会自动创建一个文件</span></div><div class=\"line\">   <span class=\"built_in\">NSInteger</span> result = sqlite3_open(filename.UTF8String, &amp;_sqlite3);</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"keyword\">if</span> (result == SQLITE_OK) </div><div class=\"line\">   &#123;</div><div class=\"line\">       <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"打开数据库成功！\"</span>);</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"comment\">//3.创建一个数据库表</span></div><div class=\"line\">       <span class=\"keyword\">char</span> *errmsg = <span class=\"literal\">NULL</span>;</div><div class=\"line\">       sqlite3_exec(_sqlite3, <span class=\"string\">\"CREATE TABLE IF NOT EXISTS t_person(id integer primary key autoincrement, name text, age integer)\"</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;errmsg);</div><div class=\"line\">       </div><div class=\"line\">       <span class=\"keyword\">if</span> (errmsg) </div><div class=\"line\">       &#123;</div><div class=\"line\">           <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"错误：%s\"</span>, errmsg);</div><div class=\"line\">       &#125; </div><div class=\"line\">       <span class=\"keyword\">else</span> </div><div class=\"line\">       &#123;</div><div class=\"line\">           <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"创表成功！\"</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125; </div><div class=\"line\">   <span class=\"keyword\">else</span> </div><div class=\"line\">   &#123;</div><div class=\"line\">       <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"打开数据库失败！\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"2-执行指令\"><a href=\"#2-执行指令\" class=\"headerlink\" title=\"2.执行指令\"></a>2.执行指令</h5><p>使用 <code>sqlite3_exec()</code> 方法可以执行任何<code>SQL</code>语句，比如<code>创表、更新、插入和删除</code>操作。但是一般不用它执行查询语句，因为它不会返回查询到的数据。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 往表中插入1000条数据</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)insertData </div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *nameStr;</div><div class=\"line\">    <span class=\"built_in\">NSInteger</span> age;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSInteger</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) </div><div class=\"line\">    &#123;</div><div class=\"line\">      nameStr = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"Bourne-%d\"</span>, arc4random_uniform(<span class=\"number\">10000</span>)];</div><div class=\"line\">      age = arc4random_uniform(<span class=\"number\">80</span>) + <span class=\"number\">20</span>;</div><div class=\"line\">      <span class=\"built_in\">NSString</span> *sql = [<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"INSERT INTO t_person (name, age) VALUES('%@', '%ld')\"</span>, nameStr, age];</div><div class=\"line\">      <span class=\"keyword\">char</span> *errmsg = <span class=\"literal\">NULL</span>;</div><div class=\"line\">      sqlite3_exec(_sqlite3, sql.UTF8String, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;errmsg);</div><div class=\"line\">      <span class=\"keyword\">if</span> (errmsg) </div><div class=\"line\">      &#123;</div><div class=\"line\">          <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"错误：%s\"</span>, errmsg);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"插入完毕！\"</span>);   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"3-查询指令\"><a href=\"#3-查询指令\" class=\"headerlink\" title=\"3.查询指令\"></a>3.查询指令</h5><p>前面说过一般不使用 sqlite3_exec() 方法查询数据。因为查询数据必须要获得查询结果，所以查询相对比较麻烦。示例代码如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// sqlite3_prepare_v2() : 检查sql的合法性</span></div><div class=\"line\"><span class=\"comment\">// sqlite3_step() : 逐行获取查询结果，不断重复，直到最后一条记录</span></div><div class=\"line\"><span class=\"comment\">// sqlite3_coloum_xxx() : 获取对应类型的内容，iCol对应的就是SQL语句中字段的顺序，从0开始。根据实际查询字段的属性，使用sqlite3_column_xxx取得对应的内容即可。</span></div><div class=\"line\"><span class=\"comment\">// sqlite3_finalize() : 释放stmt</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 从表中读取数据到数组中</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)readData </div><div class=\"line\">&#123;</div><div class=\"line\">   <span class=\"built_in\">NSMutableArray</span> *mArray = [<span class=\"built_in\">NSMutableArray</span> arrayWithCapacity:<span class=\"number\">1000</span>];</div><div class=\"line\">   <span class=\"keyword\">char</span> *sql = <span class=\"string\">\"select name, age from t_person;\"</span>;</div><div class=\"line\">   sqlite3_stmt *stmt;</div><div class=\"line\">   <span class=\"built_in\">NSInteger</span> result = sqlite3_prepare_v2(_sqlite3, sql, <span class=\"number\">-1</span>, &amp;stmt, <span class=\"literal\">NULL</span>);</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"keyword\">if</span> (result == SQLITE_OK) </div><div class=\"line\">   &#123;</div><div class=\"line\">       <span class=\"keyword\">while</span> (sqlite3_step(stmt) == SQLITE_ROW) </div><div class=\"line\">       &#123;</div><div class=\"line\">           <span class=\"keyword\">char</span> *name = (<span class=\"keyword\">char</span> *)sqlite3_column_text(stmt, <span class=\"number\">0</span>);</div><div class=\"line\">           <span class=\"built_in\">NSInteger</span> age = sqlite3_column_int(stmt, <span class=\"number\">1</span>);</div><div class=\"line\">           <span class=\"comment\">//创建对象</span></div><div class=\"line\">           Person *person = [Person personWithName:[<span class=\"built_in\">NSString</span> stringWithUTF8String:name] Age:age];</div><div class=\"line\">           [mArray addObject:person];</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">self</span>.dataList = mArray;</div><div class=\"line\">   &#125;</div><div class=\"line\">   sqlite3_finalize(stmt);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4.总结\"></a>4.总结</h4><p>总得来说，<code>SQLite3</code>的使用还是比较麻烦的，因为都是些<code>c语言</code>的函数，理解起来有些困难。不过在一般开发过程中，使用的都是第三方开源库 <code>FMDB</code>，封装了这些基本的<code>c语言</code>方法，使得我们在使用时更加容易理解，提高开发效率。</p>\n<h3 id=\"FMDB\"><a href=\"#FMDB\" class=\"headerlink\" title=\"FMDB\"></a>FMDB</h3><h4 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h4><blockquote>\n<p>FMDB是iOS平台的SQLite数据库框架，它是以OC的方式封装了SQLite的C语言API，它相对于cocoa自带的C语言框架有如下的优点:<br>使用起来更加面向对象，省去了很多麻烦、冗余的C语言代码<br>对比苹果自带的Core Data框架，更加轻量级和灵活<br>提供了多线程安全的数据库操作方法，有效地防止数据混乱</p>\n</blockquote>\n<h4 id=\"2-核心类\"><a href=\"#2-核心类\" class=\"headerlink\" title=\"2.核心类\"></a>2.核心类</h4><p><strong>FMDB有三个主要的类：</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// FMDatabase</span></div><div class=\"line\">一个FMDatabase对象就代表一个单独的SQLite数据库，用来执行SQL语句</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// FMResultSet</span></div><div class=\"line\">使用FMDatabase执行查询后的结果集</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// FMDatabaseQueue</span></div><div class=\"line\">用于在多线程中执行多个查询或更新，它是线程安全的</div></pre></td></tr></table></figure>\n<h4 id=\"3-打开数据库\"><a href=\"#3-打开数据库\" class=\"headerlink\" title=\"3.打开数据库\"></a>3.打开数据库</h4><blockquote>\n<p>和c语言框架一样，FMDB通过指定SQLite数据库文件路径来创建FMDatabase对象，但FMDB更加容易理解，使用起来更容易，使用之前一样需要导入sqlite3.dylib。打开数据库方法如下：</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSString</span> *path = [<span class=\"built_in\">NSSearchPathForDirectoriesInDomains</span>(<span class=\"built_in\">NSDocumentDirectory</span>, <span class=\"built_in\">NSUserDomainMask</span>, <span class=\"literal\">YES</span>).firstObject stringByAppendingPathComponent:<span class=\"string\">@\"person.db\"</span>];</div><div class=\"line\">FMDatabase *database = [FMDatabase databaseWithPath:path]; </div><div class=\"line\">   </div><div class=\"line\"><span class=\"keyword\">if</span> (![database open]) </div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"数据库打开失败！\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>值得注意的是，Path的值可以传入以下三种情况：</strong></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 具体文件路径，如果不存在会自动创建</span></div><div class=\"line\"><span class=\"comment\">// 空字符串@\"\"，会在临时目录创建一个空的数据库，当FMDatabase连接关闭时，数据库文件也被删除</span></div><div class=\"line\"><span class=\"comment\">// nil，会创建一个内存中临时数据库，当FMDatabase连接关闭时，数据库会被销毁</span></div></pre></td></tr></table></figure>\n<h4 id=\"4-更新\"><a href=\"#4-更新\" class=\"headerlink\" title=\"4.更新\"></a>4.更新</h4><blockquote>\n<p>在FMDB中，除查询以外的所有操作，都称为“更新”, 如：create、drop、insert、update、delete等操作，使用executeUpdate:方法执行更新：</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//常用方法有以下 3 种：   </span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)executeUpdate:(<span class=\"built_in\">NSString</span>*)sql, ...</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)executeUpdateWithFormat:(<span class=\"built_in\">NSString</span>*)format, ...</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)executeUpdate:(<span class=\"built_in\">NSString</span>*)sql withArgumentsInArray:(<span class=\"built_in\">NSArray</span> *)arguments</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//示例</span></div><div class=\"line\">[database executeUpdate:<span class=\"string\">@\"CREATE TABLE IF NOT EXISTS t_person(id integer primary key autoincrement, name text, age integer)\"</span>]; </div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">//或者  </span></div><div class=\"line\">[database executeUpdate:<span class=\"string\">@\"INSERT INTO t_person(name, age) VALUES(?, ?)\"</span>, <span class=\"string\">@\"Bourne\"</span>, [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">42</span>]];</div></pre></td></tr></table></figure>\n<h4 id=\"5-查询\"><a href=\"#5-查询\" class=\"headerlink\" title=\"5.查询\"></a>5.查询</h4><p>查询方法也有3种，使用起来相当简单：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (FMResultSet *)executeQuery:(<span class=\"built_in\">NSString</span>*)sql, ...</div><div class=\"line\">- (FMResultSet *)executeQueryWithFormat:(<span class=\"built_in\">NSString</span>*)format, ...</div><div class=\"line\">- (FMResultSet *)executeQuery:(<span class=\"built_in\">NSString</span> *)sql withArgumentsInArray:(<span class=\"built_in\">NSArray</span> *)arguments</div></pre></td></tr></table></figure>\n<p>查询示例：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.执行查询</span></div><div class=\"line\">FMResultSet *result = [database executeQuery:<span class=\"string\">@\"SELECT * FROM t_person\"</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//2.遍历结果集</span></div><div class=\"line\"><span class=\"keyword\">while</span> ([result next]) </div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *name = [result stringForColumn:<span class=\"string\">@\"name\"</span>];</div><div class=\"line\">    <span class=\"keyword\">int</span> age = [result intForColumn:<span class=\"string\">@\"age\"</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"6-线程安全\"><a href=\"#6-线程安全\" class=\"headerlink\" title=\"6.线程安全\"></a>6.线程安全</h4><blockquote>\n<p>在多个线程中同时使用一个 <code>FMDatabase</code> 实例是不明智的。不要让多个线程分享同一个<code>FMDatabase</code>实例，它无法在多个线程中同时使用。 如果在多个线程中同时使用一个<code>FMDatabase</code>实例，会造成数据混乱等问题。所以，请使用 <code>FMDatabaseQueue</code>，它是线程安全的。以下是使用方法：</p>\n</blockquote>\n<p>创建队列。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">FMDatabaseQueue *queue = [FMDatabaseQueue databaseQueueWithPath:aPath];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用队列</span></div><div class=\"line\">[queue inDatabase:^(FMDatabase *database)</div><div class=\"line\">&#123;    </div><div class=\"line\">          [database executeUpdate:<span class=\"string\">@\"INSERT INTO t_person(name, age) VALUES (?, ?)\"</span>, <span class=\"string\">@\"Bourne_1\"</span>, [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">1</span>]];    </div><div class=\"line\">          [database executeUpdate:<span class=\"string\">@\"INSERT INTO t_person(name, age) VALUES (?, ?)\"</span>, <span class=\"string\">@\"Bourne_2\"</span>, [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">2</span>]];    </div><div class=\"line\">          [database executeUpdate:<span class=\"string\">@\"INSERT INTO t_person(name, age) VALUES (?, ?)\"</span>, <span class=\"string\">@\"Bourne_3\"</span>, [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">3</span>]];      </div><div class=\"line\">          FMResultSet *result = [database executeQuery:<span class=\"string\">@\"select * from t_person\"</span>];    </div><div class=\"line\">         <span class=\"keyword\">while</span>([result next]) &#123;   </div><div class=\"line\">         &#125;    </div><div class=\"line\">&#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 而且可以轻松地把简单任务包装到事务里：</span></div><div class=\"line\">[queue inTransaction:^(FMDatabase *database, <span class=\"built_in\">BOOL</span> *rollback) &#123;    </div><div class=\"line\">          [database executeUpdate:<span class=\"string\">@\"INSERT INTO t_person(name, age) VALUES (?, ?)\"</span>, <span class=\"string\">@\"Bourne_1\"</span>, [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">1</span>]];    </div><div class=\"line\">          [database executeUpdate:<span class=\"string\">@\"INSERT INTO t_person(name, age) VALUES (?, ?)\"</span>, <span class=\"string\">@\"Bourne_2\"</span>, [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">2</span>]];    </div><div class=\"line\">          [database executeUpdate:<span class=\"string\">@\"INSERT INTO t_person(name, age) VALUES (?, ?)\"</span>, <span class=\"string\">@\"Bourne_3\"</span>, [<span class=\"built_in\">NSNumber</span> numberWithInt:<span class=\"number\">3</span>]];      </div><div class=\"line\">          FMResultSet *result = [database executeQuery:<span class=\"string\">@\"select * from t_person\"</span>];    </div><div class=\"line\">             <span class=\"keyword\">while</span>([result next]) &#123;   </div><div class=\"line\">             &#125;   </div><div class=\"line\">           <span class=\"comment\">//回滚</span></div><div class=\"line\">           *rollback = <span class=\"literal\">YES</span>;  </div><div class=\"line\">    &#125;];</div></pre></td></tr></table></figure>\n<p>FMDatabaseQueue 后台会建立系列化的<code>GCD</code>队列，并执行你传给<code>GCD</code>队列的块。这意味着 你从多线程同时调用调用方法，<code>GCD</code>也会按它接收的块的顺序来执行了。</p>\n","excerpt":"","categories":[],"tags":[]},{"title":"序列化和反序列化","date":"2017-03-06T00:39:37.000Z","path":"2017/03/06/序列化和反序列化/","text":"定义以及相关概念互联网的产生带来了机器间通讯的需求，而互联通讯的双方需要采用约定的协议，序列化和反序列化属于通讯协议的一部分。通讯协议往往采用分层模型，不同模型每层的功能定义以及颗粒度不同，例如：TCP/IP协议是一个四层协议，而OSI模型却是七层协议模型。在OSI七层协议模型中 展现层（Presentation Layer）的主要功能是把应用层的对象转换成一段连续的二进制串，或者反过来，把二进制串转换成应用层的对象–这两个功能就是序列化和反序列化。一般而言，TCP/IP协议的应用层对应与OSI七层协议模型的应用层，展示层和会话层，所以序列化协议属于TCP/IP协议应用层的一部分。本文对序列化协议的讲解主要基于OSI七层协议模型。 序列化(Serialization)： 将数据结构或对象转换成二进制串的过程。在iOS中称为归档(Archive)反序列化：将在序列化过程中所生成的二进制串转换成数据结构或者对象的过程。 不同的计算机语言中，数据结构，对象以及二进制串的表示方式并不相同。 数据结构和对象：对于类似Java这种完全面向对象的语言，工程师所操作的一切都是对象（Object），来自于类的实例化。在Java语言中最接近数据结构的概念，就是POJO（Plain Old Java Object）或者Javabean－－那些只有setter/getter方法的类。而C二进制串：序列化所生成的二进制串指的是存储在内存中的一块数据。C语言的字符串可以直接被传输层使用，因为其本质上就是以’0’结尾的存储在内存中的二进制串。在Java语言里面，二进制串的概念容易和String混淆。实际上String是Java的一等公民，是一种特殊对象（Object）。对于跨语言间的通讯，序列化后的数据当然不能是某种语言的特殊数据类型。,在iOS中对象转为NSData类型，就是序列化之后的，而NSData转为其他类型对象就是反序列化。 在iOS中序列化与反序列化 将任何对象转NSData，这个对象都需要遵循一个协议，就是NSCoding协议。代码如下： 1234567 //每个属性变量分别转码，序列化- (void)encodeWithCoder:(NSCoder *)aCoder &#123; [aCoder encodeObject:self.FYusername forKey:@\"username\"]; [aCoder encodeObject:self.FriendlyName forKey:@\"FriendlyName\"]; [aCoder encodeObject:self.phoneNum forKey:@\"phoneNum\"];&#125; 1234567891011//分别把每个属性变量根据关键字进行逆转码，最后返回一个Student类的对象,反序列化- (id)initWithCoder:(NSCoder *)aDecoder&#123; if (self = [super init]) &#123; self.FYusername = [aDecoder decodeObjectForKey:@\"username\"]; self.FriendlyName= [aDecoder decodeObjectForKey:@\"FriendlyName\"]; self.phoneNum= [aDecoder decodeObjectForKey:@\"phoneNum\"]; &#125; return self;&#125; 对象在实现NSCoding协议后，在外面使用这个对象的时候可以通过归档函数来转成NSData: 1234// 归档调动，序列化NSData *contactsData=[NSKeyedArchiver archivedDataWithRootObject:ContactsArray]; //反序列化，转变为对象NSObject&lt;NSCoding&gt; *obj=[NSKeyedUnarchiver unarchiveObjectWithFile:path]; 其中的NSCoder是一个编码的工具性类，封装了对象序列化和反序列化的函数，所以实际上，我们并没有自己写序列化算法，只是遵循了这个协议让系统去调用罢了。 iOS利用序列化和反序列化的作用实现NSCoding的类，并序列化数据，有2个好处：1.序列化数据可以直接进行存储2.序列化数据容易进行完全拷贝 序列化数据可以直接进行存储在iOS中，进行存储比较快捷的方式是NSUserDefaults，存储方式如下：但它支持的数据类型很有限：NSNumber（NSInteger、float、double），NSString，NSData，NSArray，NSDictionary，BOOL. 12[[NSUserDefaults standardUserDefaults] setObject:nickName forKey:UserDefault_NickName];[[NSUserDefaults standardUserDefaults] synchronize]; 一般都是些不可变的基本类型，存储其他类型时，如NSMutableArray等类型时，会崩溃的。解决办法如下： 1234//当然，不能忽略的是，如果是自定义对象，别忘了NSCoding协议。NSData *contactsData=[NSKeyedArchiver archivedDataWithRootObject:ContactsArray];[[NSUserDefaults standardUserDefaults] setObject:contactsData forKey:UserDefault_ContactsArray];[[NSUserDefaults standardUserDefaults] synchronize]; 除了NSUserDefaults，另外存储NSData的方式可以用归档+地址： 1[NSKeyedArchiver archiveRootObject:obj toFile:path]; 序列化数据容易进行完全拷贝：这里简单说下使用NSKeyedArchiver来实现深拷贝：主要的方法是先将某个对象转NSData,然后NSData转回赋值给新建对象： 12NSData *data = [NSKeyedArchiver archivedDataWithRootObject:oldContactsArray];NSMutableArray *newContactsArray = [NSKeyedUnarchiver unarchiveObjectWithData:data];","content":"<h3 id=\"定义以及相关概念\"><a href=\"#定义以及相关概念\" class=\"headerlink\" title=\"定义以及相关概念\"></a>定义以及相关概念</h3><p>互联网的产生带来了机器间通讯的需求，而互联通讯的双方需要采用约定的协议，序列化和反序列化属于通讯协议的一部分。通讯协议往往采用分层模型，不同模型每层的功能定义以及颗粒度不同，例如：<code>TCP/IP</code>协议是一个四层协议，而<code>OSI</code>模型却是七层协议模型。在<code>OSI</code>七层协议模型中 <strong>展现层（Presentation Layer）的主要功能是把应用层的对象转换成一段连续的二进制串，或者反过来，把二进制串转换成应用层的对象–这两个功能就是序列化和反序列化</strong>。一般而言，<code>TCP/IP</code>协议的应用层对应与<code>OSI</code>七层协议模型的应用层，展示层和会话层，所以序列化协议属于<code>TCP/IP</code>协议应用层的一部分。本文对序列化协议的讲解主要基于<code>OSI</code>七层协议模型。</p>\n<p><strong>序列化(Serialization)： 将数据结构或对象转换成二进制串的过程。在iOS中称为归档(Archive)<br>反序列化：将在序列化过程中所生成的二进制串转换成数据结构或者对象的过程。</strong></p>\n<p>不同的计算机语言中，数据结构，对象以及二进制串的表示方式并不相同。</p>\n<p>数据结构和对象：对于类似Java这种完全面向对象的语言，工程师所操作的一切都是对象<code>（Object）</code>，来自于类的实例化。在Java语言中最接近数据结构的概念，就是<code>POJO（Plain Old Java Object）</code>或者<code>Javabean</code>－－那些只有<code>setter/getter</code>方法的类。而<strong>C二进制串：序列化所生成的二进制串指的是存储在内存中的一块数据。C语言的字符串可以直接被传输层使用，因为其本质上就是以’0’结尾的存储在内存中的二进制串</strong>。在<code>Java</code>语言里面，二进制串的概念容易和String混淆。实际上<code>String</code>是<code>Java</code>的一等公民，是一种特殊对象<code>（Object）</code>。<strong>对于跨语言间的通讯，序列化后的数据当然不能是某种语言的特殊数据类型。</strong>,在<code>iOS</code>中对象转为<code>NSData</code>类型，就是序列化之后的，而<code>NSData</code>转为其他类型对象就是反序列化。</p>\n<h3 id=\"在iOS中序列化与反序列化\"><a href=\"#在iOS中序列化与反序列化\" class=\"headerlink\" title=\"在iOS中序列化与反序列化\"></a>在iOS中序列化与反序列化</h3><p>  将任何对象转NSData，这个对象都需要遵循一个协议，就是<code>NSCoding</code>协议。代码如下：</p>\n  <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">//每个属性变量分别转码，序列化</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)aCoder </div><div class=\"line\">&#123;</div><div class=\"line\">    [aCoder encodeObject:<span class=\"keyword\">self</span>.FYusername forKey:<span class=\"string\">@\"username\"</span>];</div><div class=\"line\">    [aCoder encodeObject:<span class=\"keyword\">self</span>.FriendlyName forKey:<span class=\"string\">@\"FriendlyName\"</span>];</div><div class=\"line\">    [aCoder encodeObject:<span class=\"keyword\">self</span>.phoneNum forKey:<span class=\"string\">@\"phoneNum\"</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n <figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//分别把每个属性变量根据关键字进行逆转码，最后返回一个Student类的对象,反序列化</span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)aDecoder</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init]) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.FYusername = [aDecoder decodeObjectForKey:<span class=\"string\">@\"username\"</span>];</div><div class=\"line\">        <span class=\"keyword\">self</span>.FriendlyName= [aDecoder decodeObjectForKey:<span class=\"string\">@\"FriendlyName\"</span>];</div><div class=\"line\">        <span class=\"keyword\">self</span>.phoneNum= [aDecoder decodeObjectForKey:<span class=\"string\">@\"phoneNum\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对象在实现NSCoding协议后，在外面使用这个对象的时候可以通过归档函数来转成NSData:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 归档调动，序列化</span></div><div class=\"line\"><span class=\"built_in\">NSData</span> *contactsData=[<span class=\"built_in\">NSKeyedArchiver</span> archivedDataWithRootObject:ContactsArray]; </div><div class=\"line\"><span class=\"comment\">//反序列化，转变为对象</span></div><div class=\"line\"><span class=\"built_in\">NSObject</span>&lt;<span class=\"built_in\">NSCoding</span>&gt; *obj=[<span class=\"built_in\">NSKeyedUnarchiver</span> unarchiveObjectWithFile:path];</div></pre></td></tr></table></figure>\n<p>其中的<code>NSCoder是一个编码的工具性类</code>，封装了对象序列化和反序列化的函数，所以实际上，我们并没有自己写序列化算法，只是遵循了这个协议让系统去调用罢了。</p>\n<h3 id=\"iOS利用序列化和反序列化的作用\"><a href=\"#iOS利用序列化和反序列化的作用\" class=\"headerlink\" title=\"iOS利用序列化和反序列化的作用\"></a>iOS利用序列化和反序列化的作用</h3><p>实现NSCoding的类，并序列化数据，有2个好处：<br>1.<strong>序列化数据可以直接进行存储</strong><br>2.<strong>序列化数据容易进行完全拷贝</strong></p>\n<h4 id=\"序列化数据可以直接进行存储\"><a href=\"#序列化数据可以直接进行存储\" class=\"headerlink\" title=\"序列化数据可以直接进行存储\"></a>序列化数据可以直接进行存储</h4><p>在iOS中，进行存储比较快捷的方式是<code>NSUserDefaults</code>，存储方式如下：<br>但它支持的数据类型很有限：<br><code>NSNumber（NSInteger、float、double），NSString，NSData，NSArray，NSDictionary，BOOL.</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults] setObject:nickName forKey:UserDefault_NickName];</div><div class=\"line\">[[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults] synchronize];</div></pre></td></tr></table></figure>\n<p>一般都是些不可变的基本类型，存储其他类型时，如<code>NSMutableArray</code>等类型时，会崩溃的。<br>解决办法如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//当然，不能忽略的是，如果是自定义对象，别忘了NSCoding协议。</span></div><div class=\"line\"><span class=\"built_in\">NSData</span> *contactsData=[<span class=\"built_in\">NSKeyedArchiver</span> archivedDataWithRootObject:ContactsArray];</div><div class=\"line\">[[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults] setObject:contactsData forKey:UserDefault_ContactsArray];</div><div class=\"line\">[[<span class=\"built_in\">NSUserDefaults</span> standardUserDefaults] synchronize];</div></pre></td></tr></table></figure>\n<p>除了<code>NSUserDefaults</code>，另外存储<code>NSData</code>的方式可以用<strong>归档+地址</strong>：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"built_in\">NSKeyedArchiver</span> archiveRootObject:obj toFile:path];</div></pre></td></tr></table></figure>\n<h4 id=\"序列化数据容易进行完全拷贝：\"><a href=\"#序列化数据容易进行完全拷贝：\" class=\"headerlink\" title=\"序列化数据容易进行完全拷贝：\"></a>序列化数据容易进行完全拷贝：</h4><p>这里简单说下使用<code>NSKeyedArchiver</code>来实现深拷贝：<br>主要的方法是先将某个对象转<code>NSData</code>,然后<code>NSData</code>转回赋值给新建对象：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">NSData</span> *data = [<span class=\"built_in\">NSKeyedArchiver</span> archivedDataWithRootObject:oldContactsArray];</div><div class=\"line\"><span class=\"built_in\">NSMutableArray</span> *newContactsArray = [<span class=\"built_in\">NSKeyedUnarchiver</span> unarchiveObjectWithData:data];</div></pre></td></tr></table></figure>\n","excerpt":"","categories":[],"tags":[]},{"title":"源码解析-SDWebImage","date":"2017-02-21T04:48:01.000Z","path":"2017/02/21/源码解析-SDWebImage/","text":"SDWebImage是我们经常使用的一个异步图片加载库，大大提高了我们的开发效率。它支持从网络中下载且缓存图片，并设置图片到对应的UIImageView控件或者UIButton控件上。 SDWebImage 概论123456789101.提供了一个UIImageView的category用来加载网络图片并且对网络图片的缓存进行管理2.采用异步方式来下载网络图片3.采用异步方式，使用memory＋disk来缓存网络图片，自动管理缓存。4.支持GIF动画,支持JEPG,JPG格式。5.支持WebP格式6.同一个URL的网络图片不会被重复下载7.失效的URL不会被无限重试8.耗时操作都在子线程，确保不会阻塞主线程9.使用GCD和ARC10.支持Arm64 ##SDWebImage知识点的梳理 正常程序退出后，会在几秒内停止工作,要想申请更长的时间，需要用到beginBackgroundTaskWithExpirationHandler endBackgroundTask一定要成对出现 使用NSdirectoryEnumerator遍历所有的缓存文件不会有性能耗时的问题,检查某个文件是否存在或者检查是否为文件夹都会检查文件的inode 数据,而这个inode中包括file的各种attribute. 使用NSCache作为内存储存比NSDictionary的好处是:当系统资源要耗尽的时候可以自动的删减,NSCache不会自动的拷贝键,并且是线程安全的,比NSDictionary线程安全. 线程中urlCallbacks的增加,改动都是使用所有增改回调集合URLCallbacks的操作使用dispatch_barrier_sync放入队列barrierQueue中，而查询URLCallbakcs的操作只需使用dispatch_sync放入队列barrierQueue中。 要先说一些系统中锁的问题: 同步锁@synchronized(self)在self上加一个同步锁,频繁滥用的话会导致程序会等待另外一段与此代码无关的执行完毕之后才能执行,会耗时. 123[_lock lock];//[_lock unlock]; 这样遇到死锁也会很麻烦,并且效率也不高.一般情况下想要为代码加锁,最好使用CGD.将所有的操作放到串行队列中执行.而对于并行队列的话就需要,读取的话可以并发进行,并没有任何改动,而增加或者修改数据的话必须保证此时不能进行读取数据,那么可以使用栅栏(barrier)来设置.在队列中栅栏块必须单独执行,不能与其他一起执行.这对于并发队列来说,如果并发队列发下下面要处理的是栅栏块,那么会一直等前面所有的并发块执行完毕后才执行这个栅栏,而等栅栏执行完毕后才执行其后的并发任务.所以增加和修改使用栅栏可以保证线程安全. 5.图片的解码.当你用 UIImage 或 CGImageSource 的那几个方法创建图片时，图片数据并不会立刻解码。图片设置到 UIImageView 或者 CALayer.contents 中去，并且 CALayer 被提交到 GPU 前，CGImage 中的数据才会得到解码。这一步是发生在主线程的，并且不可避免。如果想要绕开这个机制，常见的做法是在后台线程先把图片绘制到 CGBitmapContext 中，然后从 Bitmap 直接创建图片。目前常见的网络图片库都自带这个功能。SDWebImage就是在后台生成这种位图. SDWebImageManager结构关于结构，我们可以用一张流程图说明 SDWebImage的工作流程 SDWebImageManager主要管理的类,下载的主要方法就是在这个类中 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196- (id &lt;SDWebImageOperation&gt;)loadImageWithURL:(nullable NSURL *)url options:(SDWebImageOptions)options progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock completed:(nullable SDInternalCompletionBlock)completedBlock &#123; // 断言一下完成这个回调如果是预先下载这个类进行压在 NSAssert(completedBlock != nil, @\"If you mean to prefetch the image, use -[SDWebImagePrefetcher prefetchURLs] instead\"); // 判断一下url是否是正确的url if ([url isKindOfClass:NSString.class]) &#123; url = [NSURL URLWithString:(NSString *)url]; &#125; if (![url isKindOfClass:NSURL.class]) &#123; url = nil; &#125; // 对于operation再次包装一层,对应一个operation __block SDWebImageCombinedOperation *operation = [SDWebImageCombinedOperation new]; __weak SDWebImageCombinedOperation *weakOperation = operation; // 判断一下是不是之前已经下载失败过的url BOOL isFailedUrl = NO; if (url) &#123; @synchronized (self.failedURLs) &#123; isFailedUrl = [self.failedURLs containsObject:url]; &#125; &#125; //如果是url为空或者不要求失败再次下载并且已知已经下载失败过一次的话,直接回掉完成的block if (url.absoluteString.length == 0 || (!(options &amp; SDWebImageRetryFailed) &amp;&amp; isFailedUrl)) &#123; [self callCompletionBlockForOperation:operation completion:completedBlock error:[NSError errorWithDomain:NSURLErrorDomain code:NSURLErrorFileDoesNotExist userInfo:nil] url:url]; return operation; &#125; // 直接加入到正在下载的operation数组中 @synchronized (self.runningOperations) &#123; [self.runningOperations addObject:operation]; &#125; // 获取ulr的字符串,也就是key NSString *key = [self cacheKeyForURL:url]; // 从磁盘中获取图片的方法 operation.cacheOperation = [self.imageCache queryCacheOperationForKey:key done:^(UIImage *cachedImage, NSData *cachedData, SDImageCacheType cacheType) &#123; // 因为是异步执行,可能被取消任务,所以需要先检查一下 if (operation.isCancelled) &#123; [self safelyRemoveOperationFromRunning:operation]; return; &#125; // 如果并没有缓存图片或者 或者要求即使有缓存图片也要刷新 又或者是要求下载图片,那么就需要重新从网上下载图片 if ((!cachedImage || options &amp; SDWebImageRefreshCached) &amp;&amp; (![self.delegate respondsToSelector:@selector(imageManager:shouldDownloadImageForURL:)] || [self.delegate imageManager:self shouldDownloadImageForURL:url])) &#123; // 如果有缓存图片,但是要求不停刷新缓存图片,那么就先显示上缓存图片,进行完成的回调 if (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached) &#123; [self callCompletionBlockForOperation:weakOperation completion:completedBlock image:cachedImage data:cachedData error:nil cacheType:cacheType finished:YES url:url]; &#125; //对于下载要求的一些整理 SDWebImageDownloaderOptions downloaderOptions = 0; // 下载优先级 if (options &amp; SDWebImageLowPriority) downloaderOptions |= SDWebImageDownloaderLowPriority; // 渐进式的显示 if (options &amp; SDWebImageProgressiveDownload) downloaderOptions |= SDWebImageDownloaderProgressiveDownload; // 刷新缓存,需要先进行缓存 if (options &amp; SDWebImageRefreshCached) downloaderOptions |= SDWebImageDownloaderUseNSURLCache; // 后台继续下载 if (options &amp; SDWebImageContinueInBackground) downloaderOptions |= SDWebImageDownloaderContinueInBackground; // 使用cookie if (options &amp; SDWebImageHandleCookies) downloaderOptions |= SDWebImageDownloaderHandleCookies; // 允许通过不可靠的认证 if (options &amp; SDWebImageAllowInvalidSSLCertificates) downloaderOptions |= SDWebImageDownloaderAllowInvalidSSLCertificates; // 高优先级下载 if (options &amp; SDWebImageHighPriority) downloaderOptions |= SDWebImageDownloaderHighPriority; // 自动缩小大图 if (options &amp; SDWebImageScaleDownLargeImages) downloaderOptions |= SDWebImageDownloaderScaleDownLargeImages; // 有缓存也要刷新的时候就不用进行渐渐显示的样式,并且要忽略缓存的响应内容 if (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached) &#123; downloaderOptions &amp;= ~SDWebImageDownloaderProgressiveDownload; downloaderOptions |= SDWebImageDownloaderIgnoreCachedResponse; &#125; // 调用下载的方法进行下载,并且设置完成之后的回调方法 SDWebImageDownloadToken *subOperationToken = [self.imageDownloader downloadImageWithURL:url options:downloaderOptions progress:progressBlock completed:^(UIImage *downloadedImage, NSData *downloadedData, NSError *error, BOOL finished) &#123; __strong __typeof(weakOperation) strongOperation = weakOperation; // 有错或者取消,并且添加到失败的url数组中进行记录 if (!strongOperation || strongOperation.isCancelled) &#123; &#125; else if (error) &#123; [self callCompletionBlockForOperation:strongOperation completion:completedBlock error:error url:url]; if ( error.code != NSURLErrorNotConnectedToInternet &amp;&amp; error.code != NSURLErrorCancelled &amp;&amp; error.code != NSURLErrorTimedOut &amp;&amp; error.code != NSURLErrorInternationalRoamingOff &amp;&amp; error.code != NSURLErrorDataNotAllowed &amp;&amp; error.code != NSURLErrorCannotFindHost &amp;&amp; error.code != NSURLErrorCannotConnectToHost) &#123; @synchronized (self.failedURLs) &#123; [self.failedURLs addObject:url]; &#125; &#125; &#125; else &#123; if ((options &amp; SDWebImageRetryFailed)) &#123; @synchronized (self.failedURLs) &#123; [self.failedURLs removeObject:url]; &#125; &#125; // 是否要储存到内存中 BOOL cacheOnDisk = !(options &amp; SDWebImageCacheMemoryOnly); // 有缓存图片,但是没有下载图片的时候就啥也不做了 if (options &amp; SDWebImageRefreshCached &amp;&amp; cachedImage &amp;&amp; !downloadedImage) &#123; // 有下载图片但是没有动态图,但是要求是动态图 &#125; else if (downloadedImage &amp;&amp; (!downloadedImage.images || (options &amp; SDWebImageTransformAnimatedImage)) &amp;&amp; [self.delegate respondsToSelector:@selector(imageManager:transformDownloadedImage:withURL:)]) &#123; // 图片转换成动态图片 dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^&#123; UIImage *transformedImage = [self.delegate imageManager:self transformDownloadedImage:downloadedImage withURL:url]; if (transformedImage &amp;&amp; finished) &#123; BOOL imageWasTransformed = ![transformedImage isEqual:downloadedImage]; // 储存图片 [self.imageCache storeImage:transformedImage imageData:(imageWasTransformed ? nil : downloadedData) forKey:key toDisk:cacheOnDisk completion:nil]; &#125; [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:transformedImage data:downloadedData error:nil cacheType:SDImageCacheTypeNone finished:finished url:url]; &#125;); &#125; else &#123; if (downloadedImage &amp;&amp; finished) &#123; [self.imageCache storeImage:downloadedImage imageData:downloadedData forKey:key toDisk:cacheOnDisk completion:nil]; &#125; [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:downloadedImage data:downloadedData error:nil cacheType:SDImageCacheTypeNone finished:finished url:url]; &#125; &#125; // 将operation 移除 if (finished) &#123; [self safelyRemoveOperationFromRunning:strongOperation]; &#125; &#125;]; // 下载过程中删除这个操作的一些回调 operation.cancelBlock = ^&#123; [self.imageDownloader cancel:subOperationToken]; __strong __typeof(weakOperation) strongOperation = weakOperation; [self safelyRemoveOperationFromRunning:strongOperation]; &#125;; &#125; else if (cachedImage) &#123; // 有缓存图片直接用缓存图片 __strong __typeof(weakOperation) strongOperation = weakOperation; [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:cachedImage data:cachedData error:nil cacheType:cacheType finished:YES url:url]; [self safelyRemoveOperationFromRunning:operation]; &#125; else &#123; // Image not in cache and download disallowed by delegate __strong __typeof(weakOperation) strongOperation = weakOperation; [self callCompletionBlockForOperation:strongOperation completion:completedBlock image:nil data:nil error:nil cacheType:SDImageCacheTypeNone finished:YES url:url]; [self safelyRemoveOperationFromRunning:operation]; &#125; &#125;]; return operation;&#125; SDWebImageCacheSDSebImageCache分为内存储存和磁盘储存，磁盘储存的路径默认是(../Library/Caches/default/com.hackemist.SDWebImageCache.default/ )下的文件夹中.当然也可以自定义其他路径。 这个类主要包括: 读取图片， 保存下载图片， 删除某个或者整个文件夹图片， 删除已经过期或者超过内存的图片， 计算磁盘中图片的大小，个数等等。 需要逐个解读。 方法初始化的解读： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950- (nonnull instancetype)initWithNamespace:(nonnull NSString *)ns diskCacheDirectory:(nonnull NSString *)directory &#123; if ((self = [super init])) &#123; NSString *fullNamespace = [@\"com.hackemist.SDWebImageCache.\" stringByAppendingString:ns]; // 创建一个单线程 _ioQueue = dispatch_queue_create(\"com.hackemist.SDWebImageCache\", DISPATCH_QUEUE_SERIAL); // 默认配置图片可压缩,不储存在icloud,储存在内存中,最长储存时间是1周,不限制储存大小. _config = [[SDImageCacheConfig alloc] init]; //初始化内存储存的类 _memCache = [[AutoPurgeCache alloc] init]; _memCache.name = fullNamespace;// 初始化储存文件夹的路径 if (directory != nil) &#123; _diskCachePath = [directory stringByAppendingPathComponent:fullNamespace]; &#125; else &#123; NSString *path = [self makeDiskCachePath:ns]; _diskCachePath = path; &#125; dispatch_sync(_ioQueue, ^&#123; _fileManager = [NSFileManager new]; &#125;);// 注册内存警告,终止应用,退到后台的通知[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(clearMemory) name:UIApplicationDidReceiveMemoryWarningNotification object:nil];[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(deleteOldFiles) name:UIApplicationWillTerminateNotification object:nil];[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(backgroundDeleteOldFiles) name:UIApplicationDidEnterBackgroundNotification object:nil]; &#125; return self;&#125; 储存图片的关键代码的解读: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061- (void)storeImage:(nullable UIImage *)image imageData:(nullable NSData *)imageData forKey:(nullable NSString *)key toDisk:(BOOL)toDisk completion:(nullable SDWebImageNoParamsBlock)completionBlock &#123; // key值图片的url路径,然后经过MD5(128位)加密之后,把加密后的字符串变成以16进制的形式变成名字.// 没有图片,并且没有图片名字的情况下直接返回if (!image || !key) &#123; if (completionBlock) &#123; completionBlock(); &#125; return; &#125; // 判断是否保存到内存中 if (self.config.shouldCacheImagesInMemory) &#123; // 图片的长*宽*scale*scale NSUInteger cost = SDCacheCostForImage(image); // 以图片名字为key值储存图片 [self.memCache setObject:image forKey:key cost:cost]; &#125; // 根据是否保存到磁盘中 if (toDisk) &#123; //异步储存图片 dispatch_async(self.ioQueue, ^&#123; NSData *data = imageData; if (!data &amp;&amp; image) &#123; //获取图片的类型,根据图片data的第一个字节判断类型:jpeg,png,gif,tiff,webP,未知类型 SDImageFormat imageFormatFromData = [NSData sd_imageFormatForImageData:data]; // 根据图片类型,生成不同的data(jpg,png) data = [image sd_imageDataAsFormat:imageFormatFromData]; &#125; // 根据图片的路径,生成根据 [_fileManager createFileAtPath:cachePathForKey contents:imageData attributes:nil] //这个方法写入文件中 [self storeImageDataToDisk:data forKey:key]; // 之后在主线程进行回调 if (completionBlock) &#123; dispatch_async(dispatch_get_main_queue(), ^&#123; completionBlock(); &#125;); &#125; else &#123; if (completionBlock) &#123; completionBlock(); &#125; &#125;&#125; 读取图片关键代码解读 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788- (nullable UIImage *)imageFromCacheForKey:(nullable NSString *)key &#123;- // 现根据key从内存中取图片 UIImage *image = [self imageFromMemoryCacheForKey:key]; if (image) &#123; return image; &#125; // 然后再次从磁盘中取图片 image = [self imageFromDiskCacheForKey:key]; return image;&#125;// 磁盘中取出图片- (nullable UIImage *)diskImageForKey:(nullable NSString *)key &#123; // 根据key从磁盘中找出来是data数据 NSData *data = [self diskImageDataBySearchingAllPathsForKey:key]; if (data) &#123; //根据data判断生成的图片是普通图片或者是gif(动画效果) // 生成的CGImage等系统方法判断出图片的方向,生成图片方向的图片,普通方法生成的朝上的,其他方向需要自己计算. UIImage *image = [UIImage sd_imageWithData:data]; // 根据屏幕的生成@2x 和@3x图片 image = [self scaledImageForKey:key image:image]; // 根据是否需要压缩图片进行图片压缩 if(self.config.shouldDecompressImages) &#123; //将图片的透明度去掉,重新生成位图 image = [UIImage decodedImageWithImage:image]; &#125; return image; &#125; else &#123; return nil; &#125;&#125;// 在磁盘各个路径寻找图片- (nullable NSData *)diskImageDataBySearchingAllPathsForKey:(nullable NSString *)key &#123; // 默认路径 NSString *defaultPath = [self defaultCachePathForKey:key]; // 默认路径下找图片 NSData *data = [NSData dataWithContentsOfFile:defaultPath]; if (data) &#123; return data; &#125; //如果没有找到, 去掉图片后缀之后再次查找一遍 data = [NSData dataWithContentsOfFile:defaultPath.stringByDeletingPathExtension]; if (data) &#123; return data; &#125; // 如果还么有找到,在一些自定义的刻度路径下查找图片 NSArray&lt;NSString *&gt; *customPaths = [self.customPaths copy]; for (NSString *path in customPaths) &#123; NSString *filePath = [self cachePathForKey:key inPath:path]; NSData *imageData = [NSData dataWithContentsOfFile:filePath]; if (imageData) &#123; return imageData; &#125; // 同样也查找一遍去掉后缀之后的 imageData = [NSData dataWithContentsOfFile:filePath.stringByDeletingPathExtension]; if (imageData) &#123; return imageData; &#125; &#125; return nil;&#125; 删除某个图片或者删除这个文件夹 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556// 删除某张图片- (void)removeImageForKey:(nullable NSString *)key fromDisk:(BOOL)fromDisk withCompletion:(nullable SDWebImageNoParamsBlock)completion &#123; if (key == nil) &#123; return; &#125; // 如果内存中也应该删除 if (self.config.shouldCacheImagesInMemory) &#123; [self.memCache removeObjectForKey:key]; &#125; // 从磁盘上删除 if (fromDisk) &#123; // 拼接好文件路径,异步删除,主线程进行回调 dispatch_async(self.ioQueue, ^&#123; [_fileManager removeItemAtPath:[self defaultCachePathForKey:key] error:nil]; if (completion) &#123; dispatch_async(dispatch_get_main_queue(), ^&#123; completion(); &#125;); &#125; &#125;); &#125; else if (completion) &#123; completion(); &#125;&#125;// 删除真个文件夹下面的图片- (void)clearDiskOnCompletion:(nullable SDWebImageNoParamsBlock)completion &#123; dispatch_async(self.ioQueue, ^&#123; // 删除真个文件夹 [_fileManager removeItemAtPath:self.diskCachePath error:nil]; // 删除之后再次创建默认文件夹 [_fileManager createDirectoryAtPath:self.diskCachePath withIntermediateDirectories:YES attributes:nil error:NULL]; // 主线程回掉 if (completion) &#123; dispatch_async(dispatch_get_main_queue(), ^&#123; completion(); &#125;); &#125; &#125;);&#125; 删除过期或者超过内存文件,主要是通过接受到通知自己的删除,核心代码解读 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889- (void)deleteOldFilesWithCompletionBlock:(nullable SDWebImageNoParamsBlock)completionBlock &#123; //异步进行删除 dispatch_async(self.ioQueue, ^&#123; // 找到储存文件的文件夹默认路径 NSURL *diskCacheURL = [NSURL fileURLWithPath:self.diskCachePath isDirectory:YES]; NSArray&lt;NSString *&gt; *resourceKeys = @[NSURLIsDirectoryKey, NSURLContentModificationDateKey, NSURLTotalFileAllocatedSizeKey]; // 查找这些文件 NSDirectoryEnumerator *fileEnumerator = [_fileManager enumeratorAtURL:diskCacheURL includingPropertiesForKeys:resourceKeys options:NSDirectoryEnumerationSkipsHiddenFiles errorHandler:NULL]; // 过期文件的日期 NSDate *expirationDate = [NSDate dateWithTimeIntervalSinceNow:-self.config.maxCacheAge]; NSMutableDictionary&lt;NSURL *, NSDictionary&lt;NSString *, id&gt; *&gt; *cacheFiles = [NSMutableDictionary dictionary]; NSUInteger currentCacheSize = 0; NSMutableArray&lt;NSURL *&gt; *urlsToDelete = [[NSMutableArray alloc] init]; // 将查到的这些文件过滤出需要删除的文件 for (NSURL *fileURL in fileEnumerator) &#123; NSError *error; NSDictionary&lt;NSString *, id&gt; *resourceValues = [fileURL resourceValuesForKeys:resourceKeys error:&amp;error]; // 过滤掉是文件夹以及出错的路径 if (error || !resourceValues || [resourceValues[NSURLIsDirectoryKey] boolValue]) &#123; continue; &#125; // 算出文件的日期 NSDate *modificationDate = resourceValues[NSURLContentModificationDateKey]; // 比较是否已经过期,过期文件加入一个数组中 if ([[modificationDate laterDate:expirationDate] isEqualToDate:expirationDate]) &#123; [urlsToDelete addObject:fileURL]; continue; &#125; //计算存留下来的文件的大小 NSNumber *totalAllocatedSize = resourceValues[NSURLTotalFileAllocatedSizeKey]; currentCacheSize += totalAllocatedSize.unsignedIntegerValue;cacheFiles[fileURL] = resourceValues;&#125; // 删除过期的文件 for (NSURL *fileURL in urlsToDelete) &#123; [_fileManager removeItemAtURL:fileURL error:nil]; &#125; // 判断剩下的文件总共大小是否多于设置的最大值 if (self.config.maxCacheSize &gt; 0 &amp;&amp; currentCacheSize &gt; self.config.maxCacheSize) &#123; // 目标值 const NSUInteger desiredCacheSize = self.config.maxCacheSize / 2; // 按日期最靠前的方式进行排序,并且可以并发进行排序 NSArray&lt;NSURL *&gt; *sortedFiles = [cacheFiles keysSortedByValueWithOptions:NSSortConcurrent usingComparator:^NSComparisonResult(id obj1, id obj2) &#123; return [obj1[NSURLContentModificationDateKey] compare:obj2[NSURLContentModificationDateKey]]; &#125;]; // 删除多余的文件 for (NSURL *fileURL in sortedFiles) &#123; if ([_fileManager removeItemAtURL:fileURL error:nil]) &#123; NSDictionary&lt;NSString *, id&gt; *resourceValues = cacheFiles[fileURL]; NSNumber *totalAllocatedSize = resourceValues[NSURLTotalFileAllocatedSizeKey]; currentCacheSize -= totalAllocatedSize.unsignedIntegerValue; // 当小于理想的size就停止 if (currentCacheSize &lt; desiredCacheSize) &#123; break; &#125; &#125; &#125; &#125; if (completionBlock) &#123; dispatch_async(dispatch_get_main_queue(), ^&#123; completionBlock(); &#125;); &#125; &#125;);&#125; SDWebImageDownloader这个类是将NSOperation中子集任务的封装,就一些列的任务封装起来,并对下载的顺序FIFO或者LIFO等进行调整,以及下载任务请求头的封装,最大并发量等等事情进行操作.实际上也是对NSOperationQueue的封装. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144- (nullable SDWebImageDownloadToken *)downloadImageWithURL:(nullable NSURL *)url options:(SDWebImageDownloaderOptions)options progress:(nullable SDWebImageDownloaderProgressBlock)progressBlock completed:(nullable SDWebImageDownloaderCompletedBlock)completedBlock &#123; __weak SDWebImageDownloader *wself = self; return [self addProgressCallback:progressBlock completedBlock:completedBlock forURL:url createCallback:^SDWebImageDownloaderOperation *&#123; // 创建一个SDWebImageDownloaderOperation // __Strong是为了再次对其强引用,以防self被释放 __strong __typeof (wself) sself = wself; // 一般是15s NSTimeInterval timeoutInterval = sself.downloadTimeout; if (timeoutInterval == 0.0) &#123; timeoutInterval = 15.0; &#125; // 创建请求的请求头,缓存策略 NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:url cachePolicy:(options &amp; SDWebImageDownloaderUseNSURLCache ? NSURLRequestUseProtocolCachePolicy : NSURLRequestReloadIgnoringLocalCacheData) timeoutInterval:timeoutInterval]; // cookies request.HTTPShouldHandleCookies = (options &amp; SDWebImageDownloaderHandleCookies); request.HTTPShouldUsePipelining = YES; // 自定义请求头的一些内容 if (sself.headersFilter) &#123; request.allHTTPHeaderFields = sself.headersFilter(url, [sself.HTTPHeaders copy]); &#125; else &#123; request.allHTTPHeaderFields = sself.HTTPHeaders; &#125; // 创建NSOperation SDWebImageDownloaderOperation *operation = [[sself.operationClass alloc] initWithRequest:request inSession:sself.session options:options]; operation.shouldDecompressImages = sself.shouldDecompressImages; // 如果有认证策略,需要用户名和密码 if (sself.urlCredential) &#123; operation.credential = sself.urlCredential; &#125; else if (sself.username &amp;&amp; sself.password) &#123; operation.credential = [NSURLCredential credentialWithUser:sself.username password:sself.password persistence:NSURLCredentialPersistenceForSession]; &#125; if (options &amp; SDWebImageDownloaderHighPriority) &#123; operation.queuePriority = NSOperationQueuePriorityHigh; &#125; else if (options &amp; SDWebImageDownloaderLowPriority) &#123; operation.queuePriority = NSOperationQueuePriorityLow; &#125; // 将operation加入到queue队列中 [sself.downloadQueue addOperation:operation]; // 添加依赖的策略,一般是FIFO,如果是LIFO,就需要添加 if (sself.executionOrder == SDWebImageDownloaderLIFOExecutionOrder) &#123; // Emulate LIFO execution order by systematically adding new operations as last operation's dependency [sself.lastAddedOperation addDependency:operation]; // 记录最后一个任务 sself.lastAddedOperation = operation; &#125; return operation; &#125;];&#125;// 取消某一个opration,token代表一个opration- (void)cancel:(nullable SDWebImageDownloadToken *)token &#123; dispatch_barrier_async(self.barrierQueue, ^&#123; SDWebImageDownloaderOperation *operation = self.URLOperations[token.url]; BOOL canceled = [operation cancel:token.downloadOperationCancelToken]; if (canceled) &#123; [self.URLOperations removeObjectForKey:token.url]; &#125; &#125;);&#125;// 在operation中添加过程和完成的回调block- (nullable SDWebImageDownloadToken *)addProgressCallback:(SDWebImageDownloaderProgressBlock)progressBlock completedBlock:(SDWebImageDownloaderCompletedBlock)completedBlock forURL:(nullable NSURL *)url createCallback:(SDWebImageDownloaderOperation *(^)())createCallback &#123; if (url == nil) &#123; if (completedBlock != nil) &#123; completedBlock(nil, nil, nil, NO); &#125; return nil; &#125; __block SDWebImageDownloadToken *token = nil; dispatch_barrier_sync(self.barrierQueue, ^&#123; // 取出opration,如果没有就创建,创建之后将其和url形成字典,添加到URLOperations SDWebImageDownloaderOperation *operation = self.URLOperations[url]; if (!operation) &#123; operation = createCallback(); self.URLOperations[url] = operation; // 创建operation的完成回调:从字典中去除, __weak SDWebImageDownloaderOperation *woperation = operation; operation.completionBlock = ^&#123; SDWebImageDownloaderOperation *soperation = woperation; if (!soperation) return; if (self.URLOperations[url] == soperation) &#123; [self.URLOperations removeObjectForKey:url]; &#125;; &#125;; &#125; // 创建operation对应的token标志,这个token包括operaion的url属性和对应的过程和完成回调两个方面 id downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock]; token = [SDWebImageDownloadToken new]; token.url = url; token.downloadOperationCancelToken = downloadOperationCancelToken; &#125;); return token;&#125; SDWebImageOperation这个类继承于NSOperation,主要是封装了下载的操作.执行一个operation有两种方法，第一种是自己手动的调用start这个方法，这种方法调用会在当前调用的线程进行同步执行，所以在主线程里面自己一定要小心的调用，不然就会把主线程给卡死，还不如直接用GCD呢。第二种是将operation添加到operationQueue中去，这个也是我们用得最多的也是提倡的方法。NSOperationQueue会在我们添加进去operation的时候尽快进行执行。当然如果NSOperationQueue的maxConcurrentOperationCount如果设置为1的话，进相当于FIFO了。 核心代码分析 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192- (void)start &#123; // 锁定self,这样可以在执行过程中外界不能修改这个对象, @synchronized (self) &#123; //如果已经取消这个任务,就将session和datatask取消,并且也将已经记录的数据imagedata,回调之类全部取消 if (self.isCancelled) &#123; self.finished = YES; [self reset]; return; &#125; #if SD_UIKIT Class UIApplicationClass = NSClassFromString(@\"UIApplication\"); BOOL hasApplication = UIApplicationClass &amp;&amp; [UIApplicationClass respondsToSelector:@selector(sharedApplication)]; if (hasApplication &amp;&amp; [self shouldContinueWhenAppEntersBackground]) &#123; __weak __typeof__ (self) wself = self; UIApplication * app = [UIApplicationClass performSelector:@selector(sharedApplication)]; self.backgroundTaskId = [app beginBackgroundTaskWithExpirationHandler:^&#123; __strong __typeof (wself) sself = wself; if (sself) &#123; [sself cancel]; [app endBackgroundTask:sself.backgroundTaskId]; sself.backgroundTaskId = UIBackgroundTaskInvalid; &#125; &#125;]; &#125; #endif// 判断一下从外界传递过来的session是否存在,如果不存在需要自己创建 NSURLSession *session = self.unownedSession; if (!self.unownedSession) &#123; NSURLSessionConfiguration *sessionConfig = [NSURLSessionConfiguration defaultSessionConfiguration]; sessionConfig.timeoutIntervalForRequest = 15; self.ownedSession = [NSURLSession sessionWithConfiguration:sessionConfig delegate:self delegateQueue:nil]; session = self.ownedSession; &#125; // 创建下载的任务 self.dataTask = [session dataTaskWithRequest:self.request]; //标记执行的状态 self.executing = YES; &#125; // 开始下载任务 [self.dataTask resume]; // 在任务开始的时候就需要通过取出其中的过程回调任务开始回调一些参数 if (self.dataTask) &#123; for (SDWebImageDownloaderProgressBlock progressBlock in [self callbacksForKey:kProgressCallbackKey]) &#123; progressBlock(0, NSURLResponseUnknownLength, self.request.URL); &#125; // 回到主线程通知已经开始下载 dispatch_async(dispatch_get_main_queue(), ^&#123; [[NSNotificationCenter defaultCenter] postNotificationName:SDWebImageDownloadStartNotification object:self]; &#125;); &#125; else &#123; // 如果没有开始下载就直接结束,回调结束的芳芳 [self callCompletionBlocksWithError:[NSError errorWithDomain:NSURLErrorDomain code:0 userInfo:@&#123;NSLocalizedDescriptionKey : @\"Connection can't be initialized\"&#125;]]; &#125; Class UIApplicationClass = NSClassFromString(@\"UIApplication\"); if(!UIApplicationClass || ![UIApplicationClass respondsToSelector:@selector(sharedApplication)]) &#123; return; &#125; if (self.backgroundTaskId != UIBackgroundTaskInvalid) &#123; UIApplication * app = [UIApplication performSelector:@selector(sharedApplication)]; [app endBackgroundTask:self.backgroundTaskId]; self.backgroundTaskId = UIBackgroundTaskInvalid; &#125;&#125; session回调方法的解读 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272//刚开始下载的时候会回调这个方法- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTaskdidReceiveResponse:(NSURLResponse *)response completionHandler:(void (^)(NSURLSessionResponseDisposition disposition))completionHandler &#123; // 如果响应的状态码不是304(表示没有任何修改和之前一样),并且不是400, if (![response respondsToSelector:@selector(statusCode)] || (((NSHTTPURLResponse *)response).statusCode &lt; 400 &amp;&amp; ((NSHTTPURLResponse *)response).statusCode != 304)) &#123; NSInteger expected = response.expectedContentLength &gt; 0 ? (NSInteger)response.expectedContentLength : 0; // 获得期望下载的大小 self.expectedSize = expected; // 执行下载过程中的回调 for (SDWebImageDownloaderProgressBlock progressBlock in [self callbacksForKey:kProgressCallbackKey]) &#123; //回到下载进度,期望下载的大小,以及url progressBlock(0, expected, self.request.URL); &#125; // 初始化储存下载数据的data集合 self.imageData = [[NSMutableData alloc] initWithCapacity:expected]; self.response = response; //回调主线程通知已经开始接收数据 dispatch_async(dispatch_get_main_queue(), ^&#123; [[NSNotificationCenter defaultCenter] postNotificationName:SDWebImageDownloadReceiveResponseNotification object:self]; &#125;); &#125; else &#123; NSUInteger code = ((NSHTTPURLResponse *)response).statusCode; // 304需要直接从系统中取出数据即可 if (code == 304) &#123; [self cancelInternal]; &#125; else &#123; [self.dataTask cancel]; &#125; // 通知停止下载 dispatch_async(dispatch_get_main_queue(), ^&#123; [[NSNotificationCenter defaultCenter] postNotificationName:SDWebImageDownloadStopNotification object:self]; &#125;); // 回到完成的参数 [self callCompletionBlocksWithError:[NSError errorWithDomain:NSURLErrorDomain code:((NSHTTPURLResponse *)response).statusCode userInfo:nil]]; // 标志状态finish = yes,executing=no,取消任务等等 [self done]; &#125; if (completionHandler) &#123; completionHandler(NSURLSessionResponseAllow); &#125;&#125;// 开始接受数据的过程不停回调的方法- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask didReceiveData:(NSData *)data &#123; // 拼接数据 [self.imageData appendData:data]; //如果选择的状态是渐进式的,就需要不断的显示图片. if ((self.options &amp; SDWebImageDownloaderProgressiveDownload) &amp;&amp; self.expectedSize &gt; 0) &#123; CGImageSourceRef imageSource = CGImageSourceCreateWithData((__bridge CFDataRef)self.imageData, NULL); // 如果还没有开始创建图片 if (width + height == 0) &#123; // 得到图片的一些属性 CFDictionaryRef properties = CGImageSourceCopyPropertiesAtIndex(imageSource, 0, NULL); //图片的高 宽 方向 if (properties) &#123; NSInteger orientationValue = -1; CFTypeRef val = CFDictionaryGetValue(properties, kCGImagePropertyPixelHeight); if (val) CFNumberGetValue(val, kCFNumberLongType, &amp;height); val = CFDictionaryGetValue(properties, kCGImagePropertyPixelWidth); if (val) CFNumberGetValue(val, kCFNumberLongType, &amp;width); val = CFDictionaryGetValue(properties, kCGImagePropertyOrientation); if (val) CFNumberGetValue(val, kCFNumberNSIntegerType, &amp;orientationValue); CFRelease(properties); #if SD_UIKIT || SD_WATCH orientation = [[self class] orientationFromPropertyValue:(orientationValue == -1 ? 1 : orientationValue)]; #endif &#125;&#125; // 当中间过程中不断地绘制图片 if (width + height &gt; 0 &amp;&amp; totalSize &lt; self.expectedSize) &#123; // 创建图片 CGImageRef partialImageRef = CGImageSourceCreateImageAtIndex(imageSource, 0, NULL); #if SD_UIKIT || SD_WATCH // 创建图片的高度 颜色空间 位图context,然后进行画图 if (partialImageRef) &#123; const size_t partialHeight = CGImageGetHeight(partialImageRef); CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB(); CGContextRef bmContext = CGBitmapContextCreate(NULL, width, height, 8, width * 4, colorSpace, kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst); CGColorSpaceRelease(colorSpace); if (bmContext) &#123; CGContextDrawImage(bmContext, (CGRect)&#123;.origin.x = 0.0f, .origin.y = 0.0f, .size.width = width, .size.height = partialHeight&#125;, partialImageRef); CGImageRelease(partialImageRef); partialImageRef = CGBitmapContextCreateImage(bmContext); CGContextRelease(bmContext); &#125; else &#123; CGImageRelease(partialImageRef); partialImageRef = nil; &#125; &#125; #endif if (partialImageRef) &#123; #if SD_UIKIT || SD_WATCH // 得到图片 UIImage *image = [UIImage imageWithCGImage:partialImageRef scale:1 orientation:orientation]; #elif SD_MAC UIImage *image = [[UIImage alloc] initWithCGImage:partialImageRef size:NSZeroSize]; #endif // 对图片进行一些列操作,并且返回 NSString *key = [[SDWebImageManager sharedManager] cacheKeyForURL:self.request.URL]; UIImage *scaledImage = [self scaledImageForKey:key image:image]; if (self.shouldDecompressImages) &#123; // 直接对图片进行解压 image = [UIImage decodedImageWithImage:scaledImage]; &#125; else &#123; image = scaledImage; &#125; CGImageRelease(partialImageRef); [self callCompletionBlocksWithImage:image imageData:nil error:nil finished:NO]; &#125; &#125; CFRelease(imageSource); &#125; for (SDWebImageDownloaderProgressBlock progressBlock in [self callbacksForKey:kProgressCallbackKey]) &#123; // 如果是普通option.只需要在过程中对调,不需要不断的显示 progressBlock(self.imageData.length, self.expectedSize, self.request.URL); &#125;&#125;// 询问代理数据是否需要储存在响应的缓存里- (void)URLSession:(NSURLSession *)session dataTask:(NSURLSessionDataTask *)dataTask willCacheResponse:(NSCachedURLResponse *)proposedResponse completionHandler:(void (^)(NSCachedURLResponse *cachedResponse))completionHandler &#123; responseFromCached = NO; // If this method is called, it means the response wasn't read from cache NSCachedURLResponse *cachedResponse = proposedResponse; // 如果是忽略掉本地的缓存的话,就直接将 if (self.request.cachePolicy == NSURLRequestReloadIgnoringLocalCacheData) &#123; cachedResponse = nil; &#125; if (completionHandler) &#123; completionHandler(cachedResponse); &#125;&#125;#pragma mark NSURLSessionTaskDelegate// 完成任务的回到- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task didCompleteWithError:(NSError *)error &#123; @synchronized(self) &#123; // 任务清空 self.dataTask = nil; // 通知停止和完成两个操作 dispatch_async(dispatch_get_main_queue(), ^&#123; [[NSNotificationCenter defaultCenter] postNotificationName:SDWebImageDownloadStopNotification object:self]; if (!error) &#123; [[NSNotificationCenter defaultCenter] postNotificationName:SDWebImageDownloadFinishNotification object:self]; &#125; &#125;); &#125; // 如果有错误,回调有错 if (error) &#123; [self callCompletionBlocksWithError:error]; &#125; else &#123; if ([self callbacksForKey:kCompletedCallbackKey].count &gt; 0) &#123; //如果option是忽略缓存,但是响应还是来自缓存,那么什么也不返回 if (self.options &amp; SDWebImageDownloaderIgnoreCachedResponse &amp;&amp; responseFromCached &amp;&amp; [[NSURLCache sharedURLCache] cachedResponseForRequest:self.request]) &#123; [self callCompletionBlocksWithImage:nil imageData:nil error:nil finished:YES]; &#125; else if (self.imageData) &#123; // 根据data生成有方向,jpg或者gif或者png图片 UIImage *image = [UIImage sd_imageWithData:self.imageData]; // 图片的真正尺寸 NSString *key = [[SDWebImageManager sharedManager] cacheKeyForURL:self.request.URL]; image = [self scaledImageForKey:key image:image]; // 压缩图片 if (!image.images) &#123; if (self.shouldDecompressImages) &#123; if (self.options &amp; SDWebImageDownloaderScaleDownLargeImages) &#123; #if SD_UIKIT || SD_WATCH image = [UIImage decodedAndScaledDownImageWithImage:image]; [self.imageData setData:UIImagePNGRepresentation(image)]; #endif &#125; else &#123; image = [UIImage decodedImageWithImage:image]; &#125; &#125; &#125; //进一步判断图片是不是空 if (CGSizeEqualToSize(image.size, CGSizeZero)) &#123; [self callCompletionBlocksWithError:[NSError errorWithDomain:SDWebImageErrorDomain code:0 userInfo:@&#123;NSLocalizedDescriptionKey : @\"Downloaded image has 0 pixels\"&#125;]]; &#125; else &#123; [self callCompletionBlocksWithImage:image imageData:self.imageData error:nil finished:YES]; &#125; &#125; else &#123; [self callCompletionBlocksWithError:[NSError errorWithDomain:SDWebImageErrorDomain code:0 userInfo:@&#123;NSLocalizedDescriptionKey : @\"Image data is nil\"&#125;]]; &#125; &#125; &#125; [self done];&#125;","content":"<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/header/image/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-SDWebImage.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<blockquote>\n<p><a href=\"https://github.com/rs/SDWebImage\" target=\"_blank\" rel=\"external\">SDWebImage</a>是我们经常使用的一个异步图片加载库，大大提高了我们的开发效率。它支持从网络中下载且缓存图片，并设置图片到对应的UIImageView控件或者UIButton控件上。</p>\n</blockquote>\n<h2 id=\"SDWebImage-概论\"><a href=\"#SDWebImage-概论\" class=\"headerlink\" title=\"SDWebImage 概论\"></a>SDWebImage 概论</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.提供了一个UIImageView的category用来加载网络图片并且对网络图片的缓存进行管理</div><div class=\"line\">2.采用异步方式来下载网络图片</div><div class=\"line\">3.采用异步方式，使用memory＋disk来缓存网络图片，自动管理缓存。</div><div class=\"line\">4.支持GIF动画,支持JEPG,JPG格式。</div><div class=\"line\">5.支持WebP格式</div><div class=\"line\">6.同一个URL的网络图片不会被重复下载</div><div class=\"line\">7.失效的URL不会被无限重试</div><div class=\"line\">8.耗时操作都在子线程，确保不会阻塞主线程</div><div class=\"line\">9.使用GCD和ARC</div><div class=\"line\">10.支持Arm64</div></pre></td></tr></table></figure>\n<p>##SDWebImage知识点的梳理</p>\n<ol>\n<li><p>正常程序退出后，会在几秒内停止工作,要想申请更长的时间，需要用到<code>beginBackgroundTaskWithExpirationHandler</code></p>\n</li>\n<li><p><code>endBackgroundTask</code>一定要成对出现</p>\n</li>\n<li><p>使用<code>NSdirectoryEnumerator</code>遍历所有的缓存文件不会有性能耗时的问题,检查某个文件是否存在或者检查是否为文件夹都会检查文件的inode 数据,而这个inode中包括file的各种attribute.</p>\n</li>\n<li><p>使用NSCache作为内存储存比NSDictionary的好处是:当系统资源要耗尽的时候可以自动的删减,NSCache不会自动的拷贝键,并且是线程安全的,比NSDictionary线程安全.</p>\n</li>\n<li><p>线程中<code>urlCallbacks</code>的增加,改动都是使用所有增改回调集合<code>URLCallbacks</code>的操作使用<code>dispatch_barrier_sync</code>放入队列<code>barrierQueue</code>中，而查询<code>URLCallbakcs</code>的操作只需使用<code>dispatch_sync</code>放入队列<code>barrierQueue</code>中。</p>\n</li>\n</ol>\n<p>要先说一些系统中锁的问题:</p>\n<p>同步锁<code>@synchronized(self)</code>在<code>self</code>上加一个同步锁,频繁滥用的话会导致程序会等待另外一段与此代码无关的执行完毕之后才能执行,会耗时.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[_lock lock];</div><div class=\"line\">//</div><div class=\"line\">[_lock unlock];</div></pre></td></tr></table></figure>\n<p>这样遇到死锁也会很麻烦,并且效率也不高.<br>一般情况下想要为代码加锁,最好使用CGD.将所有的操作放到串行队列中执行.而对于并行队列的话就需要,读取的话可以并发进行,并没有任何改动,而增加或者修改数据的话必须保证此时不能进行读取数据,那么可以使用<code>栅栏(barrier)</code>来设置.<strong>在队列中栅栏块必须单独执行,不能与其他一起执行.这对于并发队列来说,如果并发队列发下下面要处理的是栅栏块,那么会一直等前面所有的并发块执行完毕后才执行这个栅栏,而等栅栏执行完毕后才执行其后的并发任务</strong>.所以增加和修改使用栅栏可以保证线程安全.</p>\n<p>5.图片的解码.当你用 <code>UIImage</code> 或 <code>CGImageSource</code> 的那几个方法创建图片时，图片数据并不会立刻解码。图片设置到 <code>UIImageView</code> 或者 <code>CALayer.contents</code> 中去，并且 <code>CALayer</code> 被提交到 <code>GPU</code> 前，<code>CGImage</code> 中的数据才会得到解码。这一步是发生在主线程的，并且不可避免。如果想要绕开这个机制，常见的做法是在后台线程先把图片绘制到 <code>CGBitmapContext</code> 中，然后从 <code>Bitmap</code> 直接创建图片。目前常见的网络图片库都自带这个功能。<code>SDWebImage</code>就是在后台生成这种位图.</p>\n<h2 id=\"SDWebImageManager结构\"><a href=\"#SDWebImageManager结构\" class=\"headerlink\" title=\"SDWebImageManager结构\"></a>SDWebImageManager结构</h2><p>关于结构，我们可以用一张流程图说明<br><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/SDWebImage%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png?watermark/2/text/QExpYmVyYWxpc20=/font/5a6L5L2T/fontsize/800/fill/IzhBMTgxOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10\" alt=\"\"></p>\n<h2 id=\"SDWebImage的工作流程\"><a href=\"#SDWebImage的工作流程\" class=\"headerlink\" title=\"SDWebImage的工作流程\"></a>SDWebImage的工作流程</h2><p><img src=\"http://okhqmtd8q.bkt.clouddn.com/SDWebImage%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png?watermark/2/text/QExpYmVyYWxpc20=/font/5a6L5L2T/fontsize/800/fill/IzhBMTgxOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10\" alt=\"\"></p>\n<h2 id=\"SDWebImageManager\"><a href=\"#SDWebImageManager\" class=\"headerlink\" title=\"SDWebImageManager\"></a>SDWebImageManager</h2><p>主要管理的类,下载的主要方法就是在这个类中</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">id</span> &lt;SDWebImageOperation&gt;)loadImageWithURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url</div><div class=\"line\">                                     options:(SDWebImageOptions)options</div><div class=\"line\">                                    progress:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock</div><div class=\"line\">                                   completed:(<span class=\"keyword\">nullable</span> SDInternalCompletionBlock)completedBlock &#123;</div><div class=\"line\">                                   </div><div class=\"line\">    <span class=\"comment\">// 断言一下完成这个回调如果是预先下载这个类进行压在</span></div><div class=\"line\">    <span class=\"built_in\">NSAssert</span>(completedBlock != <span class=\"literal\">nil</span>, <span class=\"string\">@\"If you mean to prefetch the image, use -[SDWebImagePrefetcher prefetchURLs] instead\"</span>);</div><div class=\"line\">    <span class=\"comment\">// 判断一下url是否是正确的url</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ([url isKindOfClass:<span class=\"built_in\">NSString</span>.class])</div><div class=\"line\">    &#123;</div><div class=\"line\">        url = [<span class=\"built_in\">NSURL</span> URLWithString:(<span class=\"built_in\">NSString</span> *)url];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (![url isKindOfClass:<span class=\"built_in\">NSURL</span>.class]) </div><div class=\"line\">    &#123;</div><div class=\"line\">        url = <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 对于operation再次包装一层,对应一个operation</span></div><div class=\"line\">    __block SDWebImageCombinedOperation *operation = [SDWebImageCombinedOperation new];</div><div class=\"line\">    </div><div class=\"line\">    __<span class=\"keyword\">weak</span> SDWebImageCombinedOperation *weakOperation = operation;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 判断一下是不是之前已经下载失败过的url</span></div><div class=\"line\">    <span class=\"built_in\">BOOL</span> isFailedUrl = <span class=\"literal\">NO</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (url) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.failedURLs) </div><div class=\"line\">        &#123;</div><div class=\"line\">            isFailedUrl = [<span class=\"keyword\">self</span>.failedURLs containsObject:url];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//如果是url为空或者不要求失败再次下载并且已知已经下载失败过一次的话,直接回掉完成的block</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (url.absoluteString.length == <span class=\"number\">0</span> || (!(options &amp; SDWebImageRetryFailed) &amp;&amp; isFailedUrl)) </div><div class=\"line\">    &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> callCompletionBlockForOperation:operation completion:completedBlock error:[<span class=\"built_in\">NSError</span> errorWithDomain:<span class=\"built_in\">NSURLErrorDomain</span> code:<span class=\"built_in\">NSURLErrorFileDoesNotExist</span> userInfo:<span class=\"literal\">nil</span>] url:url];</div><div class=\"line\">        <span class=\"keyword\">return</span> operation;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 直接加入到正在下载的operation数组中</span></div><div class=\"line\">    <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.runningOperations) </div><div class=\"line\">    &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.runningOperations addObject:operation];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 获取ulr的字符串,也就是key</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *key = [<span class=\"keyword\">self</span> cacheKeyForURL:url];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 从磁盘中获取图片的方法</span></div><div class=\"line\">    operation.cacheOperation = [<span class=\"keyword\">self</span>.imageCache queryCacheOperationForKey:key done:^(<span class=\"built_in\">UIImage</span> *cachedImage, <span class=\"built_in\">NSData</span> *cachedData, SDImageCacheType cacheType) &#123;</div><div class=\"line\">        <span class=\"comment\">// 因为是异步执行,可能被取消任务,所以需要先检查一下</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (operation.isCancelled) </div><div class=\"line\">        &#123;</div><div class=\"line\">            [<span class=\"keyword\">self</span> safelyRemoveOperationFromRunning:operation];</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 如果并没有缓存图片或者 或者要求即使有缓存图片也要刷新  又或者是要求下载图片,那么就需要重新从网上下载图片</span></div><div class=\"line\">        <span class=\"keyword\">if</span> ((!cachedImage || options &amp; SDWebImageRefreshCached) &amp;&amp; (![<span class=\"keyword\">self</span>.delegate respondsToSelector:<span class=\"keyword\">@selector</span>(imageManager:shouldDownloadImageForURL:)] || [<span class=\"keyword\">self</span>.delegate imageManager:<span class=\"keyword\">self</span> shouldDownloadImageForURL:url])) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">// 如果有缓存图片,但是要求不停刷新缓存图片,那么就先显示上缓存图片,进行完成的回调</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached)</div><div class=\"line\">            &#123;</div><div class=\"line\">                [<span class=\"keyword\">self</span> callCompletionBlockForOperation:weakOperation completion:completedBlock image:cachedImage data:cachedData error:<span class=\"literal\">nil</span> cacheType:cacheType finished:<span class=\"literal\">YES</span> url:url];</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">//对于下载要求的一些整理</span></div><div class=\"line\">            SDWebImageDownloaderOptions downloaderOptions = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"comment\">// 下载优先级</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageLowPriority) downloaderOptions |= SDWebImageDownloaderLowPriority;</div><div class=\"line\">            <span class=\"comment\">// 渐进式的显示</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageProgressiveDownload) downloaderOptions |= SDWebImageDownloaderProgressiveDownload;</div><div class=\"line\">            <span class=\"comment\">// 刷新缓存,需要先进行缓存</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageRefreshCached) downloaderOptions |= SDWebImageDownloaderUseNSURLCache;</div><div class=\"line\">            <span class=\"comment\">// 后台继续下载</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageContinueInBackground) downloaderOptions |= SDWebImageDownloaderContinueInBackground;</div><div class=\"line\">            <span class=\"comment\">// 使用cookie</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageHandleCookies) downloaderOptions |= SDWebImageDownloaderHandleCookies;</div><div class=\"line\">            <span class=\"comment\">// 允许通过不可靠的认证     </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageAllowInvalidSSLCertificates) downloaderOptions |= SDWebImageDownloaderAllowInvalidSSLCertificates;</div><div class=\"line\">            <span class=\"comment\">// 高优先级下载</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageHighPriority) downloaderOptions |= SDWebImageDownloaderHighPriority;</div><div class=\"line\">            <span class=\"comment\">// 自动缩小大图</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (options &amp; SDWebImageScaleDownLargeImages) downloaderOptions |= SDWebImageDownloaderScaleDownLargeImages;</div><div class=\"line\">            <span class=\"comment\">// 有缓存也要刷新的时候就不用进行渐渐显示的样式,并且要忽略缓存的响应内容</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (cachedImage &amp;&amp; options &amp; SDWebImageRefreshCached)</div><div class=\"line\">            &#123;</div><div class=\"line\">                downloaderOptions &amp;= ~SDWebImageDownloaderProgressiveDownload;</div><div class=\"line\">                downloaderOptions |= SDWebImageDownloaderIgnoreCachedResponse;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">// 调用下载的方法进行下载,并且设置完成之后的回调方法</span></div><div class=\"line\">            SDWebImageDownloadToken *subOperationToken = [<span class=\"keyword\">self</span>.imageDownloader downloadImageWithURL:url options:downloaderOptions progress:progressBlock completed:^(<span class=\"built_in\">UIImage</span> *downloadedImage, <span class=\"built_in\">NSData</span> *downloadedData, <span class=\"built_in\">NSError</span> *error, <span class=\"built_in\">BOOL</span> finished) &#123;</div><div class=\"line\">            </div><div class=\"line\">                __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class=\"line\">                <span class=\"comment\">// 有错或者取消,并且添加到失败的url数组中进行记录</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (!strongOperation || strongOperation.isCancelled) </div><div class=\"line\">                &#123;</div><div class=\"line\">    </div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (error)</div><div class=\"line\">                &#123; </div><div class=\"line\">                    [<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock error:error url:url];</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (   error.code != <span class=\"built_in\">NSURLErrorNotConnectedToInternet</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorCancelled</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorTimedOut</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorInternationalRoamingOff</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorDataNotAllowed</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorCannotFindHost</span></div><div class=\"line\">                        &amp;&amp; error.code != <span class=\"built_in\">NSURLErrorCannotConnectToHost</span>) </div><div class=\"line\">                        &#123;</div><div class=\"line\">                            <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.failedURLs) </div><div class=\"line\">                            &#123;</div><div class=\"line\">                                [<span class=\"keyword\">self</span>.failedURLs addObject:url];</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span>    </div><div class=\"line\">                &#123;</div><div class=\"line\">                </div><div class=\"line\">                    <span class=\"keyword\">if</span> ((options &amp; SDWebImageRetryFailed))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>.failedURLs) </div><div class=\"line\">                        &#123;</div><div class=\"line\">                            [<span class=\"keyword\">self</span>.failedURLs removeObject:url];</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    </div><div class=\"line\">                    <span class=\"comment\">// 是否要储存到内存中</span></div><div class=\"line\">                    <span class=\"built_in\">BOOL</span> cacheOnDisk = !(options &amp; SDWebImageCacheMemoryOnly);</div><div class=\"line\">                    </div><div class=\"line\">                    <span class=\"comment\">// 有缓存图片,但是没有下载图片的时候就啥也不做了</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (options &amp; SDWebImageRefreshCached &amp;&amp; cachedImage &amp;&amp; !downloadedImage) </div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"comment\">// 有下载图片但是没有动态图,但是要求是动态图</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (downloadedImage &amp;&amp; (!downloadedImage.images || (options &amp; SDWebImageTransformAnimatedImage)) &amp;&amp; [<span class=\"keyword\">self</span>.delegate respondsToSelector:<span class=\"keyword\">@selector</span>(imageManager:transformDownloadedImage:withURL:)]) </div><div class=\"line\">                    &#123;</div><div class=\"line\">                            <span class=\"comment\">// 图片转换成动态图片</span></div><div class=\"line\">                    <span class=\"built_in\">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class=\"number\">0</span>), ^&#123;</div><div class=\"line\">                           </div><div class=\"line\">                            <span class=\"built_in\">UIImage</span> *transformedImage = [<span class=\"keyword\">self</span>.delegate imageManager:<span class=\"keyword\">self</span> transformDownloadedImage:downloadedImage withURL:url];</div><div class=\"line\"></div><div class=\"line\">                            <span class=\"keyword\">if</span> (transformedImage &amp;&amp; finished)</div><div class=\"line\">                            &#123;</div><div class=\"line\">                                <span class=\"built_in\">BOOL</span> imageWasTransformed = ![transformedImage isEqual:downloadedImage];</div><div class=\"line\">                                <span class=\"comment\">// 储存图片</span></div><div class=\"line\">                                [<span class=\"keyword\">self</span>.imageCache storeImage:transformedImage imageData:(imageWasTransformed ? <span class=\"literal\">nil</span> : downloadedData) forKey:key toDisk:cacheOnDisk completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            </div><div class=\"line\">                            [<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:transformedImage data:downloadedData error:<span class=\"literal\">nil</span> cacheType:SDImageCacheTypeNone finished:finished url:url];</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">else</span> </div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (downloadedImage &amp;&amp; finished) </div><div class=\"line\">                        &#123;</div><div class=\"line\">                            [<span class=\"keyword\">self</span>.imageCache storeImage:downloadedImage imageData:downloadedData forKey:key toDisk:cacheOnDisk completion:<span class=\"literal\">nil</span>];</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        [<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:downloadedImage data:downloadedData error:<span class=\"literal\">nil</span> cacheType:SDImageCacheTypeNone finished:finished url:url];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">// 将operation 移除</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (finished)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    [<span class=\"keyword\">self</span> safelyRemoveOperationFromRunning:strongOperation];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;];</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">// 下载过程中删除这个操作的一些回调</span></div><div class=\"line\">            operation.cancelBlock = ^&#123;</div><div class=\"line\">            </div><div class=\"line\">                [<span class=\"keyword\">self</span>.imageDownloader cancel:subOperationToken];</div><div class=\"line\">                __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class=\"line\">                [<span class=\"keyword\">self</span> safelyRemoveOperationFromRunning:strongOperation];</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">         <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cachedImage) </div><div class=\"line\">         &#123;  </div><div class=\"line\">            <span class=\"comment\">// 有缓存图片直接用缓存图片</span></div><div class=\"line\">            __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class=\"line\">            [<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:cachedImage data:cachedData error:<span class=\"literal\">nil</span> cacheType:cacheType finished:<span class=\"literal\">YES</span> url:url];</div><div class=\"line\">            [<span class=\"keyword\">self</span> safelyRemoveOperationFromRunning:operation];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">// Image not in cache and download disallowed by delegate</span></div><div class=\"line\">            __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span>(weakOperation) strongOperation = weakOperation;</div><div class=\"line\">            [<span class=\"keyword\">self</span> callCompletionBlockForOperation:strongOperation completion:completedBlock image:<span class=\"literal\">nil</span> data:<span class=\"literal\">nil</span> error:<span class=\"literal\">nil</span> cacheType:SDImageCacheTypeNone finished:<span class=\"literal\">YES</span> url:url];</div><div class=\"line\">            [<span class=\"keyword\">self</span> safelyRemoveOperationFromRunning:operation];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> operation;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"SDWebImageCache\"><a href=\"#SDWebImageCache\" class=\"headerlink\" title=\"SDWebImageCache\"></a>SDWebImageCache</h3><p><code>SDSebImageCache</code>分为<code>内存储存</code>和<code>磁盘储存</code>，磁盘储存的路径默认是<strong><code>(../Library/Caches/default/com.hackemist.SDWebImageCache.default/ )</code></strong>下的文件夹中.当然也可以自定义其他路径。</p>\n<p>这个类主要包括:</p>\n<ul>\n<li>读取图片，</li>\n<li>保存下载图片，</li>\n<li>删除某个或者整个文件夹图片，</li>\n<li>删除已经过期或者超过内存的图片，</li>\n<li>计算磁盘中图片的大小，个数等等。</li>\n</ul>\n<p>需要逐个解读。</p>\n<p>方法初始化的解读：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nonnull</span> <span class=\"keyword\">instancetype</span>)initWithNamespace:(<span class=\"keyword\">nonnull</span> <span class=\"built_in\">NSString</span> *)ns  diskCacheDirectory:(<span class=\"keyword\">nonnull</span> <span class=\"built_in\">NSString</span> *)directory &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init])) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *fullNamespace = [<span class=\"string\">@\"com.hackemist.SDWebImageCache.\"</span> stringByAppendingString:ns];</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"comment\">// 创建一个单线程</span></div><div class=\"line\">        _ioQueue = dispatch_queue_create(<span class=\"string\">\"com.hackemist.SDWebImageCache\"</span>, DISPATCH_QUEUE_SERIAL);</div><div class=\"line\">        </div><div class=\"line\">   <span class=\"comment\">//  默认配置图片可压缩,不储存在icloud,储存在内存中,最长储存时间是1周,不限制储存大小.   </span></div><div class=\"line\">        _config = [[SDImageCacheConfig alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//初始化内存储存的类</span></div><div class=\"line\">        _memCache = [[AutoPurgeCache alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        _memCache.name = fullNamespace;</div><div class=\"line\"><span class=\"comment\">// 初始化储存文件夹的路径     </span></div><div class=\"line\"> <span class=\"keyword\">if</span> (directory != <span class=\"literal\">nil</span>) </div><div class=\"line\"> &#123;</div><div class=\"line\">      _diskCachePath = [directory stringByAppendingPathComponent:fullNamespace];</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">else</span> </div><div class=\"line\"> &#123;</div><div class=\"line\">      <span class=\"built_in\">NSString</span> *path = [<span class=\"keyword\">self</span> makeDiskCachePath:ns];</div><div class=\"line\">      _diskCachePath = path;       </div><div class=\"line\"> &#125;</div><div class=\"line\">    </div><div class=\"line\">  <span class=\"built_in\">dispatch_sync</span>(_ioQueue, ^&#123;</div><div class=\"line\">  </div><div class=\"line\">     _fileManager = [<span class=\"built_in\">NSFileManager</span> new];</div><div class=\"line\"> &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 注册内存警告,终止应用,退到后台的通知</span></div><div class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></div><div class=\"line\">                                         selector:<span class=\"keyword\">@selector</span>(clearMemory)</div><div class=\"line\">                                             name:<span class=\"built_in\">UIApplicationDidReceiveMemoryWarningNotification</span></div><div class=\"line\">                                           object:<span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></div><div class=\"line\">                                         selector:<span class=\"keyword\">@selector</span>(deleteOldFiles)</div><div class=\"line\">                                             name:<span class=\"built_in\">UIApplicationWillTerminateNotification</span></div><div class=\"line\">                                           object:<span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></div><div class=\"line\">                                         selector:<span class=\"keyword\">@selector</span>(backgroundDeleteOldFiles)</div><div class=\"line\">                                             name:<span class=\"built_in\">UIApplicationDidEnterBackgroundNotification</span></div><div class=\"line\">                                           object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>储存图片的关键代码的解读:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)storeImage:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)image</div><div class=\"line\">         imageData:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSData</span> *)imageData</div><div class=\"line\">            forKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key</div><div class=\"line\">            toDisk:(<span class=\"built_in\">BOOL</span>)toDisk</div><div class=\"line\">        completion:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</div><div class=\"line\">        </div><div class=\"line\"><span class=\"comment\">// key值图片的url路径,然后经过MD5(128位)加密之后,把加密后的字符串变成以16进制的形式变成名字.</span></div><div class=\"line\"><span class=\"comment\">// 没有图片,并且没有图片名字的情况下直接返回</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!image || !key)</div><div class=\"line\"> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (completionBlock) </div><div class=\"line\">    &#123;</div><div class=\"line\">        completionBlock();    </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\">    <span class=\"comment\">// 判断是否保存到内存中</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.config.shouldCacheImagesInMemory) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">// 图片的长*宽*scale*scale</span></div><div class=\"line\">        <span class=\"built_in\">NSUInteger</span> cost = SDCacheCostForImage(image);</div><div class=\"line\">        <span class=\"comment\">// 以图片名字为key值储存图片</span></div><div class=\"line\">        [<span class=\"keyword\">self</span>.memCache setObject:image forKey:key cost:cost];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\"> <span class=\"comment\">// 根据是否保存到磁盘中   </span></div><div class=\"line\"><span class=\"keyword\">if</span> (toDisk) </div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//异步储存图片</span></div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\"></div><div class=\"line\">     <span class=\"built_in\">NSData</span> *data = imageData;   </div><div class=\"line\">      <span class=\"keyword\">if</span> (!data &amp;&amp; image) </div><div class=\"line\">      &#123;</div><div class=\"line\">            <span class=\"comment\">//获取图片的类型,根据图片data的第一个字节判断类型:jpeg,png,gif,tiff,webP,未知类型    </span></div><div class=\"line\">            SDImageFormat imageFormatFromData = [<span class=\"built_in\">NSData</span> sd_imageFormatForImageData:data];</div><div class=\"line\">            <span class=\"comment\">// 根据图片类型,生成不同的data(jpg,png)</span></div><div class=\"line\">            data = [image sd_imageDataAsFormat:imageFormatFromData];</div><div class=\"line\">     &#125;</div><div class=\"line\">     </div><div class=\"line\"> <span class=\"comment\">// 根据图片的路径,生成根据</span></div><div class=\"line\"> [_fileManager createFileAtPath:cachePathForKey contents:imageData attributes:<span class=\"literal\">nil</span>]</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">//这个方法写入文件中     </span></div><div class=\"line\"> [<span class=\"keyword\">self</span> storeImageDataToDisk:data forKey:key];</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">// 之后在主线程进行回调</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (completionBlock) </div><div class=\"line\">    &#123;     </div><div class=\"line\">           <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                    completionBlock();</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">     <span class=\"keyword\">else</span> </div><div class=\"line\">     &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (completionBlock) </div><div class=\"line\">        &#123;</div><div class=\"line\">            completionBlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>读取图片关键代码解读</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)imageFromCacheForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\">- </div><div class=\"line\">    <span class=\"comment\">// 现根据key从内存中取图片</span></div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *image = [<span class=\"keyword\">self</span> imageFromMemoryCacheForKey:key];</div><div class=\"line\">    <span class=\"keyword\">if</span> (image) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> image;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 然后再次从磁盘中取图片</span></div><div class=\"line\">    image = [<span class=\"keyword\">self</span> imageFromDiskCacheForKey:key];</div><div class=\"line\">    <span class=\"keyword\">return</span> image;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 磁盘中取出图片</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">UIImage</span> *)diskImageForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 根据key从磁盘中找出来是data数据</span></div><div class=\"line\">    <span class=\"built_in\">NSData</span> *data = [<span class=\"keyword\">self</span> diskImageDataBySearchingAllPathsForKey:key];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (data) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//根据data判断生成的图片是普通图片或者是gif(动画效果)</span></div><div class=\"line\">        <span class=\"comment\">// 生成的CGImage等系统方法判断出图片的方向,生成图片方向的图片,普通方法生成的朝上的,其他方向需要自己计算.</span></div><div class=\"line\">        <span class=\"built_in\">UIImage</span> *image = [<span class=\"built_in\">UIImage</span> sd_imageWithData:data];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 根据屏幕的生成@2x 和@3x图片</span></div><div class=\"line\">        image = [<span class=\"keyword\">self</span> scaledImageForKey:key image:image];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 根据是否需要压缩图片进行图片压缩        </span></div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">self</span>.config.shouldDecompressImages)</div><div class=\"line\">         &#123;</div><div class=\"line\">            <span class=\"comment\">//将图片的透明度去掉,重新生成位图</span></div><div class=\"line\">            image = [<span class=\"built_in\">UIImage</span> decodedImageWithImage:image];</div><div class=\"line\">         &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> image;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在磁盘各个路径寻找图片</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSData</span> *)diskImageDataBySearchingAllPathsForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key </div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 默认路径</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> *defaultPath = [<span class=\"keyword\">self</span> defaultCachePathForKey:key];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 默认路径下找图片</span></div><div class=\"line\">    <span class=\"built_in\">NSData</span> *data = [<span class=\"built_in\">NSData</span> dataWithContentsOfFile:defaultPath];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (data)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//如果没有找到, 去掉图片后缀之后再次查找一遍</span></div><div class=\"line\">    data = [<span class=\"built_in\">NSData</span> dataWithContentsOfFile:defaultPath.stringByDeletingPathExtension];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (data) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 如果还么有找到,在一些自定义的刻度路径下查找图片</span></div><div class=\"line\">    <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *customPaths = [<span class=\"keyword\">self</span>.customPaths <span class=\"keyword\">copy</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">NSString</span> *path <span class=\"keyword\">in</span> customPaths)</div><div class=\"line\">     &#123;</div><div class=\"line\">        <span class=\"built_in\">NSString</span> *filePath = [<span class=\"keyword\">self</span> cachePathForKey:key inPath:path];</div><div class=\"line\">        <span class=\"built_in\">NSData</span> *imageData = [<span class=\"built_in\">NSData</span> dataWithContentsOfFile:filePath];</div><div class=\"line\">        <span class=\"keyword\">if</span> (imageData) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> imageData;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 同样也查找一遍去掉后缀之后的</span></div><div class=\"line\">        imageData = [<span class=\"built_in\">NSData</span> dataWithContentsOfFile:filePath.stringByDeletingPathExtension];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (imageData) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> imageData;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>删除某个图片或者删除这个文件夹</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 删除某张图片</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)removeImageForKey:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSString</span> *)key fromDisk:(<span class=\"built_in\">BOOL</span>)fromDisk withCompletion:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completion &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"literal\">nil</span>) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 如果内存中也应该删除</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.config.shouldCacheImagesInMemory)</div><div class=\"line\">     &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span>.memCache removeObjectForKey:key];</div><div class=\"line\">     &#125;</div><div class=\"line\">     </div><div class=\"line\">    <span class=\"comment\">// 从磁盘上删除</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (fromDisk) </div><div class=\"line\">    &#123;</div><div class=\"line\">    <span class=\"comment\">// 拼接好文件路径,异步删除,主线程进行回调</span></div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">            [_fileManager removeItemAtPath:[<span class=\"keyword\">self</span> defaultCachePathForKey:key] error:<span class=\"literal\">nil</span>];</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> (completion)</div><div class=\"line\">             &#123;</div><div class=\"line\">                <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                    completion();</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (completion)</div><div class=\"line\">    &#123;</div><div class=\"line\">        completion();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 删除真个文件夹下面的图片</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)clearDiskOnCompletion:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completion &#123;</div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">        <span class=\"comment\">// 删除真个文件夹</span></div><div class=\"line\">        [_fileManager removeItemAtPath:<span class=\"keyword\">self</span>.diskCachePath error:<span class=\"literal\">nil</span>];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 删除之后再次创建默认文件夹</span></div><div class=\"line\">        [_fileManager createDirectoryAtPath:<span class=\"keyword\">self</span>.diskCachePath</div><div class=\"line\">                withIntermediateDirectories:<span class=\"literal\">YES</span></div><div class=\"line\">                                 attributes:<span class=\"literal\">nil</span></div><div class=\"line\">                                      error:<span class=\"literal\">NULL</span>];</div><div class=\"line\">        <span class=\"comment\">// 主线程回掉</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (completion) &#123;</div><div class=\"line\">            <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                completion();</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>删除过期或者超过内存文件,主要是通过接受到通知自己的删除,核心代码解读</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)deleteOldFilesWithCompletionBlock:(<span class=\"keyword\">nullable</span> SDWebImageNoParamsBlock)completionBlock &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//异步进行删除</span></div><div class=\"line\">    <span class=\"built_in\">dispatch_async</span>(<span class=\"keyword\">self</span>.ioQueue, ^&#123;</div><div class=\"line\">        <span class=\"comment\">// 找到储存文件的文件夹默认路径</span></div><div class=\"line\">        <span class=\"built_in\">NSURL</span> *diskCacheURL = [<span class=\"built_in\">NSURL</span> fileURLWithPath:<span class=\"keyword\">self</span>.diskCachePath isDirectory:<span class=\"literal\">YES</span>];</div><div class=\"line\">        <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSString</span> *&gt; *resourceKeys = @[<span class=\"built_in\">NSURLIsDirectoryKey</span>, <span class=\"built_in\">NSURLContentModificationDateKey</span>, <span class=\"built_in\">NSURLTotalFileAllocatedSizeKey</span>];</div><div class=\"line\">        <span class=\"comment\">// 查找这些文件    </span></div><div class=\"line\">        <span class=\"built_in\">NSDirectoryEnumerator</span> *fileEnumerator = [_fileManager enumeratorAtURL:diskCacheURL</div><div class=\"line\">                                                    includingPropertiesForKeys:resourceKeys</div><div class=\"line\">                                                                      options:<span class=\"built_in\">NSDirectoryEnumerationSkipsHiddenFiles</span></div><div class=\"line\">                                                                 errorHandler:<span class=\"literal\">NULL</span>];</div><div class=\"line\">        <span class=\"comment\">// 过期文件的日期</span></div><div class=\"line\">        <span class=\"built_in\">NSDate</span> *expirationDate = [<span class=\"built_in\">NSDate</span> dateWithTimeIntervalSinceNow:-<span class=\"keyword\">self</span>.config.maxCacheAge];</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"built_in\">NSMutableDictionary</span>&lt;<span class=\"built_in\">NSURL</span> *, <span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, <span class=\"keyword\">id</span>&gt; *&gt; *cacheFiles = [<span class=\"built_in\">NSMutableDictionary</span> dictionary];</div><div class=\"line\"> <span class=\"built_in\">NSUInteger</span> currentCacheSize = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">NSMutableArray</span>&lt;<span class=\"built_in\">NSURL</span> *&gt; *urlsToDelete = [[<span class=\"built_in\">NSMutableArray</span> alloc] init];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 将查到的这些文件过滤出需要删除的文件</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">NSURL</span> *fileURL <span class=\"keyword\">in</span> fileEnumerator) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">NSError</span> *error;</div><div class=\"line\">            <span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, <span class=\"keyword\">id</span>&gt; *resourceValues = [fileURL resourceValuesForKeys:resourceKeys error:&amp;error];</div><div class=\"line\">            <span class=\"comment\">// 过滤掉是文件夹以及出错的路径</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (error || !resourceValues || [resourceValues[<span class=\"built_in\">NSURLIsDirectoryKey</span>] boolValue]) </div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">// 算出文件的日期</span></div><div class=\"line\">            <span class=\"built_in\">NSDate</span> *modificationDate = resourceValues[<span class=\"built_in\">NSURLContentModificationDateKey</span>];</div><div class=\"line\">            <span class=\"comment\">// 比较是否已经过期,过期文件加入一个数组中</span></div><div class=\"line\">            <span class=\"keyword\">if</span> ([[modificationDate laterDate:expirationDate] isEqualToDate:expirationDate]) </div><div class=\"line\">            &#123;</div><div class=\"line\">                [urlsToDelete addObject:fileURL];</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">//计算存留下来的文件的大小</span></div><div class=\"line\">            <span class=\"built_in\">NSNumber</span> *totalAllocatedSize = resourceValues[<span class=\"built_in\">NSURLTotalFileAllocatedSizeKey</span>];</div><div class=\"line\">            currentCacheSize += totalAllocatedSize.unsignedIntegerValue;</div><div class=\"line\">cacheFiles[fileURL] = resourceValues;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"comment\">// 删除过期的文件    </span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">NSURL</span> *fileURL <span class=\"keyword\">in</span> urlsToDelete)</div><div class=\"line\">        &#123;</div><div class=\"line\">            [_fileManager removeItemAtURL:fileURL error:<span class=\"literal\">nil</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 判断剩下的文件总共大小是否多于设置的最大值     </span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.config.maxCacheSize &gt; <span class=\"number\">0</span> &amp;&amp; currentCacheSize &gt; <span class=\"keyword\">self</span>.config.maxCacheSize) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">// 目标值</span></div><div class=\"line\">            <span class=\"keyword\">const</span> <span class=\"built_in\">NSUInteger</span> desiredCacheSize = <span class=\"keyword\">self</span>.config.maxCacheSize / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 按日期最靠前的方式进行排序,并且可以并发进行排序     </span></div><div class=\"line\">            <span class=\"built_in\">NSArray</span>&lt;<span class=\"built_in\">NSURL</span> *&gt; *sortedFiles = [cacheFiles keysSortedByValueWithOptions:<span class=\"built_in\">NSSortConcurrent</span>   usingComparator:^<span class=\"built_in\">NSComparisonResult</span>(<span class=\"keyword\">id</span> obj1, <span class=\"keyword\">id</span> obj2) &#123;                                                                       </div><div class=\"line\">            <span class=\"keyword\">return</span> [obj1[<span class=\"built_in\">NSURLContentModificationDateKey</span>] compare:obj2[<span class=\"built_in\">NSURLContentModificationDateKey</span>]];</div><div class=\"line\">            &#125;];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 删除多余的文件</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">NSURL</span> *fileURL <span class=\"keyword\">in</span> sortedFiles) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ([_fileManager removeItemAtURL:fileURL error:<span class=\"literal\">nil</span>]) </div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"built_in\">NSDictionary</span>&lt;<span class=\"built_in\">NSString</span> *, <span class=\"keyword\">id</span>&gt; *resourceValues = cacheFiles[fileURL];</div><div class=\"line\">                <span class=\"built_in\">NSNumber</span> *totalAllocatedSize = resourceValues[<span class=\"built_in\">NSURLTotalFileAllocatedSizeKey</span>];</div><div class=\"line\">                currentCacheSize -= totalAllocatedSize.unsignedIntegerValue;</div><div class=\"line\">                <span class=\"comment\">// 当小于理想的size就停止</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (currentCacheSize &lt; desiredCacheSize) </div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">if</span> (completionBlock) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">                completionBlock();</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"SDWebImageDownloader\"><a href=\"#SDWebImageDownloader\" class=\"headerlink\" title=\"SDWebImageDownloader\"></a>SDWebImageDownloader</h3><p>这个类是将NSOperation中子集任务的封装,就一些列的任务封装起来,并对下载的顺序FIFO或者LIFO等进行调整,以及下载任务请求头的封装,最大并发量等等事情进行操作.实际上也是对NSOperationQueue的封装.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">nullable</span> SDWebImageDownloadToken *)downloadImageWithURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url                                               options:(SDWebImageDownloaderOptions)options                                              progress:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderProgressBlock)progressBlock                                             completed:(<span class=\"keyword\">nullable</span> SDWebImageDownloaderCompletedBlock)completedBlock &#123;</div><div class=\"line\"></div><div class=\"line\">        __<span class=\"keyword\">weak</span> SDWebImageDownloader *wself = <span class=\"keyword\">self</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> addProgressCallback:progressBlock completedBlock:completedBlock forURL:url createCallback:^SDWebImageDownloaderOperation *&#123;</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"comment\">// 创建一个SDWebImageDownloaderOperation</span></div><div class=\"line\">        <span class=\"comment\">// __Strong是为了再次对其强引用,以防self被释放</span></div><div class=\"line\">        __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span> (wself) sself = wself;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 一般是15s</span></div><div class=\"line\">        <span class=\"built_in\">NSTimeInterval</span> timeoutInterval = sself.downloadTimeout;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (timeoutInterval == <span class=\"number\">0.0</span>) </div><div class=\"line\">        &#123;</div><div class=\"line\">            timeoutInterval = <span class=\"number\">15.0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 创建请求的请求头,缓存策略</span></div><div class=\"line\">        <span class=\"built_in\">NSMutableURLRequest</span> *request = [[<span class=\"built_in\">NSMutableURLRequest</span> alloc] initWithURL:url cachePolicy:(options &amp; SDWebImageDownloaderUseNSURLCache ? <span class=\"built_in\">NSURLRequestUseProtocolCachePolicy</span> : <span class=\"built_in\">NSURLRequestReloadIgnoringLocalCacheData</span>) timeoutInterval:timeoutInterval];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// cookies     </span></div><div class=\"line\">        request.HTTPShouldHandleCookies = (options &amp; SDWebImageDownloaderHandleCookies);</div><div class=\"line\">   </div><div class=\"line\">        request.HTTPShouldUsePipelining = <span class=\"literal\">YES</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 自定义请求头的一些内容</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (sself.headersFilter) </div><div class=\"line\">        &#123;</div><div class=\"line\">            request.allHTTPHeaderFields = sself.headersFilter(url, [sself.HTTPHeaders <span class=\"keyword\">copy</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> </div><div class=\"line\">        &#123;</div><div class=\"line\">            request.allHTTPHeaderFields = sself.HTTPHeaders;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 创建NSOperation      </span></div><div class=\"line\">        SDWebImageDownloaderOperation *operation = [[sself.operationClass alloc] initWithRequest:request inSession:sself.session options:options];</div><div class=\"line\">        </div><div class=\"line\">        operation.shouldDecompressImages = sself.shouldDecompressImages;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 如果有认证策略,需要用户名和密码</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (sself.urlCredential)</div><div class=\"line\">        &#123;</div><div class=\"line\">            operation.credential = sself.urlCredential;</div><div class=\"line\">        &#125; </div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sself.username &amp;&amp; sself.password) </div><div class=\"line\">        &#123;</div><div class=\"line\">            operation.credential = [<span class=\"built_in\">NSURLCredential</span> credentialWithUser:sself.username password:sself.password persistence:<span class=\"built_in\">NSURLCredentialPersistenceForSession</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (options &amp; SDWebImageDownloaderHighPriority)</div><div class=\"line\">        &#123;</div><div class=\"line\">            operation.queuePriority = <span class=\"built_in\">NSOperationQueuePriorityHigh</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options &amp; SDWebImageDownloaderLowPriority) </div><div class=\"line\">        &#123;</div><div class=\"line\">            operation.queuePriority = <span class=\"built_in\">NSOperationQueuePriorityLow</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 将operation加入到queue队列中</span></div><div class=\"line\">        [sself.downloadQueue addOperation:operation];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 添加依赖的策略,一般是FIFO,如果是LIFO,就需要添加</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (sself.executionOrder == SDWebImageDownloaderLIFOExecutionOrder) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">// Emulate LIFO execution order by systematically adding new operations as last operation's dependency</span></div><div class=\"line\">            [sself.lastAddedOperation addDependency:operation];</div><div class=\"line\">            <span class=\"comment\">// 记录最后一个任务         </span></div><div class=\"line\">            sself.lastAddedOperation = operation;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> operation;</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 取消某一个opration,token代表一个opration</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)cancel:(<span class=\"keyword\">nullable</span> SDWebImageDownloadToken *)token &#123;</div><div class=\"line\"></div><div class=\"line\">    dispatch_barrier_async(<span class=\"keyword\">self</span>.barrierQueue, ^&#123;</div><div class=\"line\">    </div><div class=\"line\">     SDWebImageDownloaderOperation *operation = <span class=\"keyword\">self</span>.URLOperations[token.url];</div><div class=\"line\">     </div><div class=\"line\">        <span class=\"built_in\">BOOL</span> canceled = [operation cancel:token.downloadOperationCancelToken];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (canceled)</div><div class=\"line\">        &#123;</div><div class=\"line\">            [<span class=\"keyword\">self</span>.URLOperations removeObjectForKey:token.url];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在operation中添加过程和完成的回调block</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> SDWebImageDownloadToken *)addProgressCallback:(SDWebImageDownloaderProgressBlock)progressBlock</div><div class=\"line\">                                           completedBlock:(SDWebImageDownloaderCompletedBlock)completedBlock</div><div class=\"line\">                                                   forURL:(<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSURL</span> *)url</div><div class=\"line\">                                           createCallback:(SDWebImageDownloaderOperation *(^)())createCallback &#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> (url == <span class=\"literal\">nil</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (completedBlock != <span class=\"literal\">nil</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            completedBlock(<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">NO</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    __block SDWebImageDownloadToken *token = <span class=\"literal\">nil</span>;</div><div class=\"line\">    </div><div class=\"line\">    dispatch_barrier_sync(<span class=\"keyword\">self</span>.barrierQueue, ^&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 取出opration,如果没有就创建,创建之后将其和url形成字典,添加到URLOperations       </span></div><div class=\"line\">    SDWebImageDownloaderOperation *operation = <span class=\"keyword\">self</span>.URLOperations[url];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (!operation) </div><div class=\"line\">    &#123;</div><div class=\"line\">        operation = createCallback();</div><div class=\"line\">        <span class=\"keyword\">self</span>.URLOperations[url] = operation;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 创建operation的完成回调:从字典中去除,</span></div><div class=\"line\">        __<span class=\"keyword\">weak</span> SDWebImageDownloaderOperation *woperation = operation;</div><div class=\"line\">        </div><div class=\"line\">            operation.completionBlock = ^&#123;</div><div class=\"line\">            </div><div class=\"line\">              SDWebImageDownloaderOperation *soperation = woperation;</div><div class=\"line\">              </div><div class=\"line\">              <span class=\"keyword\">if</span> (!soperation) <span class=\"keyword\">return</span>;</div><div class=\"line\">              </div><div class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.URLOperations[url] == soperation) </div><div class=\"line\">              &#123;</div><div class=\"line\">                  [<span class=\"keyword\">self</span>.URLOperations removeObjectForKey:url];</div><div class=\"line\">              &#125;;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 创建operation对应的token标志,这个token包括operaion的url属性和对应的过程和完成回调两个方面</span></div><div class=\"line\">        <span class=\"keyword\">id</span> downloadOperationCancelToken = [operation addHandlersForProgress:progressBlock completed:completedBlock];</div><div class=\"line\"></div><div class=\"line\">        token = [SDWebImageDownloadToken new];</div><div class=\"line\">        token.url = url;</div><div class=\"line\">        token.downloadOperationCancelToken = downloadOperationCancelToken;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> token;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"SDWebImageOperation\"><a href=\"#SDWebImageOperation\" class=\"headerlink\" title=\"SDWebImageOperation\"></a>SDWebImageOperation</h3><p>这个类继承于NSOperation,主要是封装了下载的操作.执行一个operation有两种方法，第一种是自己手动的调用start这个方法，这种方法调用会在当前调用的线程进行同步执行，所以在主线程里面自己一定要小心的调用，不然就会把主线程给卡死，还不如直接用GCD呢。第二种是将operation添加到operationQueue中去，这个也是我们用得最多的也是提倡的方法。NSOperationQueue会在我们添加进去operation的时候尽快进行执行。当然如果NSOperationQueue的maxConcurrentOperationCount如果设置为1的话，进相当于FIFO了。</p>\n<p>核心代码分析</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)start &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 锁定self,这样可以在执行过程中外界不能修改这个对象,</span></div><div class=\"line\">    <span class=\"keyword\">@synchronized</span> (<span class=\"keyword\">self</span>) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//如果已经取消这个任务,就将session和datatask取消,并且也将已经记录的数据imagedata,回调之类全部取消</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.isCancelled) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>.finished = <span class=\"literal\">YES</span>;</div><div class=\"line\">            [<span class=\"keyword\">self</span> reset];</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">#if SD_UIKIT</span></div><div class=\"line\">        Class <span class=\"built_in\">UIApplicationClass</span> = <span class=\"built_in\">NSClassFromString</span>(<span class=\"string\">@\"UIApplication\"</span>);</div><div class=\"line\">        <span class=\"built_in\">BOOL</span> hasApplication = <span class=\"built_in\">UIApplicationClass</span> &amp;&amp; [<span class=\"built_in\">UIApplicationClass</span> respondsToSelector:<span class=\"keyword\">@selector</span>(sharedApplication)];</div><div class=\"line\">        <span class=\"keyword\">if</span> (hasApplication &amp;&amp; [<span class=\"keyword\">self</span> shouldContinueWhenAppEntersBackground]) </div><div class=\"line\">        &#123;</div><div class=\"line\">            __<span class=\"keyword\">weak</span> __typeof__ (<span class=\"keyword\">self</span>) wself = <span class=\"keyword\">self</span>;</div><div class=\"line\">            <span class=\"built_in\">UIApplication</span> * app = [<span class=\"built_in\">UIApplicationClass</span> performSelector:<span class=\"keyword\">@selector</span>(sharedApplication)];</div><div class=\"line\">            <span class=\"keyword\">self</span>.backgroundTaskId = [app beginBackgroundTaskWithExpirationHandler:^&#123;</div><div class=\"line\">            </div><div class=\"line\">                __<span class=\"keyword\">strong</span> __<span class=\"keyword\">typeof</span> (wself) sself = wself;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (sself)</div><div class=\"line\">                 &#123;</div><div class=\"line\">                    [sself cancel];</div><div class=\"line\">                    [app endBackgroundTask:sself.backgroundTaskId];</div><div class=\"line\">                    sself.backgroundTaskId = <span class=\"built_in\">UIBackgroundTaskInvalid</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"meta\">#endif</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 判断一下从外界传递过来的session是否存在,如果不存在需要自己创建</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">NSURLSession</span> *session = <span class=\"keyword\">self</span>.unownedSession;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">self</span>.unownedSession) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">NSURLSessionConfiguration</span> *sessionConfig = [<span class=\"built_in\">NSURLSessionConfiguration</span> defaultSessionConfiguration];</div><div class=\"line\">            sessionConfig.timeoutIntervalForRequest = <span class=\"number\">15</span>;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">self</span>.ownedSession = [<span class=\"built_in\">NSURLSession</span> sessionWithConfiguration:sessionConfig</div><div class=\"line\">                                                              delegate:<span class=\"keyword\">self</span></div><div class=\"line\">                                                         delegateQueue:<span class=\"literal\">nil</span>];</div><div class=\"line\">            session = <span class=\"keyword\">self</span>.ownedSession;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 创建下载的任务 </span></div><div class=\"line\">        <span class=\"keyword\">self</span>.dataTask = [session dataTaskWithRequest:<span class=\"keyword\">self</span>.request];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//标记执行的状态</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.executing = <span class=\"literal\">YES</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 开始下载任务 </span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.dataTask resume];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 在任务开始的时候就需要通过取出其中的过程回调任务开始回调一些参数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.dataTask) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (SDWebImageDownloaderProgressBlock progressBlock <span class=\"keyword\">in</span> [<span class=\"keyword\">self</span> callbacksForKey:kProgressCallbackKey]) </div><div class=\"line\">        &#123;</div><div class=\"line\">            progressBlock(<span class=\"number\">0</span>, <span class=\"built_in\">NSURLResponseUnknownLength</span>, <span class=\"keyword\">self</span>.request.URL);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 回到主线程通知已经开始下载      </span></div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">            [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadStartNotification object:<span class=\"keyword\">self</span>];</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">else</span> </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果没有开始下载就直接结束,回调结束的芳芳</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> callCompletionBlocksWithError:[<span class=\"built_in\">NSError</span> errorWithDomain:<span class=\"built_in\">NSURLErrorDomain</span> code:<span class=\"number\">0</span> userInfo:@&#123;<span class=\"built_in\">NSLocalizedDescriptionKey</span> : <span class=\"string\">@\"Connection can't be initialized\"</span>&#125;]];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    Class <span class=\"built_in\">UIApplicationClass</span> = <span class=\"built_in\">NSClassFromString</span>(<span class=\"string\">@\"UIApplication\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">UIApplicationClass</span> || ![<span class=\"built_in\">UIApplicationClass</span> respondsToSelector:<span class=\"keyword\">@selector</span>(sharedApplication)]) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.backgroundTaskId != <span class=\"built_in\">UIBackgroundTaskInvalid</span>) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">UIApplication</span> * app = [<span class=\"built_in\">UIApplication</span> performSelector:<span class=\"keyword\">@selector</span>(sharedApplication)];</div><div class=\"line\">        [app endBackgroundTask:<span class=\"keyword\">self</span>.backgroundTaskId];</div><div class=\"line\">        <span class=\"keyword\">self</span>.backgroundTaskId = <span class=\"built_in\">UIBackgroundTaskInvalid</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>session回调方法的解读</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//刚开始下载的时候会回调这个方法</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)URLSession:(<span class=\"built_in\">NSURLSession</span> *)session</div><div class=\"line\">          dataTask:(<span class=\"built_in\">NSURLSessionDataTask</span> *)dataTask</div><div class=\"line\">didReceiveResponse:(<span class=\"built_in\">NSURLResponse</span> *)response</div><div class=\"line\"> completionHandler:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSURLSessionResponseDisposition</span> disposition))completionHandler &#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">// 如果响应的状态码不是304(表示没有任何修改和之前一样),并且不是400,</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (![response respondsToSelector:<span class=\"keyword\">@selector</span>(statusCode)] || (((<span class=\"built_in\">NSHTTPURLResponse</span> *)response).statusCode &lt; <span class=\"number\">400</span> &amp;&amp; ((<span class=\"built_in\">NSHTTPURLResponse</span> *)response).statusCode != <span class=\"number\">304</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSInteger</span> expected = response.expectedContentLength &gt; <span class=\"number\">0</span> ? (<span class=\"built_in\">NSInteger</span>)response.expectedContentLength : <span class=\"number\">0</span>;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 获得期望下载的大小</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.expectedSize = expected;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 执行下载过程中的回调</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (SDWebImageDownloaderProgressBlock progressBlock <span class=\"keyword\">in</span> [<span class=\"keyword\">self</span> callbacksForKey:kProgressCallbackKey]) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">//回到下载进度,期望下载的大小,以及url</span></div><div class=\"line\">            progressBlock(<span class=\"number\">0</span>, expected, <span class=\"keyword\">self</span>.request.URL);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 初始化储存下载数据的data集合</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.imageData = [[<span class=\"built_in\">NSMutableData</span> alloc] initWithCapacity:expected];</div><div class=\"line\">        <span class=\"keyword\">self</span>.response = response;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//回调主线程通知已经开始接收数据     </span></div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        </div><div class=\"line\">            [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadReceiveResponseNotification object:<span class=\"keyword\">self</span>];</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">NSUInteger</span> code = ((<span class=\"built_in\">NSHTTPURLResponse</span> *)response).statusCode;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 304需要直接从系统中取出数据即可</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (code == <span class=\"number\">304</span>) </div><div class=\"line\">        &#123;</div><div class=\"line\">            [<span class=\"keyword\">self</span> cancelInternal];</div><div class=\"line\">        &#125; </div><div class=\"line\">        <span class=\"keyword\">else</span> </div><div class=\"line\">        &#123;</div><div class=\"line\">            [<span class=\"keyword\">self</span>.dataTask cancel];</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 通知停止下载       </span></div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        </div><div class=\"line\">            [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadStopNotification object:<span class=\"keyword\">self</span>];</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 回到完成的参数</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> callCompletionBlocksWithError:[<span class=\"built_in\">NSError</span> errorWithDomain:<span class=\"built_in\">NSURLErrorDomain</span> code:((<span class=\"built_in\">NSHTTPURLResponse</span> *)response).statusCode userInfo:<span class=\"literal\">nil</span>]];</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 标志状态finish = yes,executing=no,取消任务等等</span></div><div class=\"line\">        [<span class=\"keyword\">self</span> done];</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (completionHandler) </div><div class=\"line\">    &#123;</div><div class=\"line\">        completionHandler(<span class=\"built_in\">NSURLSessionResponseAllow</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 开始接受数据的过程不停回调的方法</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)URLSession:(<span class=\"built_in\">NSURLSession</span> *)session dataTask:(<span class=\"built_in\">NSURLSessionDataTask</span> *)dataTask didReceiveData:(<span class=\"built_in\">NSData</span> *)data &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 拼接数据</span></div><div class=\"line\">    [<span class=\"keyword\">self</span>.imageData appendData:data];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//如果选择的状态是渐进式的,就需要不断的显示图片.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">self</span>.options &amp; SDWebImageDownloaderProgressiveDownload) &amp;&amp; <span class=\"keyword\">self</span>.expectedSize &gt; <span class=\"number\">0</span>) </div><div class=\"line\">    &#123;</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"built_in\">CGImageSourceRef</span> imageSource = <span class=\"built_in\">CGImageSourceCreateWithData</span>((__bridge <span class=\"built_in\">CFDataRef</span>)<span class=\"keyword\">self</span>.imageData, <span class=\"literal\">NULL</span>);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 如果还没有开始创建图片</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (width + height == <span class=\"number\">0</span>) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">// 得到图片的一些属性</span></div><div class=\"line\">            <span class=\"built_in\">CFDictionaryRef</span> properties = <span class=\"built_in\">CGImageSourceCopyPropertiesAtIndex</span>(imageSource, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">//图片的高 宽 方向         </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (properties)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"built_in\">NSInteger</span> orientationValue = <span class=\"number\">-1</span>;</div><div class=\"line\">               </div><div class=\"line\">                <span class=\"built_in\">CFTypeRef</span> val = <span class=\"built_in\">CFDictionaryGetValue</span>(properties, kCGImagePropertyPixelHeight);</div><div class=\"line\">                <span class=\"keyword\">if</span> (val) <span class=\"built_in\">CFNumberGetValue</span>(val, kCFNumberLongType, &amp;height);</div><div class=\"line\">                val = <span class=\"built_in\">CFDictionaryGetValue</span>(properties, kCGImagePropertyPixelWidth);</div><div class=\"line\">                <span class=\"keyword\">if</span> (val) <span class=\"built_in\">CFNumberGetValue</span>(val, kCFNumberLongType, &amp;width);</div><div class=\"line\">                val = <span class=\"built_in\">CFDictionaryGetValue</span>(properties, kCGImagePropertyOrientation);</div><div class=\"line\">                <span class=\"keyword\">if</span> (val) <span class=\"built_in\">CFNumberGetValue</span>(val, kCFNumberNSIntegerType, &amp;orientationValue);</div><div class=\"line\">                <span class=\"built_in\">CFRelease</span>(properties);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">                <span class=\"meta\">#if SD_UIKIT || SD_WATCH</span></div><div class=\"line\">                orientation = [[<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>] orientationFromPropertyValue:(orientationValue == <span class=\"number\">-1</span> ? <span class=\"number\">1</span> : orientationValue)];</div><div class=\"line\">                <span class=\"meta\">#endif</span></div><div class=\"line\">            &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 当中间过程中不断地绘制图片</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (width + height &gt; <span class=\"number\">0</span> &amp;&amp; totalSize &lt; <span class=\"keyword\">self</span>.expectedSize) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">// 创建图片</span></div><div class=\"line\">            <span class=\"built_in\">CGImageRef</span> partialImageRef = <span class=\"built_in\">CGImageSourceCreateImageAtIndex</span>(imageSource, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">#if SD_UIKIT || SD_WATCH</span></div><div class=\"line\">            <span class=\"comment\">// 创建图片的高度 颜色空间  位图context,然后进行画图</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (partialImageRef) </div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">const</span> size_t partialHeight = <span class=\"built_in\">CGImageGetHeight</span>(partialImageRef);</div><div class=\"line\">                <span class=\"built_in\">CGColorSpaceRef</span> colorSpace = <span class=\"built_in\">CGColorSpaceCreateDeviceRGB</span>();</div><div class=\"line\">                <span class=\"built_in\">CGContextRef</span> bmContext = <span class=\"built_in\">CGBitmapContextCreate</span>(<span class=\"literal\">NULL</span>, width, height, <span class=\"number\">8</span>, width * <span class=\"number\">4</span>, colorSpace, kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);</div><div class=\"line\">                <span class=\"built_in\">CGColorSpaceRelease</span>(colorSpace);</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">if</span> (bmContext) </div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"built_in\">CGContextDrawImage</span>(bmContext, (<span class=\"built_in\">CGRect</span>)&#123;.origin.x = <span class=\"number\">0.0</span>f, .origin.y = <span class=\"number\">0.0</span>f, .size.width = width, .size.height = partialHeight&#125;, partialImageRef);</div><div class=\"line\">                    <span class=\"built_in\">CGImageRelease</span>(partialImageRef);</div><div class=\"line\">                    partialImageRef = <span class=\"built_in\">CGBitmapContextCreateImage</span>(bmContext);</div><div class=\"line\">                    <span class=\"built_in\">CGContextRelease</span>(bmContext);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> </div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"built_in\">CGImageRelease</span>(partialImageRef);</div><div class=\"line\">                    partialImageRef = <span class=\"literal\">nil</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"meta\">#endif</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (partialImageRef) </div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"meta\">#if SD_UIKIT || SD_WATCH</span></div><div class=\"line\">                <span class=\"comment\">// 得到图片</span></div><div class=\"line\">                <span class=\"built_in\">UIImage</span> *image = [<span class=\"built_in\">UIImage</span> imageWithCGImage:partialImageRef scale:<span class=\"number\">1</span> orientation:orientation];</div><div class=\"line\">                <span class=\"meta\">#elif SD_MAC</span></div><div class=\"line\">                <span class=\"built_in\">UIImage</span> *image = [[<span class=\"built_in\">UIImage</span> alloc] initWithCGImage:partialImageRef size:<span class=\"built_in\">NSZeroSize</span>];</div><div class=\"line\">                <span class=\"meta\">#endif</span></div><div class=\"line\">                </div><div class=\"line\">                <span class=\"comment\">// 对图片进行一些列操作,并且返回</span></div><div class=\"line\">                <span class=\"built_in\">NSString</span> *key = [[SDWebImageManager sharedManager] cacheKeyForURL:<span class=\"keyword\">self</span>.request.URL];</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"built_in\">UIImage</span> *scaledImage = [<span class=\"keyword\">self</span> scaledImageForKey:key image:image];</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.shouldDecompressImages) </div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"comment\">// 直接对图片进行解压</span></div><div class=\"line\">                    image = [<span class=\"built_in\">UIImage</span> decodedImageWithImage:scaledImage];</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> </div><div class=\"line\">                &#123;</div><div class=\"line\">                    image = scaledImage;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"built_in\">CGImageRelease</span>(partialImageRef);</div><div class=\"line\">                </div><div class=\"line\">                [<span class=\"keyword\">self</span> callCompletionBlocksWithImage:image imageData:<span class=\"literal\">nil</span> error:<span class=\"literal\">nil</span> finished:<span class=\"literal\">NO</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">CFRelease</span>(imageSource);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (SDWebImageDownloaderProgressBlock progressBlock <span class=\"keyword\">in</span> [<span class=\"keyword\">self</span> callbacksForKey:kProgressCallbackKey]) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果是普通option.只需要在过程中对调,不需要不断的显示</span></div><div class=\"line\">        progressBlock(<span class=\"keyword\">self</span>.imageData.length, <span class=\"keyword\">self</span>.expectedSize, <span class=\"keyword\">self</span>.request.URL);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 询问代理数据是否需要储存在响应的缓存里</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)URLSession:(<span class=\"built_in\">NSURLSession</span> *)session</div><div class=\"line\">          dataTask:(<span class=\"built_in\">NSURLSessionDataTask</span> *)dataTask</div><div class=\"line\"> willCacheResponse:(<span class=\"built_in\">NSCachedURLResponse</span> *)proposedResponse</div><div class=\"line\"> completionHandler:(<span class=\"keyword\">void</span> (^)(<span class=\"built_in\">NSCachedURLResponse</span> *cachedResponse))completionHandler </div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">    responseFromCached = <span class=\"literal\">NO</span>; </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// If this method is called, it means the response wasn't read from cache</span></div><div class=\"line\">    <span class=\"built_in\">NSCachedURLResponse</span> *cachedResponse = proposedResponse;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 如果是忽略掉本地的缓存的话,就直接将</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.request.cachePolicy == <span class=\"built_in\">NSURLRequestReloadIgnoringLocalCacheData</span>) </div><div class=\"line\">    &#123;</div><div class=\"line\">        cachedResponse = <span class=\"literal\">nil</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (completionHandler) </div><div class=\"line\">    &#123;</div><div class=\"line\">        completionHandler(cachedResponse);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#pragma mark NSURLSessionTaskDelegate</span></div><div class=\"line\"><span class=\"comment\">// 完成任务的回到</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)URLSession:(<span class=\"built_in\">NSURLSession</span> *)session task:(<span class=\"built_in\">NSURLSessionTask</span> *)task didCompleteWithError:(<span class=\"built_in\">NSError</span> *)error &#123;</div><div class=\"line\">    <span class=\"keyword\">@synchronized</span>(<span class=\"keyword\">self</span>) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">// 任务清空</span></div><div class=\"line\">        <span class=\"keyword\">self</span>.dataTask = <span class=\"literal\">nil</span>;</div><div class=\"line\">        <span class=\"comment\">// 通知停止和完成两个操作        </span></div><div class=\"line\">        <span class=\"built_in\">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">        </div><div class=\"line\">            [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadStopNotification object:<span class=\"keyword\">self</span>];</div><div class=\"line\">            <span class=\"keyword\">if</span> (!error) </div><div class=\"line\">            &#123;</div><div class=\"line\">                [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] postNotificationName:SDWebImageDownloadFinishNotification object:<span class=\"keyword\">self</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">   <span class=\"comment\">// 如果有错误,回调有错 </span></div><div class=\"line\">    <span class=\"keyword\">if</span> (error) </div><div class=\"line\">    &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> callCompletionBlocksWithError:error];</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">else</span> </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> callbacksForKey:kCompletedCallbackKey].count &gt; <span class=\"number\">0</span>) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">//如果option是忽略缓存,但是响应还是来自缓存,那么什么也不返回</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.options &amp; SDWebImageDownloaderIgnoreCachedResponse &amp;&amp; responseFromCached &amp;&amp; [[<span class=\"built_in\">NSURLCache</span> sharedURLCache] cachedResponseForRequest:<span class=\"keyword\">self</span>.request]) </div><div class=\"line\">            &#123;</div><div class=\"line\">                [<span class=\"keyword\">self</span> callCompletionBlocksWithImage:<span class=\"literal\">nil</span> imageData:<span class=\"literal\">nil</span> error:<span class=\"literal\">nil</span> finished:<span class=\"literal\">YES</span>];</div><div class=\"line\">            &#125; </div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.imageData) </div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"comment\">// 根据data生成有方向,jpg或者gif或者png图片</span></div><div class=\"line\">                <span class=\"built_in\">UIImage</span> *image = [<span class=\"built_in\">UIImage</span> sd_imageWithData:<span class=\"keyword\">self</span>.imageData];</div><div class=\"line\">                <span class=\"comment\">// 图片的真正尺寸             </span></div><div class=\"line\">                <span class=\"built_in\">NSString</span> *key = [[SDWebImageManager sharedManager] cacheKeyForURL:<span class=\"keyword\">self</span>.request.URL];</div><div class=\"line\">                image = [<span class=\"keyword\">self</span> scaledImageForKey:key image:image];</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"comment\">// 压缩图片</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (!image.images) </div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.shouldDecompressImages) </div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>.options &amp; SDWebImageDownloaderScaleDownLargeImages) </div><div class=\"line\">                        &#123;</div><div class=\"line\">                            <span class=\"meta\">#if SD_UIKIT || SD_WATCH</span></div><div class=\"line\">                            image = [<span class=\"built_in\">UIImage</span> decodedAndScaledDownImageWithImage:image];</div><div class=\"line\">                            [<span class=\"keyword\">self</span>.imageData setData:<span class=\"built_in\">UIImagePNGRepresentation</span>(image)];</div><div class=\"line\">                            <span class=\"meta\">#endif</span></div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"keyword\">else</span> </div><div class=\"line\">                        &#123;</div><div class=\"line\">                            image = [<span class=\"built_in\">UIImage</span> decodedImageWithImage:image];</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"comment\">//进一步判断图片是不是空</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">CGSizeEqualToSize</span>(image.size, <span class=\"built_in\">CGSizeZero</span>)) </div><div class=\"line\">                &#123;</div><div class=\"line\">                    [<span class=\"keyword\">self</span> callCompletionBlocksWithError:[<span class=\"built_in\">NSError</span> errorWithDomain:SDWebImageErrorDomain code:<span class=\"number\">0</span> userInfo:@&#123;<span class=\"built_in\">NSLocalizedDescriptionKey</span> : <span class=\"string\">@\"Downloaded image has 0 pixels\"</span>&#125;]];</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> </div><div class=\"line\">                &#123;</div><div class=\"line\">                    [<span class=\"keyword\">self</span> callCompletionBlocksWithImage:image imageData:<span class=\"keyword\">self</span>.imageData error:<span class=\"literal\">nil</span> finished:<span class=\"literal\">YES</span>];</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                [<span class=\"keyword\">self</span> callCompletionBlocksWithError:[<span class=\"built_in\">NSError</span> errorWithDomain:SDWebImageErrorDomain code:<span class=\"number\">0</span> userInfo:@&#123;<span class=\"built_in\">NSLocalizedDescriptionKey</span> : <span class=\"string\">@\"Image data is nil\"</span>&#125;]];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    [<span class=\"keyword\">self</span> done];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","categories":[],"tags":[]},{"title":"制作正式版 Mac OS 10.12 安装 U盘","date":"2017-02-03T03:05:45.000Z","path":"2017/02/03/制作正式版 Mac OS 10.12 安装 U盘/","text":"1.准备工作： 准备一个 8GB 或以上容量的 U 盘，确保里面的数据已经妥善备份好（该过程会抹掉 U 盘全部数据） 首先，在 MAS 下载 macOS 10.12 原版安装包。或者通过其他途径下载，拖动至自己的 应用程序（Applications）文件夹。 确定应用程序名字为「Install macOS Sierra.app」 2.格式化优盘 插入你的 U 盘，然后在「应用程序」-&gt;「实用工具」里面找到并打开「磁盘工具」 在左方列表中找到 U 盘的名称并点击 右边顶部选择「分区」，然后在「分区布局」选择「1个分区」 在分区信息中的 「名称」输入「ABCD」 (由于后面的命令中会用到此名称，如果你要修改成其他(英文)，请务必对应修改后面的命令) 在「格式」中选择 「Mac OS 扩展 (日志式)」 这时，先别急着点“应用”，还要先在 「选项」里面，选择「GUID 分区表」 开始格式化 3.输入终端命令开始制作启动盘 1.请再次确保安装文件是保存在「应用程序」的目录中 2.在「应用程序」-&gt;「实用工具」里面找到「终端」并打开。也可以直接通过 Spotlight 搜索「终端」打开 3.复制下面的命令，并粘贴到「终端」里，按回车运行： ——命令开始—— 从sudo开始复制（不要复制这句话） sudo /Applications/Install\\ macOS\\ Sierra.app/Contents/Resources/createinstallmedia –volume /Volumes/ABCD –applicationpath /Applications/Install\\ macOS\\ Sierra.app –nointeraction ——命令结束—— 到nointeraction结束（不要复制这句话） 命令说明：Install\\ macOS\\ Sierra.app 这个是正式版的“安装 macOS Sierra” 正确位置ABCD 这个是优盘的名字 回车后，系统会提示你输入管理员密码，接下来就是等待系统开始制作启动盘了。这时，命令执行中你会陆续看到类似以下的信息： （在这里输入密码） Erasing Disk: 0%… 10%… 20%… 30%…100%…Copying installer files to disk…Copy complete.Making disk bootable…Copying boot files…Copy complete.Done. 当你看到最后有 「Copy complete」和「Done」 字样出现就是表示启动盘已经制作完成了！ 4.U 盘启动安装 macOS Sierra 的方法 当你插入制作完成的 macOS Sierra U盘启动盘之后，桌面出现「Install macOS Sierra」的盘符那么就表示启动盘是正常的了。那么怎样通过 USB 启动进行全新的系统安装呢？ 其实很简单，先在目标电脑上插上 U 盘，然后重启你的 Mac，然后一直按住「option」(alt) 按键不放，直到屏幕显示多出一个 USB 启动盘的选项。 这时选择 U 盘的图标回车，即可通过 U 盘来安装 macOS Sierra 了！这时，你可以直接覆盖安装系统(升级)，也可以在磁盘工具里面格式化抹掉整个硬盘，或者重新分区等实现全新的干净的安装。","content":"<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/header/image/%E5%88%B6%E4%BD%9C%E6%AD%A3%E5%BC%8F%E7%89%88%20Mac%20OS%2010.12%20%E5%AE%89%E8%A3%85%20U%E7%9B%98.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h5 id=\"1-准备工作：\"><a href=\"#1-准备工作：\" class=\"headerlink\" title=\"1.准备工作：\"></a>1.准备工作：</h5><ul>\n<li><p>准备一个 8GB 或以上容量的 U 盘，确保里面的数据已经妥善备份好（该过程会抹掉 U 盘全部数据）</p>\n</li>\n<li><p>首先，在 MAS 下载 macOS 10.12 原版安装包。或者通过其他途径下载，拖动至自己的 应用程序（Applications）文件夹。</p>\n</li>\n</ul>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/MacOS%E5%AE%89%E8%A3%85U%E7%9B%98-01.png?watermark/2/text/QExpYmVyYWxpc20=/font/5a6L5L2T/fontsize/800/fill/IzhBMTgxOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10\" alt=\"\"></p>\n<ul>\n<li>确定应用程序名字为「Install macOS Sierra.app」</li>\n</ul>\n<h5 id=\"2-格式化优盘\"><a href=\"#2-格式化优盘\" class=\"headerlink\" title=\"2.格式化优盘\"></a>2.格式化优盘</h5><ul>\n<li>插入你的 U 盘，然后在「应用程序」-&gt;「实用工具」里面找到并打开「磁盘工具」</li>\n<li>在左方列表中找到 U 盘的名称并点击</li>\n<li>右边顶部选择「分区」，然后在「分区布局」选择「1个分区」</li>\n<li>在分区信息中的 「名称」输入「ABCD」 (由于后面的命令中会用到此名称，如果你要修改成其他(英文)，请务必对应修改后面的命令)</li>\n<li>在「格式」中选择 「Mac OS 扩展 (日志式)」</li>\n<li>这时，先别急着点“应用”，还要先在 「选项」里面，选择「GUID 分区表」</li>\n<li>开始格式化</li>\n</ul>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/MacOS%E5%AE%89%E8%A3%85U%E7%9B%98-02.png?watermark/2/text/QExpYmVyYWxpc20=/font/5a6L5L2T/fontsize/800/fill/IzhBMTgxOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10\" alt=\"\"></p>\n<h5 id=\"3-输入终端命令开始制作启动盘\"><a href=\"#3-输入终端命令开始制作启动盘\" class=\"headerlink\" title=\"3.输入终端命令开始制作启动盘\"></a>3.输入终端命令开始制作启动盘</h5><ul>\n<li>1.请再次确保安装文件是保存在「应用程序」的目录中</li>\n<li>2.在「应用程序」-&gt;「实用工具」里面找到「终端」并打开。也可以直接通过 Spotlight 搜索「终端」打开</li>\n<li>3.复制下面的命令，并粘贴到「终端」里，按回车运行：</li>\n<li>——命令开始—— 从sudo开始复制（不要复制这句话）</li>\n</ul>\n<blockquote>\n<p>sudo /Applications/Install\\ macOS\\ Sierra.app/Contents/Resources/createinstallmedia –volume /Volumes/ABCD –applicationpath /Applications/Install\\ macOS\\ Sierra.app –nointeraction</p>\n</blockquote>\n<ul>\n<li>——命令结束—— 到nointeraction结束（不要复制这句话）</li>\n</ul>\n<blockquote>\n<p>命令说明：<br>Install\\ macOS\\ Sierra.app 这个是正式版的“安装 macOS Sierra” 正确位置<br>ABCD 这个是优盘的名字</p>\n</blockquote>\n<p>回车后，系统会提示你输入管理员密码，接下来就是等待系统开始制作启动盘了。这时，命令执行中你会陆续看到类似以下的信息：</p>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/MacOS%E5%AE%89%E8%A3%85U%E7%9B%98-03.png?watermark/2/text/QExpYmVyYWxpc20=/font/5a6L5L2T/fontsize/800/fill/IzhBMTgxOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10\" alt=\"\"></p>\n<p>（在这里输入密码）</p>\n<p>Erasing Disk: 0%… 10%… 20%… 30%…100%…<br>Copying installer files to disk…<br>Copy complete.<br>Making disk bootable…<br>Copying boot files…<br>Copy complete.<br>Done.</p>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/MacOS%E5%AE%89%E8%A3%85U%E7%9B%98-04.png?watermark/2/text/QExpYmVyYWxpc20=/font/5a6L5L2T/fontsize/800/fill/IzhBMTgxOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10\" alt=\"\"></p>\n<p>当你看到最后有 「Copy complete」和「Done」 字样出现就是表示启动盘已经制作完成了！</p>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/image/jpg/MacOS%E5%AE%89%E8%A3%85U%E7%9B%98-05.png?watermark/2/text/QExpYmVyYWxpc20=/font/5a6L5L2T/fontsize/800/fill/IzhBMTgxOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10\" alt=\"\"></p>\n<h5 id=\"4-U-盘启动安装-macOS-Sierra-的方法\"><a href=\"#4-U-盘启动安装-macOS-Sierra-的方法\" class=\"headerlink\" title=\"4.U 盘启动安装 macOS Sierra 的方法\"></a>4.U 盘启动安装 macOS Sierra 的方法</h5><ul>\n<li>当你插入制作完成的 macOS Sierra U盘启动盘之后，桌面出现「Install macOS Sierra」的盘符那么就表示启动盘是正常的了。那么怎样通过 USB 启动进行全新的系统安装呢？</li>\n</ul>\n<ul>\n<li>其实很简单，先在目标电脑上插上 U 盘，然后重启你的 Mac，然后一直按住「option」(alt) 按键不放，直到屏幕显示多出一个 USB 启动盘的选项。</li>\n</ul>\n<ul>\n<li>这时选择 U 盘的图标回车，即可通过 U 盘来安装 macOS Sierra 了！这时，你可以直接覆盖安装系统(升级)，也可以在磁盘工具里面格式化抹掉整个硬盘，或者重新分区等实现全新的干净的安装。</li>\n</ul>\n","excerpt":"","categories":[],"tags":[]},{"title":"翻译-利用 Healthkit 进行睡眠分析（Swift）","date":"2017-02-03T00:12:38.000Z","path":"2017/02/03/翻译-利用Healthkit进行睡眠分析(Swift）/","text":"原文：http://appcoda.com/sleep-analysis-healthkit/ 翻译：Liberalism 日期：2016年10月5日 现如今，睡眠变革已经成为了一种全新的潮流。用户比以往任何时候都更加关注自己的睡眠。他们不仅仅关心自己睡了多久，同样也很希望通过一段时间的数据收集和分析能够绘制出他们的睡眠趋势。而技术上的进步，包括硬件、特别是智能手机的高速发展，使睡眠变革这一高速发展的领域迎来了全新的曙光。 苹果在基于安全的前提下，提供了一种非常酷的方式来与用户的个人健康信息进行通信，并通过iOS内置的健康应用存储信息。作为开发者不仅可以使用HealyhKit来打造健康类的App，同时该框架还允许开发者访问睡眠数据，进行处理分析。 在本教程中，针对Healthkit框架我会带领大家快速入门，同时会向大家演示如果快速搭建一个简单的睡眠分析的App 1.简介 HealthKit框架结构提供了一个称之为HealthKit Store的加密数据库，开发者可以使用HKhealth Store这个类来访问这个数据库。iPhone和Apple Watch分别有自己的HealthKit Store，健康数据会在iPhone和Apple Watch之间同步。然而，Apple Watch为了节省内存空间会自动清理掉一些旧的数据。目前healthKit框架和健康类的App在iPad上是不支持的。 如果你想创建一个基于健康数据的iOS App或者是WatchOS App，HealthKit框架无疑是非常强大的一个工具。HealthKit设计的初衷是管理来源广泛的数据，基于用户喜好把来源不同的数据进行自动合并。应用程序还可以访问每个源的原始数据，并将数据本身合并。App不仅仅用于身体指标的检测、健身或营养情况，还可以用于睡眠分析 那么在接下来的文章里，我会向大家展示在iOS平台上如何利用HealthKit框架去存储、连接睡眠的分析数据。以上的方法也同样适用于watchOS平台上应用。需要注意的是这篇教程使用了Swift2.0和Xcode 7，所以为了接下来的课程，请确保你目前正在使用的Xcode 7 在我们正式开始之前，请提前下载好我们的项目并且解压。我已经创建好了基本的UI界面。当你运行时，你会看到一个计时器的UI界面，当你按下开始按钮之后，就会发现开始计时。 2.使用HealthKit Framework我们App的目标是存储睡眠的分析信息，并通过开始和结束两个按钮检索信息。要使用HealthKit，首先应该在你应用的bundle中打开HealthKit的权限。在你的项目中，在导航中找到当前的target -&gt; 再找到 capabilities，然后打开。 接下来你需要按照以下的代码在ViewController类里创建一个HKHealthStore的实例变量 1let healthStore = HKHealthStore() 然后，我们将利用HKHealthStore这个实例变量去连接HealthKit Store这个加密数据库。 如之前所说，HealthKit允许用户掌握自己的健康数据，所以在你可以操作、分析用户的睡眠数据之前，你首先需要去获取用户许可。获取许可，首先要导入HealthKit Framework，然后如下面一样更新ViewDidLoad中的代码 1234567891011121314151617override func viewDidLoad() &#123; super.viewDidLoad() let typestoRead = Set([ HKObjectType.categoryTypeForIdentifier(HKCategoryTypeIdentifierSleepAnalysis)! ]) let typestoShare = Set([ HKObjectType.categoryTypeForIdentifier(HKCategoryTypeIdentifierSleepAnalysis)! ]) self.healthStore.requestAuthorizationToShareTypes(typestoShare, readTypes: typestoRead) &#123; (success, error) -&gt; Void in if success == false &#123; NSLog(\" Display not allowed\") &#125; &#125;&#125; 以上代码可以提供给用户同意或拒绝的提示，通过block，你可以在处理成功和失败后进行相应的操作并获得最终的结果。没有必要一直向用户请求许可，你必须很好的处理程序中的各种错误 但是为了避免用户的误操作，用户必须在设置页面亲自打开允许按钮，这样才能确保真正获得设备上健康数据的权限 写入睡眠分析数据 首先，如何去检索睡眠分析数据呢？根据苹果官方文档的说法，每一个睡眠分析的样本都有一个唯一值，为了确保用户是躺下并且入睡，HealthKit在同一时间内会对两个或更多的数据进行采样。通过对这些样本的开始时间和结束时间进行对比，应用程序可以进行大量的二次统计和计算。 用户花费多少时间入睡。 用户躺在床上实际入睡时间所占的比例 用户醒来之后，会在床上躺多久 用户在床上，以及睡眠时所花费的时间汇总 简明的讲，把睡眠分析数据储存到HealthKit store数据库中时，你需要遵循以下方法 首先我们需要定义两个NSDate对象去对应开始时间和结束时间。 然后我们利用HKCategoryTypeIdentifierSleepAnalysis创建一个HKObjectType的实例变量 我们需要创建一个全新的HKCategorySample类型的对象，通常采用分类样本的方式来存储睡眠数据，独立的样本代表用户躺在床上或者入睡的时间段。所以我们可以在同一时间段内分别创建出在床上未入睡以及入睡之后的样本 最终，我们就可以利用HKHealthStore类中的saveObject方法把对象存储起来 编者提示：如果想查看样本的类型，可以查阅HealthKit官方文档 如果你把以上的注意点和方法转化到Swift中，以下就是把躺床上未入睡和入睡的分析数据储存起来的代码，请把以下代码插入到ViewController类中 123456789101112131415161718192021222324252627282930313233343536func saveSleepAnalysis() &#123; // alarmTime and endTime are NSDate objects if let sleepType = HKObjectType.categoryTypeForIdentifier(HKCategoryTypeIdentifierSleepAnalysis) &#123; // we create our new object we want to push in Health app let object = HKCategorySample(type:sleepType, value: HKCategoryValueSleepAnalysis.InBed.rawValue, startDate: self.alarmTime, endDate: self.endTime) // at the end, we save it healthStore.saveObject(object, withCompletion: &#123; (success, error) -&gt; Void in if error != nil &#123; // something happened return &#125; if success &#123; print(\"My new data was saved in HealthKit\") &#125; else &#123; // something happened again &#125; &#125;) let object2 = HKCategorySample(type:sleepType, value: HKCategoryValueSleepAnalysis.Asleep.rawValue, startDate: self.alarmTime, endDate: self.endTime) healthStore.saveObject(object2, withCompletion: &#123; (success, error) -&gt; Void in if error != nil &#123; // something happened return &#125; if success &#123; print(\"My new data (2) was saved in HealthKit\") &#125; else &#123; // something happened again &#125; &#125;) &#125; &#125; 这个方法会在我们想把睡眠分析数据存储到HealthKit中时被调用 3.读取睡眠分析数据 想要读取睡眠分析数据，我们需要创建一个查询对象。首先需要为HKCategoryTypeIdentifierSleepAnalysis定义一个HKObjectType类型的分类。或许你希望通过谓词在开始时间和结束时间这个你需要的时间段内进行筛选、检索数据。你也需要为分类检索查询创建 一个分类描述器以获取我们想要的结果 您的用于检索睡眠分析数据的代码应如下所示： 1234567891011121314151617181920212223242526272829303132333435363738func retrieveSleepAnalysis() &#123; // first, we define the object type we want if let sleepType = HKObjectType.categoryTypeForIdentifier(HKCategoryTypeIdentifierSleepAnalysis) &#123; // Use a sortDescriptor to get the recent data first let sortDescriptor = NSSortDescriptor(key: HKSampleSortIdentifierEndDate, ascending: false) // we create our query with a block completion to execute let query = HKSampleQuery(sampleType: sleepType, predicate: nil, limit: 30, sortDescriptors: [sortDescriptor]) &#123; (query, tmpResult, error) -&gt; Void in if error != nil &#123; // something happened return &#125; if let result = tmpResult &#123; // do something with my data for item in result &#123; if let sample = item as? HKCategorySample &#123; let value = (sample.value == HKCategoryValueSleepAnalysis.InBed.rawValue) ? \"InBed\" : \"Asleep\" print(\"Healthkit sleep: \\(sample.startDate) \\(sample.endDate) - value: \\(value)\") &#125; &#125; &#125; &#125; // finally, we execute our query healthStore.executeQuery(query) &#125;&#125; 此代码查询HealthKit以获取所有睡眠分析数据，然后将其按降序排序。 然后使用startDate和endDate以及值的类型（即In Bed或Asleep）打印每个查询。 我已将限制设置为30，以检索最近30个记录的样本。 您还可以使用谓词方法来选择自定义的开始和结束日期。 4.App 测试对于演示应用程序，我使用NSTimer显示自您按下启动按钮以来经过的时间。 NSDate对象在开始和结束按钮上创建，以将睡眠分析数据保存为已用时间。 在停止操作方法中，可以调用saveSleepAnalysis（）和retrieveSleepAnalysis（）方法来保存和获取睡眠数据。 123456@IBAction func stop(sender: AnyObject) &#123; endTime = NSDate() saveSleepAnalysis() retrieveSleepAnalysis() timer.invalidate()&#125; 在您的应用程序中，您可能需要更改NSDate对象以选择相关的开始和结束时间（可能不同），以保存躺在床上的数据和睡眠值。 完成更改后，您可以运行演示应用并启动计时器。让它运行几分钟，然后点击停止按钮。之后打开健康应用程序。你会发现睡眠数据。 5.对使用 HealthKit 应用的一些建议HealthKit旨在为应用开发人员提供一个通用平台，以便轻松共享和访问用户数据，并避免数据中可能的重复或不一致。苹果审查指南非常明确的说明应用程序使用HealthKit和访问用户读/写权限必须通过向用户请求，但没有清楚地阐述HealthKit的使用可能会导致应用程序被拒绝。 将假的或不正确的数据保存到健康的应用程序也将被拒绝。 这意味着，你不能天真地使用算法来计算不同的健康值，如本教程中的睡眠分析。 您应该尝试使用内置的传感器数据读取和操作任何参数，以避免计算假数据。 对于完整的Xcode项目，你可以在这里得到。","content":"<p>原文：<a href=\"\"></a><a href=\"http://appcoda.com/sleep-analysis-healthkit/\" target=\"_blank\" rel=\"external\">http://appcoda.com/sleep-analysis-healthkit/</a></p>\n<p>翻译：Liberalism</p>\n<p>日期：2016年10月5日</p>\n<a id=\"more\"></a>\n<hr>\n<p>现如今，睡眠变革已经成为了一种全新的潮流。用户比以往任何时候都更加关注自己的睡眠。他们不仅仅关心自己睡了多久，同样也很希望通过一段时间的数据收集和分析能够绘制出他们的睡眠趋势。而技术上的进步，包括硬件、特别是智能手机的高速发展，使睡眠变革这一高速发展的领域迎来了全新的曙光。</p>\n<p>苹果在基于安全的前提下，提供了一种非常酷的方式来与用户的个人健康信息进行通信，并通过iOS内置的<code>健康</code>应用存储信息。作为开发者不仅可以使用<code>HealyhKit</code>来打造健康类的<code>App</code>，同时该框架还允许开发者访问睡眠数据，进行处理分析。</p>\n<p>在本教程中，针对<code>Healthkit</code>框架我会带领大家快速入门，同时会向大家演示如果快速搭建一个简单的睡眠分析的App</p>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h2><blockquote>\n<p><code>HealthKit</code>框架结构提供了一个称之为<code>HealthKit Store</code>的加密数据库，开发者可以使用<code>HKhealth Store</code>这个类来访问这个数据库。iPhone和Apple Watch分别有自己的<code>HealthKit Store</code>，健康数据会在iPhone和Apple Watch之间同步。然而，Apple Watch为了节省内存空间会自动清理掉一些旧的数据。目前<code>healthKit</code>框架和健康类的App在iPad上是不支持的。</p>\n</blockquote>\n<p>如果你想创建一个基于健康数据的iOS App或者是WatchOS App，<code>HealthKit</code>框架无疑是非常强大的一个工具。HealthKit设计的初衷是管理来源广泛的数据，基于用户喜好把来源不同的数据进行自动合并。应用程序还可以访问每个源的原始数据，并将数据本身合并。App不仅仅用于身体指标的检测、健身或营养情况，还可以用于睡眠分析</p>\n<p>那么在接下来的文章里，我会向大家展示在iOS平台上如何利用<code>HealthKit</code>框架去存储、连接睡眠的分析数据。以上的方法也同样适用于watchOS平台上应用。需要注意的是这篇教程使用了Swift2.0和Xcode 7，所以为了接下来的课程，请确保你目前正在使用的Xcode 7</p>\n<p>在我们正式开始之前，请提前下载好我们的项目并且解压。我已经创建好了基本的UI界面。当你运行时，你会看到一个计时器的UI界面，当你按下开始按钮之后，就会发现开始计时。</p>\n<h2 id=\"2-使用HealthKit-Framework\"><a href=\"#2-使用HealthKit-Framework\" class=\"headerlink\" title=\"2.使用HealthKit Framework\"></a>2.使用HealthKit Framework</h2><p>我们App的目标是存储睡眠的分析信息，并通过开始和结束两个按钮检索信息。要使用<code>HealthKit</code>，首先应该在你应用的bundle中打开<code>HealthKit</code>的权限。在你的项目中，在导航中找到当前的target -&gt; 再找到 capabilities，然后打开。</p>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/translate/image/Healthkit-01.png?watermark/2/text/QExpYmVyYWxpc20=/font/5a6L5L2T/fontsize/800/fill/IzhBMTgxOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10\" alt=\"\"></p>\n<p>接下来你需要按照以下的代码在ViewController类里创建一个HKHealthStore的实例变量</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> healthStore = <span class=\"type\">HKHealthStore</span>()</div></pre></td></tr></table></figure>\n<p>然后，我们将利用<code>HKHealthStore</code>这个实例变量去连接<code>HealthKit Store</code>这个加密数据库。</p>\n<p>如之前所说，<code>HealthKit</code>允许用户掌握自己的健康数据，所以在你可以操作、分析用户的睡眠数据之前，你首先需要去获取用户许可。获取许可，首先要导入HealthKit Framework，然后如下面一样更新<code>ViewDidLoad</code>中的代码</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.viewDidLoad()</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">let</span> typestoRead = <span class=\"type\">Set</span>([</div><div class=\"line\">        <span class=\"type\">HKObjectType</span>.categoryTypeForIdentifier(<span class=\"type\">HKCategoryTypeIdentifierSleepAnalysis</span>)!</div><div class=\"line\">        ])</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">let</span> typestoShare = <span class=\"type\">Set</span>([</div><div class=\"line\">        <span class=\"type\">HKObjectType</span>.categoryTypeForIdentifier(<span class=\"type\">HKCategoryTypeIdentifierSleepAnalysis</span>)!</div><div class=\"line\">        ])</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">self</span>.healthStore.requestAuthorizationToShareTypes(typestoShare, readTypes: typestoRead) &#123; (success, error) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"keyword\">if</span> success == <span class=\"literal\">false</span> &#123;</div><div class=\"line\">            <span class=\"type\">NSLog</span>(<span class=\"string\">\" Display not allowed\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码可以提供给用户<code>同意</code>或<code>拒绝</code>的提示，通过<code>block</code>，你可以在处理成功和失败后进行相应的操作并获得最终的结果。没有必要一直向用户请求许可，你必须很好的处理程序中的各种错误</p>\n<p>但是为了避免用户的误操作，用户必须在设置页面亲自打开允许按钮，这样才能确保真正获得设备上健康数据的权限</p>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/translate/image/Healthkit-02.png?watermark/2/text/QExpYmVyYWxpc20=/font/5a6L5L2T/fontsize/800/fill/IzhBMTgxOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10\" alt=\"\"></p>\n<p>写入睡眠分析数据</p>\n<p>首先，如何去检索睡眠分析数据呢？根据苹果官方文档的说法，每一个睡眠分析的样本都有一个唯一值，为了确保用户是躺下并且入睡，HealthKit在同一时间内会对两个或更多的数据进行采样。通过对这些样本的开始时间和结束时间进行对比，应用程序可以进行大量的二次统计和计算。</p>\n<ul>\n<li>用户花费多少时间入睡。</li>\n<li>用户躺在床上实际入睡时间所占的比例</li>\n<li>用户醒来之后，会在床上躺多久</li>\n<li>用户在床上，以及睡眠时所花费的时间汇总<br><img src=\"http://okhqmtd8q.bkt.clouddn.com/translate/image/Healthkit-03.png?watermark/2/text/QExpYmVyYWxpc20=/font/5a6L5L2T/fontsize/800/fill/IzhBMTgxOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10\" alt=\"\"></li>\n</ul>\n<p>简明的讲，把睡眠分析数据储存到HealthKit store数据库中时，你需要遵循以下方法</p>\n<hr>\n<ul>\n<li>首先我们需要定义两个NSDate对象去对应开始时间和结束时间。</li>\n</ul>\n<ul>\n<li>然后我们利用<code>HKCategoryTypeIdentifierSleepAnalysis</code>创建一个<code>HKObjectType</code>的实例变量</li>\n</ul>\n<ul>\n<li>我们需要创建一个全新的<code>HKCategorySample</code>类型的对象，通常采用分类样本的方式来存储睡眠数据，独立的样本代表用户躺在床上或者入睡的时间段。所以我们可以在同一时间段内分别创建出<code>在床上未入睡</code>以及<code>入睡之后</code>的样本</li>\n</ul>\n<ul>\n<li>最终，我们就可以利用<code>HKHealthStore</code>类中的<code>saveObject</code>方法把对象存储起来</li>\n</ul>\n<hr>\n<blockquote>\n<p>编者提示：如果想查看样本的类型，可以查阅<br><a href=\"https://developer.apple.com/reference/healthkit/healthkit_constants#//apple_ref/doc/uid/TP40014710\" target=\"_blank\" rel=\"external\"><code>HealthKit</code>官方文档</a></p>\n</blockquote>\n<hr>\n<p>如果你把以上的注意点和方法转化到Swift中，以下就是把<code>躺床上未入睡</code>和<code>入睡</code>的分析数据储存起来的代码，请把以下代码插入到<code>ViewController</code>类中</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">saveSleepAnalysis</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// alarmTime and endTime are NSDate objects</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> sleepType = <span class=\"type\">HKObjectType</span>.categoryTypeForIdentifier(<span class=\"type\">HKCategoryTypeIdentifierSleepAnalysis</span>) &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// we create our new object we want to push in Health app</span></div><div class=\"line\">        <span class=\"keyword\">let</span> object = <span class=\"type\">HKCategorySample</span>(type:sleepType, value: <span class=\"type\">HKCategoryValueSleepAnalysis</span>.<span class=\"type\">InBed</span>.rawValue, startDate: <span class=\"keyword\">self</span>.alarmTime, endDate: <span class=\"keyword\">self</span>.endTime)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// at the end, we save it</span></div><div class=\"line\">        healthStore.saveObject(object, withCompletion: &#123; (success, error) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> error != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// something happened</span></div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> success &#123;</div><div class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">\"My new data was saved in HealthKit\"</span>)    </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// something happened again</span></div><div class=\"line\">            &#125;     </div><div class=\"line\">        &#125;)</div><div class=\"line\">        <span class=\"keyword\">let</span> object2 = <span class=\"type\">HKCategorySample</span>(type:sleepType, value: <span class=\"type\">HKCategoryValueSleepAnalysis</span>.<span class=\"type\">Asleep</span>.rawValue, startDate: <span class=\"keyword\">self</span>.alarmTime, endDate: <span class=\"keyword\">self</span>.endTime)</div><div class=\"line\">        </div><div class=\"line\">        healthStore.saveObject(object2, withCompletion: &#123; (success, error) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></div><div class=\"line\">            <span class=\"keyword\">if</span> error != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// something happened</span></div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> success &#123;</div><div class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">\"My new data (2) was saved in HealthKit\"</span>)</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// something happened again</span></div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;)   </div><div class=\"line\">    &#125;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个方法会在我们想把睡眠分析数据存储到<code>HealthKit</code>中时被调用</p>\n<h2 id=\"3-读取睡眠分析数据\"><a href=\"#3-读取睡眠分析数据\" class=\"headerlink\" title=\"3.读取睡眠分析数据\"></a>3.读取睡眠分析数据</h2><ul>\n<li>想要读取睡眠分析数据，我们需要创建一个查询对象。首先需要为<code>HKCategoryTypeIdentifierSleepAnalysis</code>定义一个<code>HKObjectType</code>类型的分类。或许你希望通过谓词在开始时间和结束时间这个你需要的时间段内进行筛选、检索数据。你也需要为分类检索查询创建 一个分类描述器以获取我们想要的结果</li>\n</ul>\n<p>您的用于检索睡眠分析数据的代码应如下所示：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">retrieveSleepAnalysis</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// first, we define the object type we want</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> sleepType = <span class=\"type\">HKObjectType</span>.categoryTypeForIdentifier(<span class=\"type\">HKCategoryTypeIdentifierSleepAnalysis</span>) &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// Use a sortDescriptor to get the recent data first</span></div><div class=\"line\">        <span class=\"keyword\">let</span> sortDescriptor = <span class=\"type\">NSSortDescriptor</span>(key: <span class=\"type\">HKSampleSortIdentifierEndDate</span>, ascending: <span class=\"literal\">false</span>)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// we create our query with a block completion to execute</span></div><div class=\"line\">        <span class=\"keyword\">let</span> query = <span class=\"type\">HKSampleQuery</span>(sampleType: sleepType, predicate: <span class=\"literal\">nil</span>, limit: <span class=\"number\">30</span>, sortDescriptors: [sortDescriptor]) &#123; (query, tmpResult, error) -&gt; <span class=\"type\">Void</span> <span class=\"keyword\">in</span></div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> error != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"comment\">// something happened</span></div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">                </div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> result = tmpResult &#123;</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"comment\">// do something with my data</span></div><div class=\"line\">                <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> result &#123;</div><div class=\"line\">                </div><div class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> sample = item <span class=\"keyword\">as</span>? <span class=\"type\">HKCategorySample</span> &#123;</div><div class=\"line\">                    </div><div class=\"line\">                        <span class=\"keyword\">let</span> value = (sample.value == <span class=\"type\">HKCategoryValueSleepAnalysis</span>.<span class=\"type\">InBed</span>.rawValue) ? <span class=\"string\">\"InBed\"</span> : <span class=\"string\">\"Asleep\"</span></div><div class=\"line\">                        </div><div class=\"line\">                        <span class=\"built_in\">print</span>(<span class=\"string\">\"Healthkit sleep: \\(sample.startDate) \\(sample.endDate) - value: \\(value)\"</span>)</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// finally, we execute our query</span></div><div class=\"line\">        healthStore.executeQuery(query)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此代码查询<code>HealthKit</code>以获取所有睡眠分析数据，然后将其按降序排序。 然后使用<code>startDate</code>和<code>endDate</code>以及值的类型（即In Bed或Asleep）打印每个查询。 我已将限制设置为30，以检索最近30个记录的样本。 您还可以使用谓词方法来选择自定义的开始和结束日期。</p>\n<h2 id=\"4-App-测试\"><a href=\"#4-App-测试\" class=\"headerlink\" title=\"4.App 测试\"></a>4.App 测试</h2><p>对于演示应用程序，我使用<code>NSTimer</code>显示自您按下启动按钮以来经过的时间。 <code>NSDate</code>对象在开始和结束按钮上创建，以将睡眠分析数据保存为已用时间。 在停止操作方法中，可以调用<code>saveSleepAnalysis（）</code>和<code>retrieveSleepAnalysis（）</code>方法来保存和获取睡眠数据。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@IBAction</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stop</span><span class=\"params\">(sender: AnyObject)</span></span> &#123;</div><div class=\"line\">    endTime = <span class=\"type\">NSDate</span>()</div><div class=\"line\">    saveSleepAnalysis()</div><div class=\"line\">    retrieveSleepAnalysis()</div><div class=\"line\">    timer.invalidate()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在您的应用程序中，您可能需要更改<code>NSDate</code>对象以选择相关的开始和结束时间（可能不同），以保存躺在床上的数据和睡眠值。</p>\n<p>完成更改后，您可以运行演示应用并启动计时器。让它运行几分钟，然后点击停止按钮。之后打开<code>健康</code>应用程序。你会发现睡眠数据。</p>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/translate/image/Healthkit-04.png?watermark/2/text/QExpYmVyYWxpc20=/font/5a6L5L2T/fontsize/800/fill/IzhBMTgxOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10\" alt=\"\"></p>\n<h2 id=\"5-对使用-HealthKit-应用的一些建议\"><a href=\"#5-对使用-HealthKit-应用的一些建议\" class=\"headerlink\" title=\"5.对使用 HealthKit 应用的一些建议\"></a>5.对使用 <code>HealthKit</code> 应用的一些建议</h2><p><code>HealthKit</code>旨在为应用开发人员提供一个通用平台，以便轻松共享和访问用户数据，并避免数据中可能的重复或不一致。苹果审查指南非常明确的说明应用程序使用<code>HealthKit</code>和访问用户<code>读/写权限</code>必须通过向用户请求，但没有清楚地阐述<code>HealthKit</code>的使用可能会导致应用程序被拒绝。</p>\n<p>将假的或不正确的数据保存到<code>健康</code>的应用程序也将被拒绝。 这意味着，你不能天真地使用算法来计算不同的健康值，如本教程中的睡眠分析。 您应该尝试使用内置的传感器数据读取和操作任何参数，以避免计算假数据。</p>\n<p>对于完整的Xcode项目，你可以在这里<a href=\"https://github.com/appcoda/SleepAnalysis\" target=\"_blank\" rel=\"external\">得到</a>。</p>\n","excerpt":"原文：http://appcoda.com/sleep-analysis-healthkit/ 翻译：Liberalism 日期：2016年10月5日","categories":[],"tags":[]},{"title":"SVN上文件被locked的解决办法","date":"2017-01-30T08:57:42.000Z","path":"2017/01/30/SVN上文件被locked的解决办法/","text":"在工作过程中由于网络中断、或是人为的强制关闭SVN版本控制工具。SVN出于自我的保护机制，会自动在每个文件夹中生成lock文件，这样我们下次打开SVN是无法进行操作的，SVN会提示我们系统中有文件被锁，此时你只需进入项目文件夹中把所有的lock文件删除即可 1.首先使用终端 cd 到目标文件夹 2.直接执行下面的这句命令 12# 这句话的意思很简单，就是找到当前目录下的所有.SVN文件夹，并把文件夹下的所有LOCK文件 干掉。find . | grep \".svn/lock\" | xargs rm 3.之后再回到SVN中进行操作吧，大功告成。 按步骤进行的过程中遇到问题，欢迎和我交流。","content":"<blockquote>\n<p>在工作过程中由于网络中断、或是人为的强制关闭SVN版本控制工具。SVN出于自我的保护机制，会自动在每个文件夹中生成lock文件，这样我们下次打开SVN是无法进行操作的，SVN会提示我们系统中有文件被锁，此时你只需进入项目文件夹中把所有的lock文件删除即可</p>\n</blockquote>\n<ul>\n<li><p>1.首先使用终端  cd 到目标文件夹</p>\n</li>\n<li><p>2.直接执行下面的这句命令</p>\n</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># 这句话的意思很简单，就是找到当前目录下的所有.SVN文件夹，并把文件夹下的所有LOCK文件  干掉。</span></div><div class=\"line\">find . | grep <span class=\"string\">\".svn/lock\"</span> | xargs rm</div></pre></td></tr></table></figure>\n<ul>\n<li>3.之后再回到SVN中进行操作吧，大功告成。</li>\n</ul>\n<blockquote>\n<p>按步骤进行的过程中遇到问题，欢迎和我交流。</p>\n</blockquote>\n","excerpt":"","categories":[],"tags":[]},{"title":"源码解析-MJExtension","date":"2017-01-28T08:13:18.000Z","path":"2017/01/28/源码解析-MJExtension/","text":"结构1.NSObjecte+MJKeyValue提供的字典和模型互相转换的核心代码和逻辑. 2.NSObject+MJProperty提供了字典key值和value值与模型属性的相对对应关系的配置.最常见写在模型中的方法mj_setupReplacedKeyFromPropertyName和mj_setupObjectClassInArray 3.NSObject+MJCoding主要是模型的归档和解码.外界实现比较方法,主要是一个宏,这个宏其实是代替两个方法. 4.NSObject+MJClass提供了遍历属性类型父类的方法.以及模型和字典互转过程中需要转化的白名单和黑名单. 5.MJProperty包装模型中每个属性,包括属性的类型,属性的名字,父类.储存和取出属性对应的值. 6.MJPropertyKey模型对应的key值,以及他的对应的类型(字典还是数组) 7.MJPropertyType属性对应的类型,这个里面比较细:比如这个属性是一个基本类型,还是一个foundation类,还是另外一个模型类型等等. 8.MJFoundation这两个类分别代表遍历某个类是不是Foudation框架下 9.MJExtensionConst一些基本的配置信息的宏,比如断言,错误,日志输出等等. 主要逻辑的说明1.从字典转模型基本方法 ==- (instancetype)mj_setKeyValues:(id)keyValues context:(NSManagedObjectContext *)context== 开始捋顺逻辑: 代码中需要学习的部分1.对于经常用到的方法或者语句可以抽成宏或者内联方法,方便使用. 2.runtime获取属性的应用是方法的关键. 3.对于objc_setAssociatedObject和objc_getAssociatedObject动态增加属性方法的使用. 4.将 key值 和 模型属性 的转换桥梁以动态属性的方式写在自己的类里面.对于模型的侵入性很小. 5.将每一个模型中属性的包装.然后NSObject中根据之后包装进行处理,转换成想要的样子 runTime1.获取所有属性class_copyPropertyList说明：使用class_copyPropertyList并不会获取无@property声明的成员变 获取属性名property_getName3.描述一个属性objc_property_t4.获取所有属性特性property_copyAttributeList 获取属性特性描述字符串property_getAttributes,获取的结果类似是T@&quot;NSDictionary&quot;,C,N,V_dict1 注意获取的结果解释: 属性类型 name值：T value：变化 编码类型 name值：C(copy) &amp;(strong) W(weak)空(assign) 等 value：无非/原子性 name值：空(atomic) N(Nonatomic) value：无变量名称 name值：V value：变化 12345678910unsigned int outPut = 0;objc_property_t *prots = class_copyPropertyList([TestMadal class], &amp;outPut);for (int i = 0; i&lt;outPut; i++)&#123; objc_property_t property = prots[i]; const char *t = property_getName(property); const char *attrs = property_getAttributes(property); NSLog(@&quot;%s---%s&quot;,t,attrs);&#125;","content":"<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p>1.<strong><code>NSObjecte+MJKeyValue</code></strong>提供的字典和模型互相转换的核心代码和逻辑.</p>\n<p>2.<strong><code>NSObject+MJProperty</code></strong>提供了字典key值和value值与模型属性的相对对应关系的配置.最常见写在模型中的方法<code>mj_setupReplacedKeyFromPropertyName</code>和<code>mj_setupObjectClassInArray</code></p>\n<p>3.<strong><code>NSObject+MJCoding</code></strong>主要是模型的归档和解码.外界实现比较方法,主要是一个宏,这个宏其实是代替两个方法.</p>\n<p>4.<strong><code>NSObject+MJClass</code></strong>提供了遍历属性类型父类的方法.以及模型和字典互转过程中需要转化的白名单和黑名单.</p>\n<p>5.<strong><code>MJProperty</code></strong>包装模型中每个属性,包括属性的类型,属性的名字,父类.储存和取出属性对应的值.</p>\n<p>6.<strong><code>MJPropertyKey</code></strong>模型对应的key值,以及他的对应的类型(字典还是数组)</p>\n<p>7.<strong><code>MJPropertyType</code></strong>属性对应的类型,这个里面比较细:比如这个属性是一个基本类型,还是一个foundation类,还是另外一个模型类型等等.</p>\n<p>8.<strong><code>MJFoundation</code></strong>这两个类分别代表遍历某个类是不是<strong><code>Foudation</code></strong>框架下</p>\n<p>9.<strong><code>MJExtensionConst</code></strong>一些基本的配置信息的宏,比如断言,错误,日志输出等等.</p>\n<h3 id=\"主要逻辑的说明\"><a href=\"#主要逻辑的说明\" class=\"headerlink\" title=\"主要逻辑的说明\"></a>主要逻辑的说明</h3><p>1.从字典转模型基本方法 ==- (instancetype)mj_setKeyValues:(id)keyValues context:(NSManagedObjectContext *)context== 开始捋顺逻辑:</p>\n<p><img src=\"http://okhqmtd8q.bkt.clouddn.com/MJExtension%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB-01.jpg\" alt=\"\"></p>\n<h3 id=\"代码中需要学习的部分\"><a href=\"#代码中需要学习的部分\" class=\"headerlink\" title=\"代码中需要学习的部分\"></a>代码中需要学习的部分</h3><p>1.对于经常用到的方法或者语句可以抽成宏或者内联方法,方便使用.</p>\n<p>2.runtime获取属性的应用是方法的关键.</p>\n<p>3.对于<strong><code>objc_setAssociatedObject</code></strong>和<strong><code>objc_getAssociatedObject</code></strong>动态增加属性方法的使用.</p>\n<p>4.将 key值 和 模型属性 的转换桥梁以动态属性的方式写在自己的类里面.对于模型的侵入性很小.</p>\n<p>5.将每一个模型中属性的包装.然后NSObject中根据之后包装进行处理,转换成想要的样子</p>\n<h3 id=\"runTime\"><a href=\"#runTime\" class=\"headerlink\" title=\"runTime\"></a>runTime</h3><p>1.获取所有属性<br><code>class_copyPropertyList</code>说明：使用class_copyPropertyList并不会获取无@property声明的成员变</p>\n<ol>\n<li>获取属性名<code>property_getName</code><br>3.描述一个属性<code>objc_property_t</code><br>4.获取所有属性特性<code>property_copyAttributeList</code></li>\n<li>获取属性特性描述字符串<code>property_getAttributes</code>,获取的结果类似是<code>T@&quot;NSDictionary&quot;,C,N,V_dict1</code></li>\n</ol>\n<p><strong>注意获取的结果解释:</strong><br> 属性类型  name值：T  value：变化<br> 编码类型  name值：C(copy) &amp;(strong) W(weak)空(assign) 等 value：无<br>非/原子性 name值：空(atomic) N(Nonatomic)  value：无<br>变量名称  name值：V  value：变化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">unsigned int outPut = 0;</div><div class=\"line\">objc_property_t *prots = class_copyPropertyList([TestMadal class], &amp;outPut);</div><div class=\"line\"></div><div class=\"line\">for (int i = 0; i&lt;outPut; i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    objc_property_t property = prots[i];</div><div class=\"line\">    const char *t = property_getName(property);</div><div class=\"line\">    const char *attrs = property_getAttributes(property);</div><div class=\"line\">    NSLog(@&quot;%s---%s&quot;,t,attrs);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","categories":[],"tags":[]},{"title":"源码解析-ObjectMapper","date":"2017-01-28T08:13:03.000Z","path":"2017/01/28/源码解析-ObjectMapper/","text":"两个协议文件(Mappleable 和 ImmutableMapple),是其他一切的基础 map文件 主要是用来匹配json字符和模型 Mapper文件是转换模型的逻辑文件,里面各种映射逻辑 operators 文件是操作符定义的文件,将模型和jsonvalue关联的地方 toJson 和 fromJson 文件是转换的过程中需要做的工作 transform 转成模型的具体类型的转换 ##Mappable和ImmutableMapple文件 1.文件中主要是两个必须实现的协议方法,以及协议的扩展,协议的扩展中的方法也可以直接调用转换成模型. 2.模型遵守协议的时候一定要搞清楚需要模型中的变量是变量还是常量.如果是常量的话,然后继承不同的协议,进行不同的处理. 12345678 struct Struct &#123; let prop1: String let prop2: Int&#125; extension Struct: ImmutableMappable &#123; init(map: Map) throws &#123; prop1 = try map.value(&quot;prop1&quot;) prop2 = try map.value(&quot;prop2&quot;) Mapper文件这个方法是跟外界接触的方法,主要分为两大部分: 将json[String:Any]转为模型T,还有就是把T转为json.主要说一下将json转化为模型. 将一个json串转化成的value给一个已经存在的模型对象赋值还是直接创建一个新的模型,对新的模型赋值.主要讲一下给一个新的模型赋值的例子方法例子: 12345678//直接将json中得到的value赋值给这个已经存在的object public func map(JSONObject: Any?, toObject object: N) -&gt; N&#123; &#125; // 重新创建一个模型,然后将json的value赋值给这个模型 public func map(JSONObject: Any?) -&gt; N?&#123; &#125; ####json数据处理1.map可以将json字符串转换成相应的字典或者数组格式,然后再次转换成相应的模型.格式对应的模型总结如下: [String:Any] -&gt; T,[[String:Any]] -&gt; [T],[String:[string:Any]] -&gt; [String:T],[String:[[String:Any]]] -&gt; [String:[T]],[[[string:Any]]] -&gt; [[T]]2.不管这些格式多么复杂,都是通过遍历等各种方法得到最终核心[String:Any]这个格式,然后变成T.所以可以看看这个方法是怎么写的: 123456789101112131415161718192021222324// 对于新创建一个模型 public func map(JSON: [String: Any]) -&gt; N? &#123; let map = Map(mappingType: .fromJSON, JSON: JSON, context: context, shouldIncludeNilValues: shouldIncludeNilValues) // N 是遵循了StaticMappable协议的 if let klass = N.self as? StaticMappable.Type &#123; if var object = klass.objectForMapping(map: map) as? N &#123; object.mapping(map: map) return object &#125; &#125; else if let klass = N.self as? Mappable.Type &#123; // Check if object is Mappable if var object = klass.init(map: map) as? N &#123; object.mapping(map: map) return object &#125; &#125; else if N.self is ImmutableMappable.Type &#123; // Check if object is ImmutableMappable assert(false, \"'ImmutableMappable' type requires throwing version of function \\(#function) - use 'try' before \\(#function)\") &#125; else &#123; // Ensure BaseMappable is not implemented directly assert(false, \"BaseMappable should not be implemented directly. Please implement Mappable, StaticMappable or ImmutableMappable\") &#125; return nil &#125; 对于上面一段代码主要是逻辑是: 创建一个map实例对象. 看一下模型T遵守的协议是哪个,然后创建模型实例并且调用协议中的方法 Map文件 1.map文件最主要搞明白几个主要的变量和subscript方法: JSON变量是mapper文件中传递过来带有json值得变量. isKeyPresent如果是true,则可以将其赋值给对应的模型变量. currentValue存放模型变量的值 currentKey是实例对象map中括号中的key值. keyIsNested是key值是否被包裹着,例如a.b就是被包裹着 toObject是否映射到一个已经存在的模型上. 重写subscript()方法就可以让自定义的实例变量也可以通过像字典那样,可以拥有key值.我们还可以给类、结构、枚举等自定义下标（subscript）。 12345678910111213141516171819202122232425262728//参数不可以是inout类型参数，且参数不能有默认值// 可以只实现get方法,或者set和get方法同时实现subscript(参数1，参数2...)-&gt;返回值&#123; get&#123; &#125; set(newValue)&#123; &#125; &#125;// 例子subscript(requestedMeal : MealTime) -&gt; String &#123; get &#123; if let thisMeal = meals[requestedMeal] &#123; return thisMeal &#125; else &#123; return &quot;Ramen&quot; &#125; &#125; set &#123; meals[requestedMeal] = newValue &#125; &#125; ** 其中最主要的方法是下面这个: 12345678910111213141516171819202122232425262728293031 public subscript(key: String, nested nested: Bool, delimiter delimiter: String, ignoreNil ignoreNil: Bool) -&gt; Map &#123; // save key and value associated to it currentKey = key keyIsNested = nested nestedKeyDelimiter = delimiter if mappingType == .fromJSON &#123; // check if a value exists for the current key // do this pre-check for performance reasons if nested == false &#123; let object = JSON[key] let isNSNull = object is NSNull // 判断是不是null isKeyPresent = isNSNull ? true : object != nil currentValue = isNSNull ? nil : object &#125; else &#123; // break down the components of the key that are separated by . (isKeyPresent, currentValue) = valueFor(ArraySlice(key.components(separatedBy: delimiter)), dictionary: JSON) &#125; // update isKeyPresent if ignoreNil is true if ignoreNil &amp;&amp; currentValue == nil &#123; isKeyPresent = false &#125; &#125; return self&#125; 主要逻辑是: 通过key或者去JSON字典中值,判断是不是nil或者NULL 如果key被包裹着,然后拆开获取JSON中的value值 Operators文件 Swift可以自定义运算符。自定义的运算符可以在全局使用。需要使用operator关键字。使用prefix, infix or postfix标记运算符使用的位置。(另外swift还可以对结构体.类重载已经存在运算符,在全局使用) 文件中对不同的参数进行了完备的定义.兼顾各种情况. 12345678910111213这里有三个步骤去定义一个自定义操作符： 1.命名你的运算符 例如:&gt;&gt;&gt; 2.选择一种类型:一元,二元,三元 例如:一元关键字 : prefix or postfix,二元或者三元 :infix. 3.设置它的优先级和结合性:associativity和优先级precedence。associativity有三个值：left, right, none,默认是none。precedence默认值是：100。可以默认不写 infix operator &gt;&gt;&gt; &#123; // 有默认值,可以不写 associativity left precedence 140 &#125;func +- (left: Int, right: Int) -&gt; Int &#123; return 111&#125; 暂时写这些捋顺一下这个源码的逻辑.","content":"<ol>\n<li>两个协议文件<strong>(Mappleable 和 ImmutableMapple)</strong>,是其他一切的基础</li>\n<li>map文件 主要是用来匹配json字符和模型</li>\n<li>Mapper文件是转换模型的逻辑文件,里面各种映射逻辑</li>\n<li>operators 文件是操作符定义的文件,将模型和jsonvalue关联的地方</li>\n<li>toJson 和 fromJson 文件是转换的过程中需要做的工作</li>\n<li>transform 转成模型的具体类型的转换    </li>\n</ol>\n<p>##Mappable和ImmutableMapple文件<br> 1.文件中主要是两个必须实现的协议方法,以及协议的扩展,协议的扩展中的方法也可以直接调用转换成模型.<br> 2.模型遵守协议的时候一定要搞清楚需要模型中的变量是变量还是常量.如果是常量的话,然后继承不同的协议,进行不同的处理.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"> struct Struct &#123;</div><div class=\"line\">\tlet prop1: String</div><div class=\"line\">\tlet prop2: Int</div><div class=\"line\">&#125;</div><div class=\"line\">  extension Struct: ImmutableMappable &#123;</div><div class=\"line\">\tinit(map: Map) throws &#123;</div><div class=\"line\">\t\tprop1 = try map.value(&quot;prop1&quot;)</div><div class=\"line\">\t\tprop2 = try map.value(&quot;prop2&quot;)</div></pre></td></tr></table></figure>\n<h2 id=\"Mapper文件\"><a href=\"#Mapper文件\" class=\"headerlink\" title=\"Mapper文件\"></a>Mapper文件</h2><p>这个方法是跟外界接触的方法,主要分为两大部分:</p>\n<ol>\n<li>将<code>json[String:Any]</code>转为模型<code>T</code>,还有就是把<code>T</code>转为<code>json</code>.主要说一下将<strong>json转化为模型</strong>.</li>\n<li><p>将一个json串转化成的value给一个已经存在的模型对象赋值还是直接创建一个新的模型,对新的模型赋值.主要讲一下给一个<strong>新的模型赋值的例子</strong>方法例子:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//直接将json中得到的value赋值给这个已经存在的object</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span><span class=\"params\">(JSONObject: Any?, toObject object: N)</span></span> -&gt; <span class=\"type\">N</span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 重新创建一个模型,然后将json的value赋值给这个模型</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span><span class=\"params\">(JSONObject: Any?)</span></span> -&gt; <span class=\"type\">N</span>?&#123;</div><div class=\"line\">  </div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>####json数据处理<br>1.map可以将<code>json</code>字符串转换成相应的字典或者数组格式,然后再次转换成相应的模型.格式对应的模型总结如下:<br> <code>[String:Any]</code> -&gt; <code>T</code>,<br><code>[[String:Any]]</code> -&gt; <code>[T]</code>,<br><code>[String:[string:Any]]</code> -&gt; <code>[String:T]</code>,<br><code>[String:[[String:Any]]]</code> -&gt; <code>[String:[T]]</code>,<br><code>[[[string:Any]]]</code> -&gt; <code>[[T]]</code><br>2.不管这些格式多么复杂,都是通过遍历等各种方法得到最终核心<code>[String:Any]</code>这个格式,然后变成<code>T</code>.所以可以看看这个方法是怎么写的:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 对于新创建一个模型</span></div><div class=\"line\"> \t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">map</span><span class=\"params\">(JSON: [String: Any])</span></span> -&gt; <span class=\"type\">N</span>? &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">let</span> <span class=\"built_in\">map</span> = <span class=\"type\">Map</span>(mappingType: .fromJSON, <span class=\"type\">JSON</span>: <span class=\"type\">JSON</span>, context: context, shouldIncludeNilValues: shouldIncludeNilValues)</div><div class=\"line\">\t\t<span class=\"comment\">// N 是遵循了StaticMappable协议的</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">let</span> klass = <span class=\"type\">N</span>.<span class=\"keyword\">self</span> <span class=\"keyword\">as</span>? <span class=\"type\">StaticMappable</span>.<span class=\"type\">Type</span> &#123; </div><div class=\"line\">\t\t</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">var</span> object = klass.objectForMapping(<span class=\"built_in\">map</span>: <span class=\"built_in\">map</span>) <span class=\"keyword\">as</span>? <span class=\"type\">N</span> &#123;</div><div class=\"line\">\t\t\t\tobject.mapping(<span class=\"built_in\">map</span>: <span class=\"built_in\">map</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> object</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> klass = <span class=\"type\">N</span>.<span class=\"keyword\">self</span> <span class=\"keyword\">as</span>? <span class=\"type\">Mappable</span>.<span class=\"type\">Type</span> &#123; <span class=\"comment\">// Check if object is Mappable</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">var</span> object = klass.<span class=\"keyword\">init</span>(<span class=\"built_in\">map</span>: <span class=\"built_in\">map</span>) <span class=\"keyword\">as</span>? <span class=\"type\">N</span> &#123;</div><div class=\"line\">\t\t\t\tobject.mapping(<span class=\"built_in\">map</span>: <span class=\"built_in\">map</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> object</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"type\">N</span>.<span class=\"keyword\">self</span> <span class=\"keyword\">is</span> <span class=\"type\">ImmutableMappable</span>.<span class=\"type\">Type</span> &#123; <span class=\"comment\">// Check if object is ImmutableMappable</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">assert</span>(<span class=\"literal\">false</span>, <span class=\"string\">\"'ImmutableMappable' type requires throwing version of function \\(#function)  - use 'try' before \\(#function)\"</span>)</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// Ensure BaseMappable is not implemented directly</span></div><div class=\"line\">\t\t\t<span class=\"built_in\">assert</span>(<span class=\"literal\">false</span>, <span class=\"string\">\"BaseMappable should not be implemented directly. Please implement Mappable, StaticMappable or ImmutableMappable\"</span>)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>对于上面一段代码主要是逻辑是: </p>\n<ul>\n<li>创建一个map实例对象.</li>\n<li>看一下模型<code>T</code>遵守的协议是哪个,然后创建模型实例并且调用协议中的方法</li>\n</ul>\n<h2 id=\"Map文件\"><a href=\"#Map文件\" class=\"headerlink\" title=\"Map文件\"></a>Map文件</h2><p> 1.map文件最主要搞明白几个主要的变量和<code>subscript</code>方法:<br> <code>JSON</code>变量是mapper文件中传递过来带有json值得变量.<br> <code>isKeyPresent</code>如果是true,则可以将其赋值给对应的模型变量.<br> <code>currentValue</code>存放模型变量的值<br> <code>currentKey</code>是实例对象map中括号中的key值.<br> <code>keyIsNested</code>是key值是否被包裹着,例如<code>a.b</code>就是被包裹着<br> <code>toObject</code>是否映射到一个已经存在的模型上.</p>\n<p> 重写<code>subscript()</code>方法就可以让自定义的实例变量也可以通过像字典那样,可以拥有key值.我们还可以给类、结构、枚举等自定义下标（subscript）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">//参数不可以是inout类型参数，且参数不能有默认值</div><div class=\"line\">// 可以只实现get方法,或者set和get方法同时实现</div><div class=\"line\">subscript(参数1，参数2...)-&gt;返回值&#123;  </div><div class=\"line\">    get&#123;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    set(newValue)&#123;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 例子</div><div class=\"line\">subscript(requestedMeal : MealTime) -&gt; String</div><div class=\"line\">        &#123;</div><div class=\"line\">        get</div><div class=\"line\">        &#123;</div><div class=\"line\">            if let thisMeal = meals[requestedMeal]</div><div class=\"line\">            &#123;</div><div class=\"line\">                return thisMeal</div><div class=\"line\">            &#125;</div><div class=\"line\">            else</div><div class=\"line\">            &#123;</div><div class=\"line\">                return &quot;Ramen&quot;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        set</div><div class=\"line\">        &#123;</div><div class=\"line\">            meals[requestedMeal] = newValue</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>** 其中最主要的方法是下面这个:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">   public subscript(key: String, nested nested: Bool, delimiter delimiter: String, ignoreNil ignoreNil: Bool) -&gt; Map &#123;</div><div class=\"line\">\t// save key and value associated to it</div><div class=\"line\">\tcurrentKey = key</div><div class=\"line\">\tkeyIsNested = nested</div><div class=\"line\">\tnestedKeyDelimiter = delimiter</div><div class=\"line\"></div><div class=\"line\">\tif mappingType == .fromJSON &#123;</div><div class=\"line\">\t\t// check if a value exists for the current key </div><div class=\"line\">\t\t// do this pre-check for performance reasons</div><div class=\"line\">\t\tif nested == false &#123;</div><div class=\"line\">\t\t\tlet object = JSON[key]</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t\tlet isNSNull = object is NSNull // 判断是不是null</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tisKeyPresent = isNSNull ? true : object != nil</div><div class=\"line\">\t\t\tcurrentValue = isNSNull ? nil : object</div><div class=\"line\">\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t// break down the components of the key that are separated by .</div><div class=\"line\">\t\t\t(isKeyPresent, currentValue) = valueFor(ArraySlice(key.components(separatedBy: delimiter)), dictionary: JSON)</div><div class=\"line\"></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t// update isKeyPresent if ignoreNil is true</div><div class=\"line\">\t\tif ignoreNil &amp;&amp; currentValue == nil &#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t\tisKeyPresent = false</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\treturn self</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要逻辑是:</p>\n<ul>\n<li>通过key或者去JSON字典中值,判断是不是nil或者NULL</li>\n<li>如果key被包裹着,然后拆开获取JSON中的value值</li>\n</ul>\n<h2 id=\"Operators文件\"><a href=\"#Operators文件\" class=\"headerlink\" title=\"Operators文件\"></a>Operators文件</h2><ol>\n<li>Swift可以自定义运算符。自定义的运算符可以在全局使用。需要使用operator关键字。使用prefix, infix or postfix标记运算符使用的位置。(另外swift还可以对结构体.类重载已经存在运算符,在全局使用)</li>\n<li>文件中对不同的参数进行了完备的定义.兼顾各种情况.</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">这里有三个步骤去定义一个自定义操作符：</div><div class=\"line\">\t1.命名你的运算符  例如:&gt;&gt;&gt;</div><div class=\"line\">\t2.选择一种类型:一元,二元,三元    例如:一元关键字 : prefix or postfix,二元或者三元 :infix.</div><div class=\"line\">\t3.设置它的优先级和结合性:associativity和优先级precedence。associativity有三个值：left, right, none,默认是none。precedence默认值是：100。可以默认不写</div><div class=\"line\">\t</div><div class=\"line\">\tinfix operator &gt;&gt;&gt; &#123;</div><div class=\"line\">\t// 有默认值,可以不写</div><div class=\"line\">\t associativity left </div><div class=\"line\">\t precedence 140 </div><div class=\"line\">\t &#125;</div><div class=\"line\">func +- (left: Int, right: Int) -&gt; Int &#123;</div><div class=\"line\">    return 111</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>暂时写这些捋顺一下这个源码的逻辑.   </p>\n","excerpt":"","categories":[],"tags":[]},{"title":"NSPredicate的一些简单用法","date":"2017-01-21T03:00:42.000Z","path":"2017/01/21/NSPredicate的一些简单用法/","text":"NSPredicate可以支持数据库查询,平时的一些数组查询之类也用这个方法,以下是一些总结 ####格式字符串的一些基本写法1&gt; @&quot;attributeName == %@&quot; 就是属性名字等于某个值2&gt;@&quot;%K == %@&quot;,将属性名字变为%K,增加拓展性. 12345// 1.第一种写法,右边值如果是字符串,可以用单引号表示NSPredicate *pre = [NSPredicate predicateWithFormat:@&quot;nickName == &apos;小明&apos;&quot;,];// 2.第二种写法,%K的K必须大写,不能用%@代替NSString *name = @&quot;cat.nickName&quot;;NSPredicate *pre = [NSPredicate predicateWithFormat:@&quot;%K == %@&quot;,name,@&quot;小明&quot;]; ####左右两边基本的比较操作符号1.=,==左边表达式等于右手表达式 2.&gt;=,=&gt;左边表达式大于或等于右边表达式 3.&lt;=,=&lt;左变表达式小于或等于右边表达式 4&gt; 或者 &lt; 5.!=,&lt;&gt;左边表达式不等于右边表达式 6.IN左边表达式必须出现在右边表达式指定的集合中。即name IN {&#39;Milk&#39;，&#39;Eggs&#39;，&#39;Bread&#39;} 7.BETWEEN左边表达式在右边表达式之间或等于右边表达式。即1 {0，33}之间。如果你的左边表达式是0或33，也是真的 8.以下是字符串表达式的比较符号(1)BEGINSWITH左边表达式以右边表达式开始(2)CONTAINS左边表达式包含表达式(3)ENDSWITH左边表达式以右边表达式结束(4)LIKE左边表达式等于右手表达式：？和*作为通配符，其中？匹配1个字符，*匹配0个或多个字符(5)MATCHES左边表达式等于右边表达式使用正则表达式样式比较 ####两个表达式的逻辑符号1.AND,&amp;&amp;,逻辑AND 2.OR,||逻辑或 3.NOT,!逻辑NOT ###数组的操作的一些特性1.对数组中数字集合的一些操作(1)@avg返回collection中对象平均值,以NSNumber的形式返回(2)@count集合中总共的个数,,以NSNumber的形式返回(3)``@min1(4)使用``valueForKeyPath``返回相应的结果 // 处理大量数字组成的数组的时候可以使用,可以方便的进行判断.然后进行下一步操作NSArray array = @[@(30),@(40),@(50)];NSPredicate pre = [NSPredicate// 最小值是不是大于30predicateWithFormat:@”@min.intValue &gt; 30”];BOOL ok = [pre evaluateWithObject:array];// 可以使用key == value 来去的最小,最大,总和,平均等值.并且返回一个nsnumer类型的值NSNumber *a = [array11 valueForKeyPath:@”@min.intValue”];NSLog(@”%d”,a.intValue);12342.**数组中存放对象的一些操作**(1) ``@distinctUnionOfObjects``返回一个数组,这个数组是由操作符``.``右侧属性的值组成的,并且重复的值被过滤掉.``@unionOfObjects``逻辑和``@distinctUnionOfObjects``相同,但是重复的值没有被过滤掉(2)``@distinctUnionOfArrays``返回的是数组,但是将数组中的数组元素拆分到一个数组里面,逻辑同上面,不包括重复值``@unionOfArrays``包括重复值(3)返回值都是使用``valueForKeyPath``取到 CatModal cat1 = [[CatModal alloc] initWithNickName:@”小明” withWeight:30.1];CatModal cat2 = [[CatModal alloc] initWithNickName:@”mimi” withWeight:33.1]; CatModal cat4 = [[CatModal alloc] initWithNickName:@”fuu” withWeight:35.1];CatModal cat5 = [[CatModal alloc] initWithNickName:@”err” withWeight:35.1]; TestModal test1 = [[TestModal alloc] initWithName:@”小七” withHeith:90.1 withCat:cat1];TestModal test2 = [[TestModal alloc] initWithName:@”小七” withHeith:80.1 withCat:cat2];withHeith:60.1 withCat:cat3]; TestModal *test4 = [[TestModal alloc] initWithName:@”小七” withHeith:60.1 withCat:cat4]; TestModal *test5 = [[TestModal alloc] initWithName:@”小七” withHeith:60.1 withCat:cat5]; NSArray array = @[test2,test1];NSArray array2 = @[test4,test5];NSArray *arrayofarray = @[array,array2]; NSArray array11111 = [array valueForKeyPath:@”@distinctUnionOfObjects.cat”];for (CatModal cat in array11111) { NSLog(@”%@\\n”,cat.nickName);[小明,mini]} NSArray array1 = [arrayofarray valueForKeyPath:@”@distinctUnionOfArrays.cat”];for (CatModal cat in array1) { NSLog(@”%@\\n”,cat.nickName); // [fuu 小明 mimi err],并不是数组中的数组的形式}1234567893.**数组中的``SELF``指什么**数组中``SELF``指的是数组中包含的每一个对象4.**对数组中具体的某个位置进行操作查询**``array[index]``指定数组中指定索引处的元素进行匹配操作``array[FIRST]````array[LAST]````array[SIZE]``分别表示对数组第一个,最后一个,数组总数进行操作 CatModal cat1 = [[CatModal alloc] initWithNickName:@”小明” withWeight:30.1];CatModal cat2 = [[CatModal alloc] initWithNickName:@”mimi” withWeight:33.1];CatModal cat3 = [[CatModal alloc] initWithNickName:@”miru” withWeight:35.1];CatModal cat4 = [[CatModal alloc] initWithNickName:@”fuu” withWeight:35.1];CatModal cat5 = [[CatModal alloc] initWithNickName:@”err” withWeight:35.1];CatModal cat6 = [[CatModal alloc] initWithNickName:@”ooo” withWeight:35.1];TestModal *test1 = [[TestModal alloc] initWithName:@”小七” withHeith:90.1 withCat:cat1];test1.catsArray = @[cat2,cat1]; TestModal test2 = [[TestModal alloc] initWithName:@”小七” withHeith:80.1 withCat:cat2];test2.catsArray = @[cat4];TestModal test3 = [[TestModal alloc] initWithName:@”小七” withHeith:60.1 withCat:cat3];test3.catsArray = @[cat5,cat6]; NSArray array = @[test2,test1,test3];NSPredicate pre = [NSPredicate predicateWithFormat:@”catsArray[SIZE] == 1”];NSArray *array1 = [array filteredArrayUsingPredicate:pre];NSLog(@”11111%@”,array1);12345675.**对数组中的数组进行操作的时候查询关键字,只能用在数组,一对多的形式**``ANY或者SOME``对数组中的数组进行查询,只要有符合条件的,就返回``TRUE````ALL``数组中所有都符合条件的时候才会返回。``NONE``都不正确的时候才返回true。 CatModal cat1 = [[CatModal alloc] initWithNickName:@”小明” withWeight:30.1];CatModal cat2 = [[CatModal alloc] initWithNickName:@”mimi” withWeight:33.1];CatModal cat3 = [[CatModal alloc] initWithNickName:@”miru” withWeight:35.1];TestModal test1 = [[TestModal alloc] initWithName:@”小七” withHeith:90.1 withCat:cat1];test1.catsArray = @[cat2,cat3]; TestModal test2 = [[TestModal alloc] initWithName:@”小七” withHeith:80.1 withCat:cat1];test2.catsArray = @[cat2];TestModal test3 = [[TestModal alloc] initWithName:@”小七” withHeith:60.1 withCat:cat1];test3.catsArray = @[cat1,cat3];NSArray array = @[test2,test1,test3];// ALL ANY SOME 用于NSArray NSSet .ANY SOME是数组中有真的就返回. ALL是数组中全部是真的才返回NSPredicate pre = [NSPredicate predicateWithFormat:@”ALL catsArray.weight &gt; 31.0”];NSArray *array1 = [array filteredArrayUsingPredicate:pre];NSLog(@”%@”,array1);1234567891011注意:1.查询过程中使用``department.name``这样的形式比较耗费性能.尽量不要使用.``department == %@``这样的形式查询效率最高.2. ``@&quot;firstName beginswith[cd] &apos;Matt&apos; AND (ANY directreports.paygrade &lt;= 7)&quot;`` 比下面这种形式更高效 ``@&quot;(ANY directreports.paygrade &lt;= 7) AND (firstName beginswith[cd] &apos;Matt&apos;)&quot;``3.使用predicate的类必须支持key-value-coding ,这样才可以在其他地方使用. 实际上使用predicate 也是根据key-value这样的形式来查询的.4.``[c],[d],[cd]``可以加到比较符号的后面表示不区分大小写，不区分发音符号，两这个都不区分5.如果想要匹配null或者nil值得时候,需要额外增加一条对比 predicate = [NSPredicate predicateWithFormat:@”(firstName == %@) || (firstName == nil)”];filteredArray = [array filteredArrayUsingPredicate:predicate];NSLog(@”%@”, filteredArray);```","content":"<p>NSPredicate可以支持数据库查询,平时的一些数组查询之类也用这个方法,以下是一些总结</p>\n<p>####格式字符串的一些基本写法<br>1&gt; <code>@&quot;attributeName == %@&quot;</code> 就是属性名字等于某个值<br>2&gt;<code>@&quot;%K == %@&quot;</code>,将属性名字变为%K,增加拓展性.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 1.第一种写法,右边值如果是字符串,可以用单引号表示</div><div class=\"line\">NSPredicate *pre = [NSPredicate predicateWithFormat:@&quot;nickName == &apos;小明&apos;&quot;,];</div><div class=\"line\">// 2.第二种写法,%K的K必须大写,不能用%@代替</div><div class=\"line\">NSString *name = @&quot;cat.nickName&quot;;</div><div class=\"line\">NSPredicate *pre = [NSPredicate predicateWithFormat:@&quot;%K == %@&quot;,name,@&quot;小明&quot;];</div></pre></td></tr></table></figure>\n<p>####左右两边基本的比较操作符号<br>1.<code>=,==</code>左边表达式等于右手表达式</p>\n<p>2.<code>&gt;=,=&gt;</code>左边表达式大于或等于右边表达式</p>\n<p>3.<code>&lt;=,=&lt;</code>左变表达式小于或等于右边表达式</p>\n<p>4<code>&gt;</code> 或者 <code>&lt;</code></p>\n<p>5.<code>!=,&lt;&gt;</code>左边表达式不等于右边表达式</p>\n<p>6.<code>IN</code>左边表达式必须出现在右边表达式指定的集合中。即<code>name IN {&#39;Milk&#39;，&#39;Eggs&#39;，&#39;Bread&#39;}</code></p>\n<p>7.<code>BETWEEN</code>左边表达式在右边表达式之间或等于右边表达式。即<code>1 {0，33}</code>之间。如果你的左边表达式是0或33，也是真的</p>\n<p>8.以下是<strong>字符串表达式的比较符号</strong><br>(1)<code>BEGINSWITH</code>左边表达式以右边表达式开始<br>(2)<code>CONTAINS</code>左边表达式包含表达式<br>(3)<code>ENDSWITH</code>左边表达式以右边表达式结束<br>(4)<code>LIKE</code>左边表达式等于右手表达式：<code>？</code>和<code>*</code>作为通配符，其中<code>？</code>匹配1个字符，<code>*</code>匹配0个或多个字符<br>(5)<code>MATCHES</code>左边表达式等于右边表达式使用正则表达式样式比较</p>\n<p>####两个表达式的逻辑符号<br>1.<code>AND,&amp;&amp;</code>,逻辑AND</p>\n<p>2.<code>OR,||</code>逻辑或</p>\n<p>3.<code>NOT,!</code>逻辑NOT</p>\n<p>###数组的操作的一些特性<br>1.<strong>对数组中数字集合的一些操作</strong><br>(1)<code>@avg</code>返回collection中对象平均值,以NSNumber的形式返回<br>(2)<code>@count</code>集合中总共的个数,,以NSNumber的形式返回<br>(3)``@min<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(4)使用``valueForKeyPath``返回相应的结果</div></pre></td></tr></table></figure></p>\n<p>// 处理大量数字组成的数组的时候可以使用,可以方便的进行判断.然后进行下一步操作<br>NSArray <em>array = @[@(30),@(40),@(50)];<br>NSPredicate </em>pre = [NSPredicate<br>// 最小值是不是大于30<br>predicateWithFormat:@”@min.intValue &gt; 30”];<br>BOOL ok = [pre evaluateWithObject:array];<br>// 可以使用key == value 来去的最小,最大,总和,平均等值.并且返回一个nsnumer类型的值<br>NSNumber *a =  [array11 valueForKeyPath:@”@min.intValue”];<br>NSLog(@”%d”,a.intValue);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">2.**数组中存放对象的一些操作**</div><div class=\"line\">(1) ``@distinctUnionOfObjects``返回一个数组,这个数组是由操作符``.``右侧属性的值组成的,并且重复的值被过滤掉.``@unionOfObjects``逻辑和``@distinctUnionOfObjects``相同,但是重复的值没有被过滤掉</div><div class=\"line\">(2)``@distinctUnionOfArrays``返回的是数组,但是将数组中的数组元素拆分到一个数组里面,逻辑同上面,不包括重复值``@unionOfArrays``包括重复值</div><div class=\"line\">(3)返回值都是使用``valueForKeyPath``取到</div></pre></td></tr></table></figure></p>\n<p>CatModal <em>cat1 = [[CatModal alloc] initWithNickName:@”小明” withWeight:30.1];<br>CatModal </em>cat2 = [[CatModal alloc] initWithNickName:@”mimi” withWeight:33.1];</p>\n<p>CatModal <em>cat4 = [[CatModal alloc] initWithNickName:@”fuu” withWeight:35.1];<br>CatModal </em>cat5 = [[CatModal alloc] initWithNickName:@”err” withWeight:35.1];</p>\n<p>TestModal <em>test1 = [[TestModal alloc] initWithName:@”小七” withHeith:90.1 withCat:cat1];<br>TestModal </em>test2 = [[TestModal alloc] initWithName:@”小七” withHeith:80.1 withCat:cat2];<br>withHeith:60.1 withCat:cat3];</p>\n<p>TestModal *test4 = [[TestModal alloc] initWithName:@”小七” withHeith:60.1 withCat:cat4];</p>\n<p>TestModal *test5 = [[TestModal alloc] initWithName:@”小七” withHeith:60.1 withCat:cat5];</p>\n<p>NSArray <em>array = @[test2,test1];<br>NSArray </em>array2 = @[test4,test5];<br>NSArray *arrayofarray = @[array,array2];</p>\n<p>NSArray <em>array11111 = [array valueForKeyPath:@”@distinctUnionOfObjects.cat”];<br>for (CatModal </em>cat in array11111) {<br>    NSLog(@”%@\\n”,cat.nickName);[小明,mini]<br>}</p>\n<p>NSArray <em>array1 = [arrayofarray valueForKeyPath:@”@distinctUnionOfArrays.cat”];<br>for (CatModal </em>cat in array1) {<br>    NSLog(@”%@\\n”,cat.nickName); // [fuu 小明 mimi err],并不是数组中的数组的形式<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">3.**数组中的``SELF``指什么**</div><div class=\"line\">数组中``SELF``指的是数组中包含的每一个对象</div><div class=\"line\"></div><div class=\"line\">4.**对数组中具体的某个位置进行操作查询**</div><div class=\"line\"></div><div class=\"line\">``array[index]``指定数组中指定索引处的元素进行匹配操作</div><div class=\"line\">``array[FIRST]````array[LAST]````array[SIZE]``分别表示对数组第一个,最后一个,数组总数进行操作</div></pre></td></tr></table></figure></p>\n<p>CatModal <em>cat1 = [[CatModal alloc] initWithNickName:@”小明” withWeight:30.1];<br>CatModal </em>cat2 = [[CatModal alloc] initWithNickName:@”mimi” withWeight:33.1];<br>CatModal <em>cat3 = [[CatModal alloc] initWithNickName:@”miru” withWeight:35.1];<br>CatModal </em>cat4 = [[CatModal alloc] initWithNickName:@”fuu” withWeight:35.1];<br>CatModal <em>cat5 = [[CatModal alloc] initWithNickName:@”err” withWeight:35.1];<br>CatModal </em>cat6 = [[CatModal alloc] initWithNickName:@”ooo” withWeight:35.1];<br>TestModal *test1 = [[TestModal alloc] initWithName:@”小七” withHeith:90.1 withCat:cat1];<br>test1.catsArray = @[cat2,cat1];</p>\n<p>TestModal <em>test2 = [[TestModal alloc] initWithName:@”小七” withHeith:80.1 withCat:cat2];<br>test2.catsArray = @[cat4];<br>TestModal </em>test3 = [[TestModal alloc] initWithName:@”小七” withHeith:60.1 withCat:cat3];<br>test3.catsArray = @[cat5,cat6];</p>\n<p>NSArray <em>array = @[test2,test1,test3];<br>NSPredicate </em>pre = [NSPredicate predicateWithFormat:@”catsArray[SIZE] == 1”];<br>NSArray *array1 = [array filteredArrayUsingPredicate:pre];<br>NSLog(@”11111%@”,array1);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">5.**对数组中的数组进行操作的时候查询关键字,只能用在数组,一对多的形式**</div><div class=\"line\">``ANY或者SOME``对数组中的数组进行查询,只要有符合条件的,就返回``TRUE``</div><div class=\"line\"></div><div class=\"line\">``ALL``数组中所有都符合条件的时候才会返回。</div><div class=\"line\"></div><div class=\"line\">``NONE``都不正确的时候才返回true。</div></pre></td></tr></table></figure></p>\n<p>CatModal <em>cat1 = [[CatModal alloc] initWithNickName:@”小明” withWeight:30.1];<br>CatModal </em>cat2 = [[CatModal alloc] initWithNickName:@”mimi” withWeight:33.1];<br>CatModal <em>cat3 = [[CatModal alloc] initWithNickName:@”miru” withWeight:35.1];<br>TestModal </em>test1 = [[TestModal alloc] initWithName:@”小七” withHeith:90.1 withCat:cat1];<br>test1.catsArray = @[cat2,cat3];</p>\n<p>TestModal <em>test2 = [[TestModal alloc] initWithName:@”小七” withHeith:80.1 withCat:cat1];<br>test2.catsArray = @[cat2];<br>TestModal </em>test3 = [[TestModal alloc] initWithName:@”小七” withHeith:60.1 withCat:cat1];<br>test3.catsArray = @[cat1,cat3];<br>NSArray <em>array = @[test2,test1,test3];<br>// ALL ANY SOME 用于NSArray NSSet .ANY SOME是数组中有真的就返回. ALL是数组中全部是真的才返回<br>NSPredicate </em>pre = [NSPredicate predicateWithFormat:@”ALL catsArray.weight &gt; 31.0”];<br>NSArray *array1 = [array filteredArrayUsingPredicate:pre];<br>NSLog(@”%@”,array1);<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">注意:</div><div class=\"line\">1.查询过程中使用``department.name``这样的形式比较耗费性能.尽量不要使用.``department == %@``这样的形式查询效率最高.</div><div class=\"line\">2. ``@&quot;firstName beginswith[cd] &apos;Matt&apos; AND (ANY directreports.paygrade &lt;= 7)&quot;`` 比下面这种形式更高效 ``@&quot;(ANY directreports.paygrade &lt;= 7) AND (firstName beginswith[cd] &apos;Matt&apos;)&quot;``</div><div class=\"line\">3.使用predicate的类必须支持key-value-coding ,这样才可以在其他地方使用. 实际上使用predicate 也是根据key-value这样的形式来查询的.</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">4.``[c],[d],[cd]``可以加到比较符号的后面表示不区分大小写，不区分发音符号，两这个都不区分</div><div class=\"line\"></div><div class=\"line\">5.如果想要匹配null或者nil值得时候,需要额外增加一条对比</div></pre></td></tr></table></figure></p>\n<p>predicate = [NSPredicate predicateWithFormat:@”(firstName == %@) || (firstName == nil)”];<br>filteredArray = [array filteredArrayUsingPredicate:predicate];<br>NSLog(@”%@”, filteredArray);<br>```</p>\n","excerpt":"","categories":[],"tags":[]},{"title":"iOS部署开发环境的几个步骤","date":"2017-01-21T03:00:42.000Z","path":"2017/01/21/iOS部署开发环境/","text":"安装 Homebrew Homebrew简称brew,是Mac OSX上的软件包管理工具,能在Mac中方便的安装软件或者卸载软件,可以说Homebrew就是MAC下的apt-get、yum神器 安装很简单,打开终端,直接输入命令即可,具体使用此处不提,可取官网参看文档 1/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 安装 Git Xcode中就自带Git,如果你是一名iOS Developer ,直接安装Xcode即可. 在终端中,输入git,会显示相关的命令,按需使用即可 安装 Zsh 自动安装 1curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh 手动安装 123456789// 1. 克隆到本地仓库git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh// 2. (可选)对本地已有文件备份~/.zshrc filecp ~/.zshrc ~/.zshrc.orig// 3. 利用提供的模板对zsh进行配置cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc// 4. 设置zsh为默认终端chsh -s /bin/zsh// 5. 重启你的终端设备 CocoaPods安装和使用 CocoaPods是iOS最常用的第三方类库管理工具，绝大部分有名的开源类库都支持CocoaPods。 CocoaPods是用Ruby实现的，要想使用它首先需要有Ruby的环境。幸运的是OS X系统默认已经可以运行Ruby了，因此我们只需执行以下命令： 123sudo gem install cocoapods// 或者sudo gem install -n/user/local/bin cocoapods 由于某些原因，执行时会出现下面的错误提示： 1ERROR: Could not find a valid gem 'cocoapods' (&gt;= 0), here is why: Unable to download data from https://rubygems.org/ - Errno::EPIPE: Broken pipe - SSL_connect (https://rubygems.org/latest_specs.4.8.gz) 当你使用代理后如果还是很慢，可以用淘宝的RubyGems镜像来代替官方版本，执行以下命令： 1234$ gem sources -l$ gem sources --remove https://rubygems.org/ $ gem sources -a https://ruby.taobao.org/ $ gem sources -l 将代理换回国内的淘宝后,重新执行一遍安装命令 1sudo gem install cocoapods 安装成功后，接着执行命令 1pod setup 如果Ruby环境不够新，可能需要更新以下： 1sudo gem update --system 然后利用vim打开Podfile文件编辑，加入你想要使用的类库，格式如下： 12345platform :ios, &apos;8.0&apos;use_frameworks!target &apos;Test&apos; do pod &apos;AFNetworking&apos;, &apos;~&gt; 3.0&apos; end 注意iOS8.0之后，可以增加的动态库了（以前只能是静态库的），为了匹配动态库，增加了 1use_frameworks! 最后执行安装命令 1[!] From now on use `Sample0814.xcworkspace`. 当终端出现类似下面的提示后，就代表成功了： 1pod install P.s.1 上面的每一步都有可能出现问题，但大部分问题都是因为大局域网的原因，用一个网速稳定的境外VPN可破。 P.s.2 如果上面因为权限问题安装失败，必须每次都要删除 1rm -rf /Users/loginnanme/Library/Caches/CocoaPods/ 因为这个缓存中会存下你的github的东西，造成每次都调用上次权限问题的缓存。 P.s.3 关于Podfile文件编辑时，第三方库版本号的各种写法： 123456789pod ‘AFNetworking’ //不显式指定依赖库版本，表示每次都获取最新版本 pod ‘AFNetworking’, ‘2.0’ //只使用2.0版本 pod ‘AFNetworking’, ‘&gt;2.0′ //使用高于2.0的版本pod ‘AFNetworking’, ‘&gt;=2.0′ //使用大于或等于2.0的版本 pod ‘AFNetworking’, ‘&lt;2.0′ //使用小于2.0的版本 pod ‘AFNetworking’, ‘&lt;=2.0′ //使用小于或等于2.0的版本 pod ‘AFNetworking’, ‘~&gt;0.1.2′ //使用大于等于0.1.2但小于0.2的版本，相当于&gt;=0.1.2并且&lt;0.2.0 pod ‘AFNetworking’, ‘~&gt;0.1′ //使用大于等于0.1但小于1.0的版本 pod ‘AFNetworking’, ‘~&gt;0′ //高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本 再执行 1pod setup 的时候,可能会比较慢,这时候不要慌,可以通过 123cd .~/cocoapods 之后 du -sh 查看当前的安装进度 如果Mac自带的Ruby版本不够新,可以参考我的另一篇文章http://www.jianshu.com/p/2bc92a0e1b83 在按照步骤执行的过程中遇到任何问题希望大家多多交流","content":"<h2 id=\"安装-Homebrew\"><a href=\"#安装-Homebrew\" class=\"headerlink\" title=\"安装 Homebrew\"></a>安装 Homebrew</h2><ol>\n<li><p><code>Homebrew</code>简称<code>brew</code>,是Mac OSX上的软件包管理工具,能在Mac中方便的安装软件或者卸载软件,可以说<code>Homebrew</code>就是<code>MAC</code>下的<code>apt-get</code>、<code>yum</code>神器 </p>\n</li>\n<li><p>安装很简单,打开终端,直接输入命令即可,具体使用此处不提,可取官网参看文档</p>\n</li>\n</ol>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/ruby -e <span class=\"string\">\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><ul>\n<li><p><code>Xcode</code>中就自带<code>Git</code>,如果你是一名<code>iOS Developer</code> ,直接安装<code>Xcode</code>即可.</p>\n</li>\n<li><p>在终端中,输入<code>git</code>,会显示相关的命令,按需使用即可</p>\n</li>\n</ul>\n<h2 id=\"安装-Zsh\"><a href=\"#安装-Zsh\" class=\"headerlink\" title=\"安装 Zsh\"></a>安装 Zsh</h2><ul>\n<li>自动安装</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh</div></pre></td></tr></table></figure>\n<ul>\n<li>手动安装</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1. 克隆到本地仓库</span></div><div class=\"line\">git clone git:<span class=\"comment\">//github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span></div><div class=\"line\"><span class=\"comment\">// 2. (可选)对本地已有文件备份</span></div><div class=\"line\">~/.zshrc filecp ~/.zshrc ~/.zshrc.orig</div><div class=\"line\"><span class=\"comment\">// 3. 利用提供的模板对zsh进行配置</span></div><div class=\"line\">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</div><div class=\"line\"><span class=\"comment\">// 4. 设置zsh为默认终端</span></div><div class=\"line\">chsh -s /bin/zsh</div><div class=\"line\"><span class=\"comment\">// 5. 重启你的终端设备</span></div></pre></td></tr></table></figure>\n<h2 id=\"CocoaPods安装和使用\"><a href=\"#CocoaPods安装和使用\" class=\"headerlink\" title=\"CocoaPods安装和使用\"></a>CocoaPods安装和使用</h2><ul>\n<li>CocoaPods是iOS最常用的第三方类库管理工具，绝大部分有名的开源类库都支持CocoaPods。</li>\n<li>CocoaPods是用Ruby实现的，要想使用它首先需要有Ruby的环境。幸运的是OS X系统默认已经可以运行Ruby了，因此我们只需执行以下命令：</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem install cocoapods</div><div class=\"line\"><span class=\"comment\">// 或者</span></div><div class=\"line\">sudo gem install -n/user/local/bin cocoapods</div></pre></td></tr></table></figure>\n<ul>\n<li>由于某些原因，执行时会出现下面的错误提示： </li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR: Could not find a valid gem 'cocoapods' (&gt;= 0), here is why: Unable to download data from https://rubygems.org/ - Errno::EPIPE: Broken pipe - SSL_connect (https://rubygems.org/latest_specs.4.8.gz)</div></pre></td></tr></table></figure>\n<ul>\n<li>当你使用代理后如果还是很慢，可以用淘宝的RubyGems镜像来代替官方版本，执行以下命令：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gem sources -l</div><div class=\"line\">$ gem sources --remove https://rubygems.org/ </div><div class=\"line\">$ gem sources -a https://ruby.taobao.org/ </div><div class=\"line\">$ gem sources -l</div></pre></td></tr></table></figure>\n<ul>\n<li>将代理换回国内的淘宝后,重新执行一遍安装命令</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem install cocoapods</div></pre></td></tr></table></figure>\n<ul>\n<li>安装成功后，接着执行命令</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod setup</div></pre></td></tr></table></figure>\n<ul>\n<li>如果Ruby环境不够新，可能需要更新以下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo gem update --system</div></pre></td></tr></table></figure>\n<ul>\n<li>然后利用vim打开Podfile文件编辑，加入你想要使用的类库，格式如下：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">platform :ios, &apos;8.0&apos;</div><div class=\"line\">use_frameworks!</div><div class=\"line\">target &apos;Test&apos; do pod </div><div class=\"line\">&apos;AFNetworking&apos;, &apos;~&gt; 3.0&apos; </div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<ul>\n<li>注意iOS8.0之后，可以增加的动态库了（以前只能是静态库的），为了匹配动态库，增加了</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">use_frameworks!</div></pre></td></tr></table></figure>\n<ul>\n<li>最后执行安装命令</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[!] From now on use `Sample0814.xcworkspace`.</div></pre></td></tr></table></figure>\n<ul>\n<li>当终端出现类似下面的提示后，就代表成功了：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod install</div></pre></td></tr></table></figure>\n<ul>\n<li><p>P.s.1 上面的每一步都有可能出现问题，但大部分问题都是因为大局域网的原因，用一个网速稳定的境外VPN可破。</p>\n</li>\n<li><p>P.s.2 如果上面因为权限问题安装失败，必须每次都要删除</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm -rf /Users/loginnanme/Library/Caches/CocoaPods/</div></pre></td></tr></table></figure>\n<ul>\n<li>因为这个缓存中会存下你的github的东西，造成每次都调用上次权限问题的缓存。</li>\n<li>P.s.3 关于Podfile文件编辑时，第三方库版本号的各种写法：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod ‘AFNetworking’ //不显式指定依赖库版本，表示每次都获取最新版本 </div><div class=\"line\">pod ‘AFNetworking’, ‘2.0’ //只使用2.0版本 </div><div class=\"line\">pod ‘AFNetworking’, ‘&gt;2.0′ //使用高于2.0的版本</div><div class=\"line\">pod ‘AFNetworking’, ‘&gt;=2.0′ //使用大于或等于2.0的版本 </div><div class=\"line\">pod ‘AFNetworking’, ‘&lt;2.0′ //使用小于2.0的版本 </div><div class=\"line\">pod ‘AFNetworking’, ‘&lt;=2.0′ //使用小于或等于2.0的版本 </div><div class=\"line\">pod ‘AFNetworking’, ‘~&gt;0.1.2′ //使用大于等于0.1.2但小于0.2的版本，相当于&gt;=0.1.2并且&lt;0.2.0 </div><div class=\"line\">pod ‘AFNetworking’, ‘~&gt;0.1′ //使用大于等于0.1但小于1.0的版本 </div><div class=\"line\">pod ‘AFNetworking’, ‘~&gt;0′ //高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本</div></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>再执行</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pod setup</div></pre></td></tr></table></figure>\n<ul>\n<li>的时候,可能会比较慢,这时候不要慌,可以通过</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd .~/cocoapods </div><div class=\"line\">之后 </div><div class=\"line\">du -sh</div></pre></td></tr></table></figure>\n<ul>\n<li><p>查看当前的安装进度</p>\n</li>\n<li><p>如果Mac自带的Ruby版本不够新,可以参考我的另一篇文章<br><a href=\"http://www.jianshu.com/p/2bc92a0e1b83\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/2bc92a0e1b83</a></p>\n</li>\n<li><p>在按照步骤执行的过程中遇到任何问题希望大家多多交流</p>\n</li>\n</ul>\n","excerpt":"","categories":[],"tags":[]}]